"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a set of `AtBatSkip`."""
  atBatSkips(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `AtBatSkip`."""
    orderBy: [AtBatSkipsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AtBatSkipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AtBatSkipFilter
  ): [AtBatSkip!]

  """Reads a set of `BaseRunner`."""
  baseRunners(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `BaseRunner`."""
    orderBy: [BaseRunnersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BaseRunnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BaseRunnerFilter
  ): [BaseRunner!]

  """Reads a set of `BasepathMovement`."""
  basepathMovements(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `BasepathMovement`."""
    orderBy: [BasepathMovementsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasepathMovementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BasepathMovementFilter
  ): [BasepathMovement!]

  """Reads a set of `CareerBattingStat`."""
  careerBattingStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CareerBattingStat`."""
    orderBy: [CareerBattingStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CareerBattingStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CareerBattingStatFilter
  ): [CareerBattingStat!]

  """Reads a set of `EarlyGameEnd`."""
  earlyGameEnds(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EarlyGameEnd`."""
    orderBy: [EarlyGameEndsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EarlyGameEndCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EarlyGameEndFilter
  ): [EarlyGameEnd!]

  """Reads a set of `Field`."""
  fields(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Field`."""
    orderBy: [FieldsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FieldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FieldFilter
  ): [Field!]

  """Reads a set of `Game`."""
  games(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameFilter
  ): [Game!]

  """Reads a set of `GameAuxMeetupInfo`."""
  gameAuxMeetupInfos(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameAuxMeetupInfo`."""
    orderBy: [GameAuxMeetupInfosOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameAuxMeetupInfoCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameAuxMeetupInfoFilter
  ): [GameAuxMeetupInfo!]

  """Reads a set of `GameBattingStat`."""
  gameBattingStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameBattingStat`."""
    orderBy: [GameBattingStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameBattingStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameBattingStatFilter
  ): [GameBattingStat!]

  """Reads a set of `GameEvent`."""
  gameEvents(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameEvent`."""
    orderBy: [GameEventsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameEventFilter
  ): [GameEvent!]

  """Reads a set of `GameEventRecord`."""
  gameEventRecords(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameEventRecord`."""
    orderBy: [GameEventRecordsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameEventRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameEventRecordFilter
  ): [GameEventRecord!]

  """Reads a set of `GameState`."""
  gameStates(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameState`."""
    orderBy: [GameStatesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameStateCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameStateFilter
  ): [GameState!]

  """Reads a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): [Group!]

  """Reads a set of `Lineup`."""
  lineups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Lineup`."""
    orderBy: [LineupsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupFilter
  ): [Lineup!]

  """Reads a set of `LineupChange`."""
  lineupChanges(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LineupChange`."""
    orderBy: [LineupChangesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupChangeFilter
  ): [LineupChange!]

  """Reads a set of `LineupForGameState`."""
  lineupForGameStates(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LineupForGameState`."""
    orderBy: [LineupForGameStatesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupForGameStateCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupForGameStateFilter
  ): [LineupForGameState!]

  """Reads a set of `LineupSpot`."""
  lineupSpots(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LineupSpot`."""
    orderBy: [LineupSpotsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupSpotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupSpotFilter
  ): [LineupSpot!]

  """Reads a set of `ManualEntryBattingLine`."""
  manualEntryBattingLines(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ManualEntryBattingLine`."""
    orderBy: [ManualEntryBattingLinesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManualEntryBattingLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ManualEntryBattingLineFilter
  ): [ManualEntryBattingLine!]

  """Reads a set of `ManualEntryLineScoreCell`."""
  manualEntryLineScoreCells(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ManualEntryLineScoreCell`."""
    orderBy: [ManualEntryLineScoreCellsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManualEntryLineScoreCellCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ManualEntryLineScoreCellFilter
  ): [ManualEntryLineScoreCell!]

  """Reads a set of `ManualEntryPitchingLine`."""
  manualEntryPitchingLines(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ManualEntryPitchingLine`."""
    orderBy: [ManualEntryPitchingLinesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManualEntryPitchingLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ManualEntryPitchingLineFilter
  ): [ManualEntryPitchingLine!]

  """Reads a set of `OutOnPlayRunner`."""
  outOnPlayRunners(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `OutOnPlayRunner`."""
    orderBy: [OutOnPlayRunnersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OutOnPlayRunnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OutOnPlayRunnerFilter
  ): [OutOnPlayRunner!]

  """Reads a set of `PlateAppearance`."""
  plateAppearances(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PlateAppearance`."""
    orderBy: [PlateAppearancesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlateAppearanceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlateAppearanceFilter
  ): [PlateAppearance!]

  """Reads a set of `Player`."""
  players(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlayerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlayerFilter
  ): [Player!]

  """Reads a set of `PlayerAuxMeetupInfo`."""
  playerAuxMeetupInfos(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PlayerAuxMeetupInfo`."""
    orderBy: [PlayerAuxMeetupInfosOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlayerAuxMeetupInfoCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlayerAuxMeetupInfoFilter
  ): [PlayerAuxMeetupInfo!]

  """Reads a set of `PlayerGroupMembership`."""
  playerGroupMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PlayerGroupMembership`."""
    orderBy: [PlayerGroupMembershipsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlayerGroupMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlayerGroupMembershipFilter
  ): [PlayerGroupMembership!]

  """Reads a set of `ReduxDump`."""
  reduxDumps(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ReduxDump`."""
    orderBy: [ReduxDumpsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReduxDumpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReduxDumpFilter
  ): [ReduxDump!]

  """Reads a set of `ScoredRunner`."""
  scoredRunners(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ScoredRunner`."""
    orderBy: [ScoredRunnersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoredRunnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoredRunnerFilter
  ): [ScoredRunner!]

  """Reads a set of `SeasonBattingStat`."""
  seasonBattingStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SeasonBattingStat`."""
    orderBy: [SeasonBattingStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonBattingStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonBattingStatFilter
  ): [SeasonBattingStat!]

  """Reads a set of `SoloModeOpponentInning`."""
  soloModeOpponentInnings(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SoloModeOpponentInning`."""
    orderBy: [SoloModeOpponentInningsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SoloModeOpponentInningCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SoloModeOpponentInningFilter
  ): [SoloModeOpponentInning!]

  """Reads a set of `StolenBaseAttempt`."""
  stolenBaseAttempts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `StolenBaseAttempt`."""
    orderBy: [StolenBaseAttemptsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StolenBaseAttemptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StolenBaseAttemptFilter
  ): [StolenBaseAttempt!]

  """Reads a set of `Team`."""
  teams(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TeamFilter
  ): [Team!]
  atBatSkip(id: UUID!): AtBatSkip
  baseRunner(gameStateId: UUID!, runnerId: UUID!): BaseRunner
  basepathMovement(plateAppearanceId: UUID!, runnerId: UUID!): BasepathMovement
  careerBattingStat(groupId: UUID!, playerId: UUID!): CareerBattingStat
  earlyGameEnd(id: UUID!): EarlyGameEnd
  field(id: UUID!): Field
  game(id: UUID!): Game
  gameByGroupIdAndName(groupId: UUID!, name: String!): Game
  gameAuxMeetupInfo(gameId: UUID!): GameAuxMeetupInfo
  gameBattingStat(gameId: UUID!, teamId: UUID!, playerId: UUID!): GameBattingStat
  gameEvent(id: UUID!): GameEvent
  gameEventRecord(id: UUID!): GameEventRecord
  gameEventRecordByGameIdAndEventIndex(gameId: UUID!, eventIndex: Int!): GameEventRecord
  gameState(id: UUID!): GameState
  group(id: UUID!): Group
  groupByName(name: String!): Group
  groupByUrlSlug(urlSlug: String!): Group
  lineup(id: UUID!): Lineup
  lineupChange(id: UUID!): LineupChange
  lineupForGameState(gameStateId: UUID!, lineupId: UUID!): LineupForGameState
  lineupSpot(lineupId: UUID!, playerId: UUID!): LineupSpot
  lineupSpotByLineupIdAndBattingOrder(lineupId: UUID!, battingOrder: Int!): LineupSpot
  lineupSpotByLineupIdAndPosition(lineupId: UUID!, position: FieldingPosition!): LineupSpot
  manualEntryBattingLine(gameId: UUID!, teamId: UUID!, playerId: UUID!): ManualEntryBattingLine
  manualEntryLineScoreCell(gameId: UUID!, inning: Int!, halfInning: HalfInning!): ManualEntryLineScoreCell
  manualEntryPitchingLine(gameId: UUID!, teamId: UUID!, playerId: UUID!): ManualEntryPitchingLine
  outOnPlayRunner(plateAppearanceId: UUID!, runnerId: UUID!): OutOnPlayRunner
  plateAppearance(id: UUID!): PlateAppearance
  player(id: UUID!): Player
  playerByFirstNameAndLastName(firstName: String!, lastName: String!): Player
  playerAuxMeetupInfo(playerId: UUID!): PlayerAuxMeetupInfo
  playerGroupMembership(playerId: UUID!, groupId: UUID!): PlayerGroupMembership
  reduxDump(id: UUID!): ReduxDump
  scoredRunner(gameEventRecordId: UUID!, runnerId: UUID!): ScoredRunner
  seasonBattingStat(groupId: UUID!, playerId: UUID!): SeasonBattingStat
  soloModeOpponentInning(id: UUID!): SoloModeOpponentInning
  stolenBaseAttempt(id: UUID!): StolenBaseAttempt
  team(id: UUID!): Team
  teamByGameIdAndRole(gameId: UUID!, role: TeamRole!): Team
  canUserSaveGameData(gameId: UUID): Boolean

  """Reads and enables pagination through a set of `UserGroupPermission`."""
  currentUserGroupPermissions(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserGroupPermissionFilter
  ): [UserGroupPermission]
  currentUserPermissions(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [PermissionType]
  doesUserHaveGroupPermission(groupId: UUID, permission: GroupPermissionType): Boolean
  doesUserHavePermission(permission: PermissionType): Boolean
  firstDateOfYear(year: Int): Datetime
  getAvg(hits: Int, atBats: Int): Float
  getCurrentUser: Player
  getCurrentUserId: UUID
  getObp(hits: Int, walks: Int, plateAppearances: Int): Float
  getOps(hits: Int, totalBases: Int, walks: Int, atBats: Int, plateAppearances: Int): Float
  getPlateAppearances(
    playerId: UUID
    gameId: UUID
    season: Int
    beforeDate: Datetime
    afterDate: Datetime

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GetPlateAppearancesRecordFilter
  ): [GetPlateAppearancesRecord]
  getRunsScored(
    groupId: UUID
    gameId: UUID
    batterId: UUID
    runnerId: UUID
    beforeDate: Datetime
    afterDate: Datetime

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GetRunsScoredRecordFilter
  ): [GetRunsScoredRecord]
  getSlg(totalBases: Int, atBats: Int): Float
  getTb(singles: Int, doubles: Int, triples: Int, homeruns: Int): Int
  getTeamForPlayer(playerId: UUID, gameId: UUID): UUID
  lastDateOfYear(year: Int): Datetime

  """Reads a single `AtBatSkip` using its globally unique `ID`."""
  atBatSkipByNodeId(
    """The globally unique `ID` to be used in selecting a single `AtBatSkip`."""
    nodeId: ID!
  ): AtBatSkip

  """Reads a single `BaseRunner` using its globally unique `ID`."""
  baseRunnerByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `BaseRunner`.
    """
    nodeId: ID!
  ): BaseRunner

  """Reads a single `BasepathMovement` using its globally unique `ID`."""
  basepathMovementByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `BasepathMovement`.
    """
    nodeId: ID!
  ): BasepathMovement

  """Reads a single `CareerBattingStat` using its globally unique `ID`."""
  careerBattingStatByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CareerBattingStat`.
    """
    nodeId: ID!
  ): CareerBattingStat

  """Reads a single `EarlyGameEnd` using its globally unique `ID`."""
  earlyGameEndByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EarlyGameEnd`.
    """
    nodeId: ID!
  ): EarlyGameEnd

  """Reads a single `Field` using its globally unique `ID`."""
  fieldByNodeId(
    """The globally unique `ID` to be used in selecting a single `Field`."""
    nodeId: ID!
  ): Field

  """Reads a single `Game` using its globally unique `ID`."""
  gameByNodeId(
    """The globally unique `ID` to be used in selecting a single `Game`."""
    nodeId: ID!
  ): Game

  """Reads a single `GameAuxMeetupInfo` using its globally unique `ID`."""
  gameAuxMeetupInfoByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GameAuxMeetupInfo`.
    """
    nodeId: ID!
  ): GameAuxMeetupInfo

  """Reads a single `GameBattingStat` using its globally unique `ID`."""
  gameBattingStatByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GameBattingStat`.
    """
    nodeId: ID!
  ): GameBattingStat

  """Reads a single `GameEvent` using its globally unique `ID`."""
  gameEventByNodeId(
    """The globally unique `ID` to be used in selecting a single `GameEvent`."""
    nodeId: ID!
  ): GameEvent

  """Reads a single `GameEventRecord` using its globally unique `ID`."""
  gameEventRecordByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GameEventRecord`.
    """
    nodeId: ID!
  ): GameEventRecord

  """Reads a single `GameState` using its globally unique `ID`."""
  gameStateByNodeId(
    """The globally unique `ID` to be used in selecting a single `GameState`."""
    nodeId: ID!
  ): GameState

  """Reads a single `Group` using its globally unique `ID`."""
  groupByNodeId(
    """The globally unique `ID` to be used in selecting a single `Group`."""
    nodeId: ID!
  ): Group

  """Reads a single `Lineup` using its globally unique `ID`."""
  lineupByNodeId(
    """The globally unique `ID` to be used in selecting a single `Lineup`."""
    nodeId: ID!
  ): Lineup

  """Reads a single `LineupChange` using its globally unique `ID`."""
  lineupChangeByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `LineupChange`.
    """
    nodeId: ID!
  ): LineupChange

  """Reads a single `LineupForGameState` using its globally unique `ID`."""
  lineupForGameStateByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `LineupForGameState`.
    """
    nodeId: ID!
  ): LineupForGameState

  """Reads a single `LineupSpot` using its globally unique `ID`."""
  lineupSpotByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `LineupSpot`.
    """
    nodeId: ID!
  ): LineupSpot

  """
  Reads a single `ManualEntryBattingLine` using its globally unique `ID`.
  """
  manualEntryBattingLineByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ManualEntryBattingLine`.
    """
    nodeId: ID!
  ): ManualEntryBattingLine

  """
  Reads a single `ManualEntryLineScoreCell` using its globally unique `ID`.
  """
  manualEntryLineScoreCellByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ManualEntryLineScoreCell`.
    """
    nodeId: ID!
  ): ManualEntryLineScoreCell

  """
  Reads a single `ManualEntryPitchingLine` using its globally unique `ID`.
  """
  manualEntryPitchingLineByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ManualEntryPitchingLine`.
    """
    nodeId: ID!
  ): ManualEntryPitchingLine

  """Reads a single `OutOnPlayRunner` using its globally unique `ID`."""
  outOnPlayRunnerByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OutOnPlayRunner`.
    """
    nodeId: ID!
  ): OutOnPlayRunner

  """Reads a single `PlateAppearance` using its globally unique `ID`."""
  plateAppearanceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PlateAppearance`.
    """
    nodeId: ID!
  ): PlateAppearance

  """Reads a single `Player` using its globally unique `ID`."""
  playerByNodeId(
    """The globally unique `ID` to be used in selecting a single `Player`."""
    nodeId: ID!
  ): Player

  """Reads a single `PlayerAuxMeetupInfo` using its globally unique `ID`."""
  playerAuxMeetupInfoByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PlayerAuxMeetupInfo`.
    """
    nodeId: ID!
  ): PlayerAuxMeetupInfo

  """Reads a single `PlayerGroupMembership` using its globally unique `ID`."""
  playerGroupMembershipByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PlayerGroupMembership`.
    """
    nodeId: ID!
  ): PlayerGroupMembership

  """Reads a single `ReduxDump` using its globally unique `ID`."""
  reduxDumpByNodeId(
    """The globally unique `ID` to be used in selecting a single `ReduxDump`."""
    nodeId: ID!
  ): ReduxDump

  """Reads a single `ScoredRunner` using its globally unique `ID`."""
  scoredRunnerByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ScoredRunner`.
    """
    nodeId: ID!
  ): ScoredRunner

  """Reads a single `SeasonBattingStat` using its globally unique `ID`."""
  seasonBattingStatByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SeasonBattingStat`.
    """
    nodeId: ID!
  ): SeasonBattingStat

  """
  Reads a single `SoloModeOpponentInning` using its globally unique `ID`.
  """
  soloModeOpponentInningByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SoloModeOpponentInning`.
    """
    nodeId: ID!
  ): SoloModeOpponentInning

  """Reads a single `StolenBaseAttempt` using its globally unique `ID`."""
  stolenBaseAttemptByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `StolenBaseAttempt`.
    """
    nodeId: ID!
  ): StolenBaseAttempt

  """Reads a single `Team` using its globally unique `ID`."""
  teamByNodeId(
    """The globally unique `ID` to be used in selecting a single `Team`."""
    nodeId: ID!
  ): Team
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type AtBatSkip implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  batterId: UUID!
  gameId: UUID!

  """Reads a single `Player` that is related to this `AtBatSkip`."""
  batter: Player

  """Reads a single `Game` that is related to this `AtBatSkip`."""
  game: Game
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

type Player implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime!
  claimed: Boolean!
  timeUpdated: Datetime!
  timeClaimed: Datetime
  active: Boolean!

  """Reads and enables pagination through a set of `Team`."""
  teamsByCaptainId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TeamFilter
  ): [Team!]!

  """Reads and enables pagination through a set of `LineupSpot`."""
  lineupSpots(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LineupSpot`."""
    orderBy: [LineupSpotsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupSpotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupSpotFilter
  ): [LineupSpot!]!

  """Reads and enables pagination through a set of `PlateAppearance`."""
  plateAppearancesByBatterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PlateAppearance`."""
    orderBy: [PlateAppearancesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlateAppearanceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlateAppearanceFilter
  ): [PlateAppearance!]!

  """Reads and enables pagination through a set of `BasepathMovement`."""
  basepathMovementsByRunnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `BasepathMovement`."""
    orderBy: [BasepathMovementsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasepathMovementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BasepathMovementFilter
  ): [BasepathMovement!]!

  """Reads and enables pagination through a set of `OutOnPlayRunner`."""
  outOnPlayRunnersByRunnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `OutOnPlayRunner`."""
    orderBy: [OutOnPlayRunnersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OutOnPlayRunnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OutOnPlayRunnerFilter
  ): [OutOnPlayRunner!]!

  """Reads and enables pagination through a set of `StolenBaseAttempt`."""
  stolenBaseAttemptsByRunnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `StolenBaseAttempt`."""
    orderBy: [StolenBaseAttemptsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StolenBaseAttemptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StolenBaseAttemptFilter
  ): [StolenBaseAttempt!]!

  """Reads and enables pagination through a set of `GameState`."""
  gameStatesByPlayerAtBat(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameState`."""
    orderBy: [GameStatesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameStateCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameStateFilter
  ): [GameState!]!

  """Reads and enables pagination through a set of `BaseRunner`."""
  baseRunnersByRunnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `BaseRunner`."""
    orderBy: [BaseRunnersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BaseRunnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BaseRunnerFilter
  ): [BaseRunner!]!

  """Reads and enables pagination through a set of `ScoredRunner`."""
  scoredRunnersByRunnerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ScoredRunner`."""
    orderBy: [ScoredRunnersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoredRunnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoredRunnerFilter
  ): [ScoredRunner!]!

  """Reads and enables pagination through a set of `PlayerGroupMembership`."""
  playerGroupMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PlayerGroupMembership`."""
    orderBy: [PlayerGroupMembershipsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlayerGroupMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlayerGroupMembershipFilter
  ): [PlayerGroupMembership!]!

  """Reads and enables pagination through a set of `AtBatSkip`."""
  atBatSkipsByBatterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `AtBatSkip`."""
    orderBy: [AtBatSkipsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AtBatSkipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AtBatSkipFilter
  ): [AtBatSkip!]!

  """
  Reads and enables pagination through a set of `ManualEntryBattingLine`.
  """
  manualEntryBattingLines(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ManualEntryBattingLine`."""
    orderBy: [ManualEntryBattingLinesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManualEntryBattingLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ManualEntryBattingLineFilter
  ): [ManualEntryBattingLine!]!

  """
  Reads and enables pagination through a set of `ManualEntryPitchingLine`.
  """
  manualEntryPitchingLines(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ManualEntryPitchingLine`."""
    orderBy: [ManualEntryPitchingLinesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManualEntryPitchingLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ManualEntryPitchingLineFilter
  ): [ManualEntryPitchingLine!]!

  """Reads a single `PlayerAuxMeetupInfo` that is related to this `Player`."""
  playerAuxMeetupInfo: PlayerAuxMeetupInfo

  """Reads a single `GameAuxMeetupInfo` that is related to this `Player`."""
  gameAuxMeetupInfoByGameId: GameAuxMeetupInfo

  """Reads and enables pagination through a set of `CareerBattingStat`."""
  careerBattingStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CareerBattingStat`."""
    orderBy: [CareerBattingStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CareerBattingStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CareerBattingStatFilter
  ): [CareerBattingStat!]!

  """Reads and enables pagination through a set of `GameBattingStat`."""
  gameBattingStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameBattingStat`."""
    orderBy: [GameBattingStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameBattingStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameBattingStatFilter
  ): [GameBattingStat!]!

  """Reads and enables pagination through a set of `SeasonBattingStat`."""
  seasonBattingStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SeasonBattingStat`."""
    orderBy: [SeasonBattingStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonBattingStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonBattingStatFilter
  ): [SeasonBattingStat!]!
  debut(groupId: UUID): Date
  fullName: String
  gamesPlayed(beforeDate: Datetime, afterDate: Datetime): Int

  """sortable"""
  gamesPlayedThisYear: Int
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Team implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  gameId: UUID!
  role: TeamRole!
  name: String
  captainId: UUID
  winner: Boolean
  soloModeOpponent: Boolean!

  """Reads a single `Game` that is related to this `Team`."""
  game: Game

  """Reads a single `Player` that is related to this `Team`."""
  captain: Player

  """Reads and enables pagination through a set of `Lineup`."""
  lineups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Lineup`."""
    orderBy: [LineupsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupFilter
  ): [Lineup!]!

  """
  Reads and enables pagination through a set of `ManualEntryBattingLine`.
  """
  manualEntryBattingLines(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ManualEntryBattingLine`."""
    orderBy: [ManualEntryBattingLinesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManualEntryBattingLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ManualEntryBattingLineFilter
  ): [ManualEntryBattingLine!]!

  """
  Reads and enables pagination through a set of `ManualEntryPitchingLine`.
  """
  manualEntryPitchingLines(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ManualEntryPitchingLine`."""
    orderBy: [ManualEntryPitchingLinesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManualEntryPitchingLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ManualEntryPitchingLineFilter
  ): [ManualEntryPitchingLine!]!

  """Reads and enables pagination through a set of `GameBattingStat`."""
  gameBattingStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameBattingStat`."""
    orderBy: [GameBattingStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameBattingStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameBattingStatFilter
  ): [GameBattingStat!]!
  finalLineup: Lineup
}

enum TeamRole {
  AWAY
  HOME
}

type Game implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  groupId: UUID!
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int!
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime!
  soloMode: Boolean!
  manualEntry: Boolean!
  legacyMeetup: Boolean!

  """Reads a single `Group` that is related to this `Game`."""
  group: Group

  """Reads a single `Field` that is related to this `Game`."""
  field: Field

  """Reads and enables pagination through a set of `Team`."""
  teams(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TeamFilter
  ): [Team!]!

  """Reads and enables pagination through a set of `Lineup`."""
  lineups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Lineup`."""
    orderBy: [LineupsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupFilter
  ): [Lineup!]!

  """Reads and enables pagination through a set of `LineupSpot`."""
  lineupSpots(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LineupSpot`."""
    orderBy: [LineupSpotsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupSpotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupSpotFilter
  ): [LineupSpot!]!

  """Reads and enables pagination through a set of `PlateAppearance`."""
  plateAppearances(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PlateAppearance`."""
    orderBy: [PlateAppearancesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlateAppearanceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlateAppearanceFilter
  ): [PlateAppearance!]!

  """Reads and enables pagination through a set of `BasepathMovement`."""
  basepathMovements(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `BasepathMovement`."""
    orderBy: [BasepathMovementsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasepathMovementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BasepathMovementFilter
  ): [BasepathMovement!]!

  """Reads and enables pagination through a set of `OutOnPlayRunner`."""
  outOnPlayRunners(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `OutOnPlayRunner`."""
    orderBy: [OutOnPlayRunnersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OutOnPlayRunnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OutOnPlayRunnerFilter
  ): [OutOnPlayRunner!]!

  """Reads and enables pagination through a set of `StolenBaseAttempt`."""
  stolenBaseAttempts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `StolenBaseAttempt`."""
    orderBy: [StolenBaseAttemptsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StolenBaseAttemptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StolenBaseAttemptFilter
  ): [StolenBaseAttempt!]!

  """Reads and enables pagination through a set of `LineupChange`."""
  lineupChanges(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LineupChange`."""
    orderBy: [LineupChangesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupChangeFilter
  ): [LineupChange!]!

  """Reads and enables pagination through a set of `GameState`."""
  gameStates(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameState`."""
    orderBy: [GameStatesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameStateCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameStateFilter
  ): [GameState!]!

  """Reads and enables pagination through a set of `BaseRunner`."""
  baseRunners(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `BaseRunner`."""
    orderBy: [BaseRunnersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BaseRunnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BaseRunnerFilter
  ): [BaseRunner!]!

  """Reads and enables pagination through a set of `LineupForGameState`."""
  lineupForGameStates(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LineupForGameState`."""
    orderBy: [LineupForGameStatesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupForGameStateCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupForGameStateFilter
  ): [LineupForGameState!]!

  """Reads and enables pagination through a set of `GameEventRecord`."""
  gameEventRecords(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameEventRecord`."""
    orderBy: [GameEventRecordsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameEventRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameEventRecordFilter
  ): [GameEventRecord!]!

  """Reads and enables pagination through a set of `ScoredRunner`."""
  scoredRunners(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ScoredRunner`."""
    orderBy: [ScoredRunnersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoredRunnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoredRunnerFilter
  ): [ScoredRunner!]!

  """
  Reads and enables pagination through a set of `SoloModeOpponentInning`.
  """
  soloModeOpponentInnings(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SoloModeOpponentInning`."""
    orderBy: [SoloModeOpponentInningsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SoloModeOpponentInningCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SoloModeOpponentInningFilter
  ): [SoloModeOpponentInning!]!

  """Reads and enables pagination through a set of `AtBatSkip`."""
  atBatSkips(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `AtBatSkip`."""
    orderBy: [AtBatSkipsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AtBatSkipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AtBatSkipFilter
  ): [AtBatSkip!]!

  """Reads and enables pagination through a set of `EarlyGameEnd`."""
  earlyGameEnds(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EarlyGameEnd`."""
    orderBy: [EarlyGameEndsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EarlyGameEndCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EarlyGameEndFilter
  ): [EarlyGameEnd!]!

  """
  Reads and enables pagination through a set of `ManualEntryBattingLine`.
  """
  manualEntryBattingLines(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ManualEntryBattingLine`."""
    orderBy: [ManualEntryBattingLinesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManualEntryBattingLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ManualEntryBattingLineFilter
  ): [ManualEntryBattingLine!]!

  """
  Reads and enables pagination through a set of `ManualEntryPitchingLine`.
  """
  manualEntryPitchingLines(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ManualEntryPitchingLine`."""
    orderBy: [ManualEntryPitchingLinesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManualEntryPitchingLineCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ManualEntryPitchingLineFilter
  ): [ManualEntryPitchingLine!]!

  """
  Reads and enables pagination through a set of `ManualEntryLineScoreCell`.
  """
  manualEntryLineScoreCells(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ManualEntryLineScoreCell`."""
    orderBy: [ManualEntryLineScoreCellsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManualEntryLineScoreCellCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ManualEntryLineScoreCellFilter
  ): [ManualEntryLineScoreCell!]!

  """Reads and enables pagination through a set of `GameBattingStat`."""
  gameBattingStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameBattingStat`."""
    orderBy: [GameBattingStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameBattingStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameBattingStatFilter
  ): [GameBattingStat!]!

  """Reads and enables pagination through a set of `TraditionalStatLine`."""
  boxScore(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TraditionalStatLineFilter
  ): [TraditionalStatLine]

  """Reads and enables pagination through a set of `LineScoreCell`."""
  lineScore(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineScoreCellFilter
  ): [LineScoreCell]
  season: Int
}

type Group implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  notes: String
  soloMode: Boolean
  urlSlug: String!
  allowSkippingAtBats: Boolean
  allowSteals: Boolean

  """Reads and enables pagination through a set of `Game`."""
  games(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameFilter
  ): [Game!]!

  """Reads and enables pagination through a set of `PlayerGroupMembership`."""
  playerGroupMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PlayerGroupMembership`."""
    orderBy: [PlayerGroupMembershipsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlayerGroupMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlayerGroupMembershipFilter
  ): [PlayerGroupMembership!]!

  """Reads and enables pagination through a set of `CareerBattingStat`."""
  careerBattingStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CareerBattingStat`."""
    orderBy: [CareerBattingStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CareerBattingStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CareerBattingStatFilter
  ): [CareerBattingStat!]!

  """Reads and enables pagination through a set of `SeasonBattingStat`."""
  seasonBattingStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SeasonBattingStat`."""
    orderBy: [SeasonBattingStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonBattingStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonBattingStatFilter
  ): [SeasonBattingStat!]!
  allSeasons(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntFilter
  ): [Int]
  gamesInSeason(season: Int): Int

  """Reads and enables pagination through a set of `Player`."""
  players(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlayerFilter
  ): [Player]
}

"""Methods to use when ordering `Game`."""
enum GamesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  NAME_ASC
  NAME_DESC
  FIELD_ID_ASC
  FIELD_ID_DESC
  SCORE_ASC
  SCORE_DESC
  GAME_LENGTH_ASC
  GAME_LENGTH_DESC
  TIME_STARTED_ASC
  TIME_STARTED_DESC
  TIME_ENDED_ASC
  TIME_ENDED_DESC
  TIME_SAVED_ASC
  TIME_SAVED_DESC
  SOLO_MODE_ASC
  SOLO_MODE_DESC
  MANUAL_ENTRY_ASC
  MANUAL_ENTRY_DESC
  LEGACY_MEETUP_ASC
  LEGACY_MEETUP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Game` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GameCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `fieldId` field."""
  fieldId: UUID

  """Checks for equality with the object’s `score` field."""
  score: [Int]

  """Checks for equality with the object’s `gameLength` field."""
  gameLength: Int

  """Checks for equality with the object’s `timeStarted` field."""
  timeStarted: Datetime

  """Checks for equality with the object’s `timeEnded` field."""
  timeEnded: Datetime

  """Checks for equality with the object’s `timeSaved` field."""
  timeSaved: Datetime

  """Checks for equality with the object’s `soloMode` field."""
  soloMode: Boolean

  """Checks for equality with the object’s `manualEntry` field."""
  manualEntry: Boolean

  """Checks for equality with the object’s `legacyMeetup` field."""
  legacyMeetup: Boolean
}

"""
A filter to be used against `Game` object types. All fields are combined with a logical ‘and.’
"""
input GameFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `groupId` field."""
  groupId: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `fieldId` field."""
  fieldId: UUIDFilter

  """Filter by the object’s `score` field."""
  score: IntListFilter

  """Filter by the object’s `gameLength` field."""
  gameLength: IntFilter

  """Filter by the object’s `timeStarted` field."""
  timeStarted: DatetimeFilter

  """Filter by the object’s `timeEnded` field."""
  timeEnded: DatetimeFilter

  """Filter by the object’s `timeSaved` field."""
  timeSaved: DatetimeFilter

  """Filter by the object’s `soloMode` field."""
  soloMode: BooleanFilter

  """Filter by the object’s `manualEntry` field."""
  manualEntry: BooleanFilter

  """Filter by the object’s `legacyMeetup` field."""
  legacyMeetup: BooleanFilter

  """Filter by the object’s `season` field."""
  season: IntFilter

  """Checks for all expressions in this list."""
  and: [GameFilter!]

  """Checks for any expressions in this list."""
  or: [GameFilter!]

  """Negates the expression."""
  not: GameFilter
}

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against Int List fields. All fields are combined with a logical ‘and.’
"""
input IntListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [Int]

  """Not equal to the specified value."""
  notEqualTo: [Int]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [Int]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [Int]

  """Less than the specified value."""
  lessThan: [Int]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [Int]

  """Greater than the specified value."""
  greaterThan: [Int]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [Int]

  """Contains the specified list of values."""
  contains: [Int]

  """Contained by the specified list of values."""
  containedBy: [Int]

  """Overlaps the specified list of values."""
  overlaps: [Int]

  """Any array item is equal to the specified value."""
  anyEqualTo: Int

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: Int

  """Any array item is less than the specified value."""
  anyLessThan: Int

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: Int

  """Any array item is greater than the specified value."""
  anyGreaterThan: Int

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: Int
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

type PlayerGroupMembership implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  playerId: UUID!
  groupId: UUID!

  """
  Reads a single `Player` that is related to this `PlayerGroupMembership`.
  """
  player: Player

  """
  Reads a single `Group` that is related to this `PlayerGroupMembership`.
  """
  group: Group
}

"""Methods to use when ordering `PlayerGroupMembership`."""
enum PlayerGroupMembershipsOrderBy {
  NATURAL
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PlayerGroupMembership` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input PlayerGroupMembershipCondition {
  """Checks for equality with the object’s `playerId` field."""
  playerId: UUID

  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID
}

"""
A filter to be used against `PlayerGroupMembership` object types. All fields are combined with a logical ‘and.’
"""
input PlayerGroupMembershipFilter {
  """Filter by the object’s `playerId` field."""
  playerId: UUIDFilter

  """Filter by the object’s `groupId` field."""
  groupId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [PlayerGroupMembershipFilter!]

  """Checks for any expressions in this list."""
  or: [PlayerGroupMembershipFilter!]

  """Negates the expression."""
  not: PlayerGroupMembershipFilter
}

type CareerBattingStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  groupId: UUID!
  playerId: UUID!
  seasons: Int
  games: Int
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!
  avg: Float!
  obp: Float!
  slg: Float!
  ops: Float!

  """Reads a single `Group` that is related to this `CareerBattingStat`."""
  group: Group

  """Reads a single `Player` that is related to this `CareerBattingStat`."""
  player: Player
}

"""Methods to use when ordering `CareerBattingStat`."""
enum CareerBattingStatsOrderBy {
  NATURAL
  GROUP_ID_ASC
  GROUP_ID_DESC
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  SEASONS_ASC
  SEASONS_DESC
  GAMES_ASC
  GAMES_DESC
  PLATE_APPEARANCES_ASC
  PLATE_APPEARANCES_DESC
  AT_BATS_ASC
  AT_BATS_DESC
  HITS_ASC
  HITS_DESC
  SINGLES_ASC
  SINGLES_DESC
  DOUBLES_ASC
  DOUBLES_DESC
  TRIPLES_ASC
  TRIPLES_DESC
  HOMERUNS_ASC
  HOMERUNS_DESC
  WALKS_ASC
  WALKS_DESC
  STRIKEOUTS_ASC
  STRIKEOUTS_DESC
  SAC_FLIES_ASC
  SAC_FLIES_DESC
  GIDP_ASC
  GIDP_DESC
  RUNS_ASC
  RUNS_DESC
  RBI_ASC
  RBI_DESC
  STOLEN_BASES_ASC
  STOLEN_BASES_DESC
  AVG_ASC
  AVG_DESC
  OBP_ASC
  OBP_DESC
  SLG_ASC
  SLG_DESC
  OPS_ASC
  OPS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CareerBattingStat` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CareerBattingStatCondition {
  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID

  """Checks for equality with the object’s `playerId` field."""
  playerId: UUID

  """Checks for equality with the object’s `seasons` field."""
  seasons: Int

  """Checks for equality with the object’s `games` field."""
  games: Int

  """Checks for equality with the object’s `plateAppearances` field."""
  plateAppearances: Int

  """Checks for equality with the object’s `atBats` field."""
  atBats: Int

  """Checks for equality with the object’s `hits` field."""
  hits: Int

  """Checks for equality with the object’s `singles` field."""
  singles: Int

  """Checks for equality with the object’s `doubles` field."""
  doubles: Int

  """Checks for equality with the object’s `triples` field."""
  triples: Int

  """Checks for equality with the object’s `homeruns` field."""
  homeruns: Int

  """Checks for equality with the object’s `walks` field."""
  walks: Int

  """Checks for equality with the object’s `strikeouts` field."""
  strikeouts: Int

  """Checks for equality with the object’s `sacFlies` field."""
  sacFlies: Int

  """Checks for equality with the object’s `gidp` field."""
  gidp: Int

  """Checks for equality with the object’s `runs` field."""
  runs: Int

  """Checks for equality with the object’s `rbi` field."""
  rbi: Int

  """Checks for equality with the object’s `stolenBases` field."""
  stolenBases: Int

  """Checks for equality with the object’s `avg` field."""
  avg: Float

  """Checks for equality with the object’s `obp` field."""
  obp: Float

  """Checks for equality with the object’s `slg` field."""
  slg: Float

  """Checks for equality with the object’s `ops` field."""
  ops: Float
}

"""
A filter to be used against `CareerBattingStat` object types. All fields are combined with a logical ‘and.’
"""
input CareerBattingStatFilter {
  """Filter by the object’s `groupId` field."""
  groupId: UUIDFilter

  """Filter by the object’s `playerId` field."""
  playerId: UUIDFilter

  """Filter by the object’s `seasons` field."""
  seasons: IntFilter

  """Filter by the object’s `games` field."""
  games: IntFilter

  """Filter by the object’s `plateAppearances` field."""
  plateAppearances: IntFilter

  """Filter by the object’s `atBats` field."""
  atBats: IntFilter

  """Filter by the object’s `hits` field."""
  hits: IntFilter

  """Filter by the object’s `singles` field."""
  singles: IntFilter

  """Filter by the object’s `doubles` field."""
  doubles: IntFilter

  """Filter by the object’s `triples` field."""
  triples: IntFilter

  """Filter by the object’s `homeruns` field."""
  homeruns: IntFilter

  """Filter by the object’s `walks` field."""
  walks: IntFilter

  """Filter by the object’s `strikeouts` field."""
  strikeouts: IntFilter

  """Filter by the object’s `sacFlies` field."""
  sacFlies: IntFilter

  """Filter by the object’s `gidp` field."""
  gidp: IntFilter

  """Filter by the object’s `runs` field."""
  runs: IntFilter

  """Filter by the object’s `rbi` field."""
  rbi: IntFilter

  """Filter by the object’s `stolenBases` field."""
  stolenBases: IntFilter

  """Filter by the object’s `avg` field."""
  avg: FloatFilter

  """Filter by the object’s `obp` field."""
  obp: FloatFilter

  """Filter by the object’s `slg` field."""
  slg: FloatFilter

  """Filter by the object’s `ops` field."""
  ops: FloatFilter

  """Checks for all expressions in this list."""
  and: [CareerBattingStatFilter!]

  """Checks for any expressions in this list."""
  or: [CareerBattingStatFilter!]

  """Negates the expression."""
  not: CareerBattingStatFilter
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

type SeasonBattingStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  groupId: UUID!
  playerId: UUID!
  season: Int
  games: Int
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!
  avg: Float!
  obp: Float!
  slg: Float!
  ops: Float!

  """Reads a single `Group` that is related to this `SeasonBattingStat`."""
  group: Group

  """Reads a single `Player` that is related to this `SeasonBattingStat`."""
  player: Player
  qualified: Boolean
}

"""Methods to use when ordering `SeasonBattingStat`."""
enum SeasonBattingStatsOrderBy {
  NATURAL
  GROUP_ID_ASC
  GROUP_ID_DESC
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  SEASON_ASC
  SEASON_DESC
  GAMES_ASC
  GAMES_DESC
  PLATE_APPEARANCES_ASC
  PLATE_APPEARANCES_DESC
  AT_BATS_ASC
  AT_BATS_DESC
  HITS_ASC
  HITS_DESC
  SINGLES_ASC
  SINGLES_DESC
  DOUBLES_ASC
  DOUBLES_DESC
  TRIPLES_ASC
  TRIPLES_DESC
  HOMERUNS_ASC
  HOMERUNS_DESC
  WALKS_ASC
  WALKS_DESC
  STRIKEOUTS_ASC
  STRIKEOUTS_DESC
  SAC_FLIES_ASC
  SAC_FLIES_DESC
  GIDP_ASC
  GIDP_DESC
  RUNS_ASC
  RUNS_DESC
  RBI_ASC
  RBI_DESC
  STOLEN_BASES_ASC
  STOLEN_BASES_DESC
  AVG_ASC
  AVG_DESC
  OBP_ASC
  OBP_DESC
  SLG_ASC
  SLG_DESC
  OPS_ASC
  OPS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SeasonBattingStat` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SeasonBattingStatCondition {
  """Checks for equality with the object’s `groupId` field."""
  groupId: UUID

  """Checks for equality with the object’s `playerId` field."""
  playerId: UUID

  """Checks for equality with the object’s `season` field."""
  season: Int

  """Checks for equality with the object’s `games` field."""
  games: Int

  """Checks for equality with the object’s `plateAppearances` field."""
  plateAppearances: Int

  """Checks for equality with the object’s `atBats` field."""
  atBats: Int

  """Checks for equality with the object’s `hits` field."""
  hits: Int

  """Checks for equality with the object’s `singles` field."""
  singles: Int

  """Checks for equality with the object’s `doubles` field."""
  doubles: Int

  """Checks for equality with the object’s `triples` field."""
  triples: Int

  """Checks for equality with the object’s `homeruns` field."""
  homeruns: Int

  """Checks for equality with the object’s `walks` field."""
  walks: Int

  """Checks for equality with the object’s `strikeouts` field."""
  strikeouts: Int

  """Checks for equality with the object’s `sacFlies` field."""
  sacFlies: Int

  """Checks for equality with the object’s `gidp` field."""
  gidp: Int

  """Checks for equality with the object’s `runs` field."""
  runs: Int

  """Checks for equality with the object’s `rbi` field."""
  rbi: Int

  """Checks for equality with the object’s `stolenBases` field."""
  stolenBases: Int

  """Checks for equality with the object’s `avg` field."""
  avg: Float

  """Checks for equality with the object’s `obp` field."""
  obp: Float

  """Checks for equality with the object’s `slg` field."""
  slg: Float

  """Checks for equality with the object’s `ops` field."""
  ops: Float
}

"""
A filter to be used against `SeasonBattingStat` object types. All fields are combined with a logical ‘and.’
"""
input SeasonBattingStatFilter {
  """Filter by the object’s `groupId` field."""
  groupId: UUIDFilter

  """Filter by the object’s `playerId` field."""
  playerId: UUIDFilter

  """Filter by the object’s `season` field."""
  season: IntFilter

  """Filter by the object’s `games` field."""
  games: IntFilter

  """Filter by the object’s `plateAppearances` field."""
  plateAppearances: IntFilter

  """Filter by the object’s `atBats` field."""
  atBats: IntFilter

  """Filter by the object’s `hits` field."""
  hits: IntFilter

  """Filter by the object’s `singles` field."""
  singles: IntFilter

  """Filter by the object’s `doubles` field."""
  doubles: IntFilter

  """Filter by the object’s `triples` field."""
  triples: IntFilter

  """Filter by the object’s `homeruns` field."""
  homeruns: IntFilter

  """Filter by the object’s `walks` field."""
  walks: IntFilter

  """Filter by the object’s `strikeouts` field."""
  strikeouts: IntFilter

  """Filter by the object’s `sacFlies` field."""
  sacFlies: IntFilter

  """Filter by the object’s `gidp` field."""
  gidp: IntFilter

  """Filter by the object’s `runs` field."""
  runs: IntFilter

  """Filter by the object’s `rbi` field."""
  rbi: IntFilter

  """Filter by the object’s `stolenBases` field."""
  stolenBases: IntFilter

  """Filter by the object’s `avg` field."""
  avg: FloatFilter

  """Filter by the object’s `obp` field."""
  obp: FloatFilter

  """Filter by the object’s `slg` field."""
  slg: FloatFilter

  """Filter by the object’s `ops` field."""
  ops: FloatFilter

  """Filter by the object’s `qualified` field."""
  qualified: BooleanFilter

  """Checks for all expressions in this list."""
  and: [SeasonBattingStatFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonBattingStatFilter!]

  """Negates the expression."""
  not: SeasonBattingStatFilter
}

"""
A filter to be used against `Player` object types. All fields are combined with a logical ‘and.’
"""
input PlayerFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `legacyPlayerId` field."""
  legacyPlayerId: IntFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Filter by the object’s `nickname` field."""
  nickname: StringFilter

  """Filter by the object’s `imageUrl` field."""
  imageUrl: StringFilter

  """Filter by the object’s `timeCreated` field."""
  timeCreated: DatetimeFilter

  """Filter by the object’s `claimed` field."""
  claimed: BooleanFilter

  """Filter by the object’s `timeUpdated` field."""
  timeUpdated: DatetimeFilter

  """Filter by the object’s `timeClaimed` field."""
  timeClaimed: DatetimeFilter

  """Filter by the object’s `active` field."""
  active: BooleanFilter

  """Filter by the object’s `fullName` field."""
  fullName: StringFilter

  """Filter by the object’s `gamesPlayed` field."""
  gamesPlayed: IntFilter

  """Filter by the object’s `gamesPlayedThisYear` field."""
  gamesPlayedThisYear: IntFilter

  """Checks for all expressions in this list."""
  and: [PlayerFilter!]

  """Checks for any expressions in this list."""
  or: [PlayerFilter!]

  """Negates the expression."""
  not: PlayerFilter
}

type Field implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  notes: String
  address: String!

  """Reads and enables pagination through a set of `Game`."""
  games(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameFilter
  ): [Game!]!
}

"""Methods to use when ordering `Team`."""
enum TeamsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  ROLE_ASC
  ROLE_DESC
  NAME_ASC
  NAME_DESC
  CAPTAIN_ID_ASC
  CAPTAIN_ID_DESC
  WINNER_ASC
  WINNER_DESC
  SOLO_MODE_OPPONENT_ASC
  SOLO_MODE_OPPONENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Team` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TeamCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID

  """Checks for equality with the object’s `role` field."""
  role: TeamRole

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `captainId` field."""
  captainId: UUID

  """Checks for equality with the object’s `winner` field."""
  winner: Boolean

  """Checks for equality with the object’s `soloModeOpponent` field."""
  soloModeOpponent: Boolean
}

"""
A filter to be used against `Team` object types. All fields are combined with a logical ‘and.’
"""
input TeamFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Filter by the object’s `role` field."""
  role: TeamRoleFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `captainId` field."""
  captainId: UUIDFilter

  """Filter by the object’s `winner` field."""
  winner: BooleanFilter

  """Filter by the object’s `soloModeOpponent` field."""
  soloModeOpponent: BooleanFilter

  """Checks for all expressions in this list."""
  and: [TeamFilter!]

  """Checks for any expressions in this list."""
  or: [TeamFilter!]

  """Negates the expression."""
  not: TeamFilter
}

"""
A filter to be used against TeamRole fields. All fields are combined with a logical ‘and.’
"""
input TeamRoleFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: TeamRole

  """Not equal to the specified value."""
  notEqualTo: TeamRole

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: TeamRole

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: TeamRole

  """Included in the specified list."""
  in: [TeamRole!]

  """Not included in the specified list."""
  notIn: [TeamRole!]

  """Less than the specified value."""
  lessThan: TeamRole

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: TeamRole

  """Greater than the specified value."""
  greaterThan: TeamRole

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: TeamRole
}

type Lineup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  teamId: UUID!
  gameId: UUID!

  """Reads a single `Team` that is related to this `Lineup`."""
  team: Team

  """Reads a single `Game` that is related to this `Lineup`."""
  game: Game

  """Reads and enables pagination through a set of `LineupSpot`."""
  lineupSpots(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LineupSpot`."""
    orderBy: [LineupSpotsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupSpotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupSpotFilter
  ): [LineupSpot!]!

  """Reads and enables pagination through a set of `LineupChange`."""
  lineupChangesByLineupBeforeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LineupChange`."""
    orderBy: [LineupChangesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupChangeFilter
  ): [LineupChange!]!

  """Reads and enables pagination through a set of `LineupChange`."""
  lineupChangesByLineupAfterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LineupChange`."""
    orderBy: [LineupChangesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupChangeFilter
  ): [LineupChange!]!

  """Reads and enables pagination through a set of `LineupForGameState`."""
  lineupForGameStates(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LineupForGameState`."""
    orderBy: [LineupForGameStatesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupForGameStateCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupForGameStateFilter
  ): [LineupForGameState!]!
}

type LineupSpot implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  lineupId: UUID!
  playerId: UUID!
  battingOrder: Int!
  position: FieldingPosition
  gameId: UUID!

  """Reads a single `Lineup` that is related to this `LineupSpot`."""
  lineup: Lineup

  """Reads a single `Player` that is related to this `LineupSpot`."""
  player: Player

  """Reads a single `Game` that is related to this `LineupSpot`."""
  game: Game
}

enum FieldingPosition {
  PITCHER
  CATCHER
  FIRST_BASE
  SECOND_BASE
  THIRD_BASE
  SHORTSTOP
  LEFT_FIELD
  CENTER_FIELD
  LEFT_CENTER
  RIGHT_CENTER
  RIGHT_FIELD
  MIDDLE_INFIELD
}

"""Methods to use when ordering `LineupSpot`."""
enum LineupSpotsOrderBy {
  NATURAL
  LINEUP_ID_ASC
  LINEUP_ID_DESC
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  BATTING_ORDER_ASC
  BATTING_ORDER_DESC
  POSITION_ASC
  POSITION_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LineupSpot` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LineupSpotCondition {
  """Checks for equality with the object’s `lineupId` field."""
  lineupId: UUID

  """Checks for equality with the object’s `playerId` field."""
  playerId: UUID

  """Checks for equality with the object’s `battingOrder` field."""
  battingOrder: Int

  """Checks for equality with the object’s `position` field."""
  position: FieldingPosition

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID
}

"""
A filter to be used against `LineupSpot` object types. All fields are combined with a logical ‘and.’
"""
input LineupSpotFilter {
  """Filter by the object’s `lineupId` field."""
  lineupId: UUIDFilter

  """Filter by the object’s `playerId` field."""
  playerId: UUIDFilter

  """Filter by the object’s `battingOrder` field."""
  battingOrder: IntFilter

  """Filter by the object’s `position` field."""
  position: FieldingPositionFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [LineupSpotFilter!]

  """Checks for any expressions in this list."""
  or: [LineupSpotFilter!]

  """Negates the expression."""
  not: LineupSpotFilter
}

"""
A filter to be used against FieldingPosition fields. All fields are combined with a logical ‘and.’
"""
input FieldingPositionFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: FieldingPosition

  """Not equal to the specified value."""
  notEqualTo: FieldingPosition

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: FieldingPosition

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: FieldingPosition

  """Included in the specified list."""
  in: [FieldingPosition!]

  """Not included in the specified list."""
  notIn: [FieldingPosition!]

  """Less than the specified value."""
  lessThan: FieldingPosition

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: FieldingPosition

  """Greater than the specified value."""
  greaterThan: FieldingPosition

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: FieldingPosition
}

type LineupChange implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  lineupBeforeId: UUID!
  lineupAfterId: UUID!
  gameId: UUID!

  """Reads a single `Lineup` that is related to this `LineupChange`."""
  lineupBefore: Lineup

  """Reads a single `Lineup` that is related to this `LineupChange`."""
  lineupAfter: Lineup

  """Reads a single `Game` that is related to this `LineupChange`."""
  game: Game
}

"""Methods to use when ordering `LineupChange`."""
enum LineupChangesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  LINEUP_BEFORE_ID_ASC
  LINEUP_BEFORE_ID_DESC
  LINEUP_AFTER_ID_ASC
  LINEUP_AFTER_ID_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LineupChange` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LineupChangeCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `lineupBeforeId` field."""
  lineupBeforeId: UUID

  """Checks for equality with the object’s `lineupAfterId` field."""
  lineupAfterId: UUID

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID
}

"""
A filter to be used against `LineupChange` object types. All fields are combined with a logical ‘and.’
"""
input LineupChangeFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `lineupBeforeId` field."""
  lineupBeforeId: UUIDFilter

  """Filter by the object’s `lineupAfterId` field."""
  lineupAfterId: UUIDFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [LineupChangeFilter!]

  """Checks for any expressions in this list."""
  or: [LineupChangeFilter!]

  """Negates the expression."""
  not: LineupChangeFilter
}

type LineupForGameState implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameStateId: UUID!
  lineupId: UUID!
  gameId: UUID!

  """
  Reads a single `GameState` that is related to this `LineupForGameState`.
  """
  gameState: GameState

  """Reads a single `Lineup` that is related to this `LineupForGameState`."""
  lineup: Lineup

  """Reads a single `Game` that is related to this `LineupForGameState`."""
  game: Game
}

type GameState implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  gameId: UUID!
  gameStateIndex: Int!
  playerAtBat: UUID!
  inning: Int!
  halfInning: HalfInning!
  outs: Int!
  score: [Int]!

  """Reads a single `Game` that is related to this `GameState`."""
  game: Game

  """Reads a single `Player` that is related to this `GameState`."""
  playerByPlayerAtBat: Player

  """Reads and enables pagination through a set of `BaseRunner`."""
  baseRunners(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `BaseRunner`."""
    orderBy: [BaseRunnersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BaseRunnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BaseRunnerFilter
  ): [BaseRunner!]!

  """Reads and enables pagination through a set of `LineupForGameState`."""
  lineupForGameStates(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LineupForGameState`."""
    orderBy: [LineupForGameStatesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LineupForGameStateCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupForGameStateFilter
  ): [LineupForGameState!]!

  """Reads and enables pagination through a set of `GameEventRecord`."""
  gameEventRecordsByGameStateBeforeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameEventRecord`."""
    orderBy: [GameEventRecordsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameEventRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameEventRecordFilter
  ): [GameEventRecord!]!

  """Reads and enables pagination through a set of `GameEventRecord`."""
  gameEventRecordsByGameStateAfterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameEventRecord`."""
    orderBy: [GameEventRecordsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameEventRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameEventRecordFilter
  ): [GameEventRecord!]!

  """Reads and enables pagination through a set of `Lineup`."""
  lineups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LineupFilter
  ): [Lineup]
}

enum HalfInning {
  TOP
  BOTTOM
}

type BaseRunner implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameStateId: UUID!
  runnerId: UUID!
  base: BaseType!
  gameId: UUID!

  """Reads a single `GameState` that is related to this `BaseRunner`."""
  gameState: GameState

  """Reads a single `Player` that is related to this `BaseRunner`."""
  runner: Player

  """Reads a single `Game` that is related to this `BaseRunner`."""
  game: Game
}

enum BaseType {
  FIRST
  SECOND
  THIRD
}

"""Methods to use when ordering `BaseRunner`."""
enum BaseRunnersOrderBy {
  NATURAL
  GAME_STATE_ID_ASC
  GAME_STATE_ID_DESC
  RUNNER_ID_ASC
  RUNNER_ID_DESC
  BASE_ASC
  BASE_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `BaseRunner` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BaseRunnerCondition {
  """Checks for equality with the object’s `gameStateId` field."""
  gameStateId: UUID

  """Checks for equality with the object’s `runnerId` field."""
  runnerId: UUID

  """Checks for equality with the object’s `base` field."""
  base: BaseType

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID
}

"""
A filter to be used against `BaseRunner` object types. All fields are combined with a logical ‘and.’
"""
input BaseRunnerFilter {
  """Filter by the object’s `gameStateId` field."""
  gameStateId: UUIDFilter

  """Filter by the object’s `runnerId` field."""
  runnerId: UUIDFilter

  """Filter by the object’s `base` field."""
  base: BaseTypeFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [BaseRunnerFilter!]

  """Checks for any expressions in this list."""
  or: [BaseRunnerFilter!]

  """Negates the expression."""
  not: BaseRunnerFilter
}

"""
A filter to be used against BaseType fields. All fields are combined with a logical ‘and.’
"""
input BaseTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BaseType

  """Not equal to the specified value."""
  notEqualTo: BaseType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BaseType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BaseType

  """Included in the specified list."""
  in: [BaseType!]

  """Not included in the specified list."""
  notIn: [BaseType!]

  """Less than the specified value."""
  lessThan: BaseType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BaseType

  """Greater than the specified value."""
  greaterThan: BaseType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BaseType
}

"""Methods to use when ordering `LineupForGameState`."""
enum LineupForGameStatesOrderBy {
  NATURAL
  GAME_STATE_ID_ASC
  GAME_STATE_ID_DESC
  LINEUP_ID_ASC
  LINEUP_ID_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LineupForGameState` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LineupForGameStateCondition {
  """Checks for equality with the object’s `gameStateId` field."""
  gameStateId: UUID

  """Checks for equality with the object’s `lineupId` field."""
  lineupId: UUID

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID
}

"""
A filter to be used against `LineupForGameState` object types. All fields are combined with a logical ‘and.’
"""
input LineupForGameStateFilter {
  """Filter by the object’s `gameStateId` field."""
  gameStateId: UUIDFilter

  """Filter by the object’s `lineupId` field."""
  lineupId: UUIDFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [LineupForGameStateFilter!]

  """Checks for any expressions in this list."""
  or: [LineupForGameStateFilter!]

  """Negates the expression."""
  not: LineupForGameStateFilter
}

type GameEventRecord implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  gameId: UUID!
  eventIndex: Int!
  gameStateBeforeId: UUID!
  gameStateAfterId: UUID!
  gameEventId: UUID!
  notes: String

  """Reads a single `Game` that is related to this `GameEventRecord`."""
  game: Game

  """Reads a single `GameState` that is related to this `GameEventRecord`."""
  gameStateBefore: GameState

  """Reads a single `GameState` that is related to this `GameEventRecord`."""
  gameStateAfter: GameState

  """Reads a single `GameEvent` that is related to this `GameEventRecord`."""
  gameEvent: GameEvent

  """Reads and enables pagination through a set of `ScoredRunner`."""
  scoredRunners(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ScoredRunner`."""
    orderBy: [ScoredRunnersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoredRunnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoredRunnerFilter
  ): [ScoredRunner!]!
}

type GameEvent implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  gameId: UUID!
  earlyGameEndId: UUID

  """Reads a single `PlateAppearance` that is related to this `GameEvent`."""
  plateAppearance: PlateAppearance

  """
  Reads a single `StolenBaseAttempt` that is related to this `GameEvent`.
  """
  stolenBaseAttempt: StolenBaseAttempt

  """Reads a single `LineupChange` that is related to this `GameEvent`."""
  lineupChange: LineupChange

  """
  Reads a single `SoloModeOpponentInning` that is related to this `GameEvent`.
  """
  soloModeOpponentInning: SoloModeOpponentInning

  """Reads a single `AtBatSkip` that is related to this `GameEvent`."""
  atBatSkip: AtBatSkip

  """Reads a single `Game` that is related to this `GameEvent`."""
  game: Game

  """Reads a single `EarlyGameEnd` that is related to this `GameEvent`."""
  earlyGameEnd: EarlyGameEnd

  """Reads and enables pagination through a set of `GameEventRecord`."""
  gameEventRecords(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GameEventRecord`."""
    orderBy: [GameEventRecordsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameEventRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameEventRecordFilter
  ): [GameEventRecord!]!
}

type PlateAppearance implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  type: PlateAppearanceType!
  contact: ContactQuality
  fieldedBy: FieldingPosition
  runsScoredOnSacFly: Int
  routinePlay: Boolean!
  gameId: UUID!
  batterId: UUID!

  """Reads a single `Game` that is related to this `PlateAppearance`."""
  game: Game

  """Reads a single `Player` that is related to this `PlateAppearance`."""
  batter: Player

  """Reads and enables pagination through a set of `BasepathMovement`."""
  basepathMovements(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `BasepathMovement`."""
    orderBy: [BasepathMovementsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasepathMovementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BasepathMovementFilter
  ): [BasepathMovement!]!

  """Reads and enables pagination through a set of `OutOnPlayRunner`."""
  outOnPlayRunners(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `OutOnPlayRunner`."""
    orderBy: [OutOnPlayRunnersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OutOnPlayRunnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OutOnPlayRunnerFilter
  ): [OutOnPlayRunner!]!
}

enum PlateAppearanceType {
  OUT
  WALK
  SINGLE
  DOUBLE
  TRIPLE
  HOMERUN
  SACRIFICE_FLY
  FIELDERS_CHOICE
  DOUBLE_PLAY
}

enum ContactQuality {
  NONE
  GROUNDER
  LINE_DRIVE
  POPUP
  LAZY_FLY
  LONG_FLY
  FOUL
  DEAD_BALL
  INNING_ENDING_DEAD_BALL
}

type BasepathMovement implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  plateAppearanceId: UUID!
  runnerId: UUID!
  endBase: BaseType
  wasSafe: Boolean!
  gameId: UUID!

  """
  Reads a single `PlateAppearance` that is related to this `BasepathMovement`.
  """
  plateAppearance: PlateAppearance

  """Reads a single `Player` that is related to this `BasepathMovement`."""
  runner: Player

  """Reads a single `Game` that is related to this `BasepathMovement`."""
  game: Game
}

"""Methods to use when ordering `BasepathMovement`."""
enum BasepathMovementsOrderBy {
  NATURAL
  PLATE_APPEARANCE_ID_ASC
  PLATE_APPEARANCE_ID_DESC
  RUNNER_ID_ASC
  RUNNER_ID_DESC
  END_BASE_ASC
  END_BASE_DESC
  WAS_SAFE_ASC
  WAS_SAFE_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `BasepathMovement` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input BasepathMovementCondition {
  """Checks for equality with the object’s `plateAppearanceId` field."""
  plateAppearanceId: UUID

  """Checks for equality with the object’s `runnerId` field."""
  runnerId: UUID

  """Checks for equality with the object’s `endBase` field."""
  endBase: BaseType

  """Checks for equality with the object’s `wasSafe` field."""
  wasSafe: Boolean

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID
}

"""
A filter to be used against `BasepathMovement` object types. All fields are combined with a logical ‘and.’
"""
input BasepathMovementFilter {
  """Filter by the object’s `plateAppearanceId` field."""
  plateAppearanceId: UUIDFilter

  """Filter by the object’s `runnerId` field."""
  runnerId: UUIDFilter

  """Filter by the object’s `endBase` field."""
  endBase: BaseTypeFilter

  """Filter by the object’s `wasSafe` field."""
  wasSafe: BooleanFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [BasepathMovementFilter!]

  """Checks for any expressions in this list."""
  or: [BasepathMovementFilter!]

  """Negates the expression."""
  not: BasepathMovementFilter
}

type OutOnPlayRunner implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  plateAppearanceId: UUID!
  runnerId: UUID!
  gameId: UUID!

  """
  Reads a single `PlateAppearance` that is related to this `OutOnPlayRunner`.
  """
  plateAppearance: PlateAppearance

  """Reads a single `Player` that is related to this `OutOnPlayRunner`."""
  runner: Player

  """Reads a single `Game` that is related to this `OutOnPlayRunner`."""
  game: Game
}

"""Methods to use when ordering `OutOnPlayRunner`."""
enum OutOnPlayRunnersOrderBy {
  NATURAL
  PLATE_APPEARANCE_ID_ASC
  PLATE_APPEARANCE_ID_DESC
  RUNNER_ID_ASC
  RUNNER_ID_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `OutOnPlayRunner` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OutOnPlayRunnerCondition {
  """Checks for equality with the object’s `plateAppearanceId` field."""
  plateAppearanceId: UUID

  """Checks for equality with the object’s `runnerId` field."""
  runnerId: UUID

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID
}

"""
A filter to be used against `OutOnPlayRunner` object types. All fields are combined with a logical ‘and.’
"""
input OutOnPlayRunnerFilter {
  """Filter by the object’s `plateAppearanceId` field."""
  plateAppearanceId: UUIDFilter

  """Filter by the object’s `runnerId` field."""
  runnerId: UUIDFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [OutOnPlayRunnerFilter!]

  """Checks for any expressions in this list."""
  or: [OutOnPlayRunnerFilter!]

  """Negates the expression."""
  not: OutOnPlayRunnerFilter
}

type StolenBaseAttempt implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  runnerId: UUID!
  success: Boolean!
  gameId: UUID!

  """Reads a single `Player` that is related to this `StolenBaseAttempt`."""
  runner: Player

  """Reads a single `Game` that is related to this `StolenBaseAttempt`."""
  game: Game
}

type SoloModeOpponentInning implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  runsScored: Int!
  gameId: UUID!

  """
  Reads a single `Game` that is related to this `SoloModeOpponentInning`.
  """
  game: Game
}

type EarlyGameEnd implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  reason: EarlyGameEndReason!
  gameId: UUID!

  """Reads a single `Game` that is related to this `EarlyGameEnd`."""
  game: Game
}

enum EarlyGameEndReason {
  MERCY_RULE
  TIME_EXPIRED
  OTHER
}

"""Methods to use when ordering `GameEventRecord`."""
enum GameEventRecordsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  EVENT_INDEX_ASC
  EVENT_INDEX_DESC
  GAME_STATE_BEFORE_ID_ASC
  GAME_STATE_BEFORE_ID_DESC
  GAME_STATE_AFTER_ID_ASC
  GAME_STATE_AFTER_ID_DESC
  GAME_EVENT_ID_ASC
  GAME_EVENT_ID_DESC
  NOTES_ASC
  NOTES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GameEventRecord` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GameEventRecordCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID

  """Checks for equality with the object’s `eventIndex` field."""
  eventIndex: Int

  """Checks for equality with the object’s `gameStateBeforeId` field."""
  gameStateBeforeId: UUID

  """Checks for equality with the object’s `gameStateAfterId` field."""
  gameStateAfterId: UUID

  """Checks for equality with the object’s `gameEventId` field."""
  gameEventId: UUID

  """Checks for equality with the object’s `notes` field."""
  notes: String
}

"""
A filter to be used against `GameEventRecord` object types. All fields are combined with a logical ‘and.’
"""
input GameEventRecordFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Filter by the object’s `eventIndex` field."""
  eventIndex: IntFilter

  """Filter by the object’s `gameStateBeforeId` field."""
  gameStateBeforeId: UUIDFilter

  """Filter by the object’s `gameStateAfterId` field."""
  gameStateAfterId: UUIDFilter

  """Filter by the object’s `gameEventId` field."""
  gameEventId: UUIDFilter

  """Filter by the object’s `notes` field."""
  notes: StringFilter

  """Checks for all expressions in this list."""
  and: [GameEventRecordFilter!]

  """Checks for any expressions in this list."""
  or: [GameEventRecordFilter!]

  """Negates the expression."""
  not: GameEventRecordFilter
}

type ScoredRunner implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameEventRecordId: UUID!
  runnerId: UUID!
  battedIn: Boolean!
  gameId: UUID!

  """
  Reads a single `GameEventRecord` that is related to this `ScoredRunner`.
  """
  gameEventRecord: GameEventRecord

  """Reads a single `Player` that is related to this `ScoredRunner`."""
  runner: Player

  """Reads a single `Game` that is related to this `ScoredRunner`."""
  game: Game
}

"""Methods to use when ordering `ScoredRunner`."""
enum ScoredRunnersOrderBy {
  NATURAL
  GAME_EVENT_RECORD_ID_ASC
  GAME_EVENT_RECORD_ID_DESC
  RUNNER_ID_ASC
  RUNNER_ID_DESC
  BATTED_IN_ASC
  BATTED_IN_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ScoredRunner` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ScoredRunnerCondition {
  """Checks for equality with the object’s `gameEventRecordId` field."""
  gameEventRecordId: UUID

  """Checks for equality with the object’s `runnerId` field."""
  runnerId: UUID

  """Checks for equality with the object’s `battedIn` field."""
  battedIn: Boolean

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID
}

"""
A filter to be used against `ScoredRunner` object types. All fields are combined with a logical ‘and.’
"""
input ScoredRunnerFilter {
  """Filter by the object’s `gameEventRecordId` field."""
  gameEventRecordId: UUIDFilter

  """Filter by the object’s `runnerId` field."""
  runnerId: UUIDFilter

  """Filter by the object’s `battedIn` field."""
  battedIn: BooleanFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [ScoredRunnerFilter!]

  """Checks for any expressions in this list."""
  or: [ScoredRunnerFilter!]

  """Negates the expression."""
  not: ScoredRunnerFilter
}

"""
A filter to be used against `Lineup` object types. All fields are combined with a logical ‘and.’
"""
input LineupFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `teamId` field."""
  teamId: UUIDFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [LineupFilter!]

  """Checks for any expressions in this list."""
  or: [LineupFilter!]

  """Negates the expression."""
  not: LineupFilter
}

"""Methods to use when ordering `Lineup`."""
enum LineupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Lineup` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LineupCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `teamId` field."""
  teamId: UUID

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID
}

"""Methods to use when ordering `PlateAppearance`."""
enum PlateAppearancesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TYPE_ASC
  TYPE_DESC
  CONTACT_ASC
  CONTACT_DESC
  FIELDED_BY_ASC
  FIELDED_BY_DESC
  RUNS_SCORED_ON_SAC_FLY_ASC
  RUNS_SCORED_ON_SAC_FLY_DESC
  ROUTINE_PLAY_ASC
  ROUTINE_PLAY_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  BATTER_ID_ASC
  BATTER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PlateAppearance` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PlateAppearanceCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `type` field."""
  type: PlateAppearanceType

  """Checks for equality with the object’s `contact` field."""
  contact: ContactQuality

  """Checks for equality with the object’s `fieldedBy` field."""
  fieldedBy: FieldingPosition

  """Checks for equality with the object’s `runsScoredOnSacFly` field."""
  runsScoredOnSacFly: Int

  """Checks for equality with the object’s `routinePlay` field."""
  routinePlay: Boolean

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID

  """Checks for equality with the object’s `batterId` field."""
  batterId: UUID
}

"""
A filter to be used against `PlateAppearance` object types. All fields are combined with a logical ‘and.’
"""
input PlateAppearanceFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `type` field."""
  type: PlateAppearanceTypeFilter

  """Filter by the object’s `contact` field."""
  contact: ContactQualityFilter

  """Filter by the object’s `fieldedBy` field."""
  fieldedBy: FieldingPositionFilter

  """Filter by the object’s `runsScoredOnSacFly` field."""
  runsScoredOnSacFly: IntFilter

  """Filter by the object’s `routinePlay` field."""
  routinePlay: BooleanFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Filter by the object’s `batterId` field."""
  batterId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [PlateAppearanceFilter!]

  """Checks for any expressions in this list."""
  or: [PlateAppearanceFilter!]

  """Negates the expression."""
  not: PlateAppearanceFilter
}

"""
A filter to be used against PlateAppearanceType fields. All fields are combined with a logical ‘and.’
"""
input PlateAppearanceTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: PlateAppearanceType

  """Not equal to the specified value."""
  notEqualTo: PlateAppearanceType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: PlateAppearanceType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: PlateAppearanceType

  """Included in the specified list."""
  in: [PlateAppearanceType!]

  """Not included in the specified list."""
  notIn: [PlateAppearanceType!]

  """Less than the specified value."""
  lessThan: PlateAppearanceType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: PlateAppearanceType

  """Greater than the specified value."""
  greaterThan: PlateAppearanceType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: PlateAppearanceType
}

"""
A filter to be used against ContactQuality fields. All fields are combined with a logical ‘and.’
"""
input ContactQualityFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: ContactQuality

  """Not equal to the specified value."""
  notEqualTo: ContactQuality

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: ContactQuality

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: ContactQuality

  """Included in the specified list."""
  in: [ContactQuality!]

  """Not included in the specified list."""
  notIn: [ContactQuality!]

  """Less than the specified value."""
  lessThan: ContactQuality

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: ContactQuality

  """Greater than the specified value."""
  greaterThan: ContactQuality

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: ContactQuality
}

"""Methods to use when ordering `StolenBaseAttempt`."""
enum StolenBaseAttemptsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  RUNNER_ID_ASC
  RUNNER_ID_DESC
  SUCCESS_ASC
  SUCCESS_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StolenBaseAttempt` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input StolenBaseAttemptCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `runnerId` field."""
  runnerId: UUID

  """Checks for equality with the object’s `success` field."""
  success: Boolean

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID
}

"""
A filter to be used against `StolenBaseAttempt` object types. All fields are combined with a logical ‘and.’
"""
input StolenBaseAttemptFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `runnerId` field."""
  runnerId: UUIDFilter

  """Filter by the object’s `success` field."""
  success: BooleanFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [StolenBaseAttemptFilter!]

  """Checks for any expressions in this list."""
  or: [StolenBaseAttemptFilter!]

  """Negates the expression."""
  not: StolenBaseAttemptFilter
}

"""Methods to use when ordering `GameState`."""
enum GameStatesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  GAME_STATE_INDEX_ASC
  GAME_STATE_INDEX_DESC
  PLAYER_AT_BAT_ASC
  PLAYER_AT_BAT_DESC
  INNING_ASC
  INNING_DESC
  HALF_INNING_ASC
  HALF_INNING_DESC
  OUTS_ASC
  OUTS_DESC
  SCORE_ASC
  SCORE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GameState` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GameStateCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID

  """Checks for equality with the object’s `gameStateIndex` field."""
  gameStateIndex: Int

  """Checks for equality with the object’s `playerAtBat` field."""
  playerAtBat: UUID

  """Checks for equality with the object’s `inning` field."""
  inning: Int

  """Checks for equality with the object’s `halfInning` field."""
  halfInning: HalfInning

  """Checks for equality with the object’s `outs` field."""
  outs: Int

  """Checks for equality with the object’s `score` field."""
  score: [Int]
}

"""
A filter to be used against `GameState` object types. All fields are combined with a logical ‘and.’
"""
input GameStateFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Filter by the object’s `gameStateIndex` field."""
  gameStateIndex: IntFilter

  """Filter by the object’s `playerAtBat` field."""
  playerAtBat: UUIDFilter

  """Filter by the object’s `inning` field."""
  inning: IntFilter

  """Filter by the object’s `halfInning` field."""
  halfInning: HalfInningFilter

  """Filter by the object’s `outs` field."""
  outs: IntFilter

  """Filter by the object’s `score` field."""
  score: IntListFilter

  """Checks for all expressions in this list."""
  and: [GameStateFilter!]

  """Checks for any expressions in this list."""
  or: [GameStateFilter!]

  """Negates the expression."""
  not: GameStateFilter
}

"""
A filter to be used against HalfInning fields. All fields are combined with a logical ‘and.’
"""
input HalfInningFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: HalfInning

  """Not equal to the specified value."""
  notEqualTo: HalfInning

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: HalfInning

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: HalfInning

  """Included in the specified list."""
  in: [HalfInning!]

  """Not included in the specified list."""
  notIn: [HalfInning!]

  """Less than the specified value."""
  lessThan: HalfInning

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: HalfInning

  """Greater than the specified value."""
  greaterThan: HalfInning

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: HalfInning
}

"""Methods to use when ordering `SoloModeOpponentInning`."""
enum SoloModeOpponentInningsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  RUNS_SCORED_ASC
  RUNS_SCORED_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SoloModeOpponentInning` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SoloModeOpponentInningCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `runsScored` field."""
  runsScored: Int

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID
}

"""
A filter to be used against `SoloModeOpponentInning` object types. All fields are combined with a logical ‘and.’
"""
input SoloModeOpponentInningFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `runsScored` field."""
  runsScored: IntFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [SoloModeOpponentInningFilter!]

  """Checks for any expressions in this list."""
  or: [SoloModeOpponentInningFilter!]

  """Negates the expression."""
  not: SoloModeOpponentInningFilter
}

"""Methods to use when ordering `AtBatSkip`."""
enum AtBatSkipsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  BATTER_ID_ASC
  BATTER_ID_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `AtBatSkip` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AtBatSkipCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `batterId` field."""
  batterId: UUID

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID
}

"""
A filter to be used against `AtBatSkip` object types. All fields are combined with a logical ‘and.’
"""
input AtBatSkipFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `batterId` field."""
  batterId: UUIDFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [AtBatSkipFilter!]

  """Checks for any expressions in this list."""
  or: [AtBatSkipFilter!]

  """Negates the expression."""
  not: AtBatSkipFilter
}

"""Methods to use when ordering `EarlyGameEnd`."""
enum EarlyGameEndsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REASON_ASC
  REASON_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EarlyGameEnd` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EarlyGameEndCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `reason` field."""
  reason: EarlyGameEndReason

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID
}

"""
A filter to be used against `EarlyGameEnd` object types. All fields are combined with a logical ‘and.’
"""
input EarlyGameEndFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `reason` field."""
  reason: EarlyGameEndReasonFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [EarlyGameEndFilter!]

  """Checks for any expressions in this list."""
  or: [EarlyGameEndFilter!]

  """Negates the expression."""
  not: EarlyGameEndFilter
}

"""
A filter to be used against EarlyGameEndReason fields. All fields are combined with a logical ‘and.’
"""
input EarlyGameEndReasonFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: EarlyGameEndReason

  """Not equal to the specified value."""
  notEqualTo: EarlyGameEndReason

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: EarlyGameEndReason

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: EarlyGameEndReason

  """Included in the specified list."""
  in: [EarlyGameEndReason!]

  """Not included in the specified list."""
  notIn: [EarlyGameEndReason!]

  """Less than the specified value."""
  lessThan: EarlyGameEndReason

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: EarlyGameEndReason

  """Greater than the specified value."""
  greaterThan: EarlyGameEndReason

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: EarlyGameEndReason
}

type ManualEntryBattingLine implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!

  """
  Reads a single `Game` that is related to this `ManualEntryBattingLine`.
  """
  game: Game

  """
  Reads a single `Team` that is related to this `ManualEntryBattingLine`.
  """
  team: Team

  """
  Reads a single `Player` that is related to this `ManualEntryBattingLine`.
  """
  player: Player
}

"""Methods to use when ordering `ManualEntryBattingLine`."""
enum ManualEntryBattingLinesOrderBy {
  NATURAL
  GAME_ID_ASC
  GAME_ID_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  PLATE_APPEARANCES_ASC
  PLATE_APPEARANCES_DESC
  AT_BATS_ASC
  AT_BATS_DESC
  HITS_ASC
  HITS_DESC
  SINGLES_ASC
  SINGLES_DESC
  DOUBLES_ASC
  DOUBLES_DESC
  TRIPLES_ASC
  TRIPLES_DESC
  HOMERUNS_ASC
  HOMERUNS_DESC
  WALKS_ASC
  WALKS_DESC
  STRIKEOUTS_ASC
  STRIKEOUTS_DESC
  SAC_FLIES_ASC
  SAC_FLIES_DESC
  GIDP_ASC
  GIDP_DESC
  RUNS_ASC
  RUNS_DESC
  RBI_ASC
  RBI_DESC
  STOLEN_BASES_ASC
  STOLEN_BASES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ManualEntryBattingLine` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ManualEntryBattingLineCondition {
  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID

  """Checks for equality with the object’s `teamId` field."""
  teamId: UUID

  """Checks for equality with the object’s `playerId` field."""
  playerId: UUID

  """Checks for equality with the object’s `plateAppearances` field."""
  plateAppearances: Int

  """Checks for equality with the object’s `atBats` field."""
  atBats: Int

  """Checks for equality with the object’s `hits` field."""
  hits: Int

  """Checks for equality with the object’s `singles` field."""
  singles: Int

  """Checks for equality with the object’s `doubles` field."""
  doubles: Int

  """Checks for equality with the object’s `triples` field."""
  triples: Int

  """Checks for equality with the object’s `homeruns` field."""
  homeruns: Int

  """Checks for equality with the object’s `walks` field."""
  walks: Int

  """Checks for equality with the object’s `strikeouts` field."""
  strikeouts: Int

  """Checks for equality with the object’s `sacFlies` field."""
  sacFlies: Int

  """Checks for equality with the object’s `gidp` field."""
  gidp: Int

  """Checks for equality with the object’s `runs` field."""
  runs: Int

  """Checks for equality with the object’s `rbi` field."""
  rbi: Int

  """Checks for equality with the object’s `stolenBases` field."""
  stolenBases: Int
}

"""
A filter to be used against `ManualEntryBattingLine` object types. All fields are combined with a logical ‘and.’
"""
input ManualEntryBattingLineFilter {
  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Filter by the object’s `teamId` field."""
  teamId: UUIDFilter

  """Filter by the object’s `playerId` field."""
  playerId: UUIDFilter

  """Filter by the object’s `plateAppearances` field."""
  plateAppearances: IntFilter

  """Filter by the object’s `atBats` field."""
  atBats: IntFilter

  """Filter by the object’s `hits` field."""
  hits: IntFilter

  """Filter by the object’s `singles` field."""
  singles: IntFilter

  """Filter by the object’s `doubles` field."""
  doubles: IntFilter

  """Filter by the object’s `triples` field."""
  triples: IntFilter

  """Filter by the object’s `homeruns` field."""
  homeruns: IntFilter

  """Filter by the object’s `walks` field."""
  walks: IntFilter

  """Filter by the object’s `strikeouts` field."""
  strikeouts: IntFilter

  """Filter by the object’s `sacFlies` field."""
  sacFlies: IntFilter

  """Filter by the object’s `gidp` field."""
  gidp: IntFilter

  """Filter by the object’s `runs` field."""
  runs: IntFilter

  """Filter by the object’s `rbi` field."""
  rbi: IntFilter

  """Filter by the object’s `stolenBases` field."""
  stolenBases: IntFilter

  """Checks for all expressions in this list."""
  and: [ManualEntryBattingLineFilter!]

  """Checks for any expressions in this list."""
  or: [ManualEntryBattingLineFilter!]

  """Negates the expression."""
  not: ManualEntryBattingLineFilter
}

type ManualEntryPitchingLine implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
  inningsPitched: Int!
  won: Boolean!
  lost: Boolean!
  save: Boolean!
  completeGame: Boolean!
  qualityStart: Boolean!
  runsAllowed: Int!
  strikeouts: Int!
  walks: Int!

  """
  Reads a single `Game` that is related to this `ManualEntryPitchingLine`.
  """
  game: Game

  """
  Reads a single `Team` that is related to this `ManualEntryPitchingLine`.
  """
  team: Team

  """
  Reads a single `Player` that is related to this `ManualEntryPitchingLine`.
  """
  player: Player
}

"""Methods to use when ordering `ManualEntryPitchingLine`."""
enum ManualEntryPitchingLinesOrderBy {
  NATURAL
  GAME_ID_ASC
  GAME_ID_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  INNINGS_PITCHED_ASC
  INNINGS_PITCHED_DESC
  WON_ASC
  WON_DESC
  LOST_ASC
  LOST_DESC
  SAVE_ASC
  SAVE_DESC
  COMPLETE_GAME_ASC
  COMPLETE_GAME_DESC
  QUALITY_START_ASC
  QUALITY_START_DESC
  RUNS_ALLOWED_ASC
  RUNS_ALLOWED_DESC
  STRIKEOUTS_ASC
  STRIKEOUTS_DESC
  WALKS_ASC
  WALKS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ManualEntryPitchingLine` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ManualEntryPitchingLineCondition {
  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID

  """Checks for equality with the object’s `teamId` field."""
  teamId: UUID

  """Checks for equality with the object’s `playerId` field."""
  playerId: UUID

  """Checks for equality with the object’s `inningsPitched` field."""
  inningsPitched: Int

  """Checks for equality with the object’s `won` field."""
  won: Boolean

  """Checks for equality with the object’s `lost` field."""
  lost: Boolean

  """Checks for equality with the object’s `save` field."""
  save: Boolean

  """Checks for equality with the object’s `completeGame` field."""
  completeGame: Boolean

  """Checks for equality with the object’s `qualityStart` field."""
  qualityStart: Boolean

  """Checks for equality with the object’s `runsAllowed` field."""
  runsAllowed: Int

  """Checks for equality with the object’s `strikeouts` field."""
  strikeouts: Int

  """Checks for equality with the object’s `walks` field."""
  walks: Int
}

"""
A filter to be used against `ManualEntryPitchingLine` object types. All fields are combined with a logical ‘and.’
"""
input ManualEntryPitchingLineFilter {
  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Filter by the object’s `teamId` field."""
  teamId: UUIDFilter

  """Filter by the object’s `playerId` field."""
  playerId: UUIDFilter

  """Filter by the object’s `inningsPitched` field."""
  inningsPitched: IntFilter

  """Filter by the object’s `won` field."""
  won: BooleanFilter

  """Filter by the object’s `lost` field."""
  lost: BooleanFilter

  """Filter by the object’s `save` field."""
  save: BooleanFilter

  """Filter by the object’s `completeGame` field."""
  completeGame: BooleanFilter

  """Filter by the object’s `qualityStart` field."""
  qualityStart: BooleanFilter

  """Filter by the object’s `runsAllowed` field."""
  runsAllowed: IntFilter

  """Filter by the object’s `strikeouts` field."""
  strikeouts: IntFilter

  """Filter by the object’s `walks` field."""
  walks: IntFilter

  """Checks for all expressions in this list."""
  and: [ManualEntryPitchingLineFilter!]

  """Checks for any expressions in this list."""
  or: [ManualEntryPitchingLineFilter!]

  """Negates the expression."""
  not: ManualEntryPitchingLineFilter
}

type ManualEntryLineScoreCell implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameId: UUID!
  inning: Int!
  halfInning: HalfInning!
  runs: Int!

  """
  Reads a single `Game` that is related to this `ManualEntryLineScoreCell`.
  """
  game: Game
}

"""Methods to use when ordering `ManualEntryLineScoreCell`."""
enum ManualEntryLineScoreCellsOrderBy {
  NATURAL
  GAME_ID_ASC
  GAME_ID_DESC
  INNING_ASC
  INNING_DESC
  HALF_INNING_ASC
  HALF_INNING_DESC
  RUNS_ASC
  RUNS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ManualEntryLineScoreCell` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ManualEntryLineScoreCellCondition {
  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID

  """Checks for equality with the object’s `inning` field."""
  inning: Int

  """Checks for equality with the object’s `halfInning` field."""
  halfInning: HalfInning

  """Checks for equality with the object’s `runs` field."""
  runs: Int
}

"""
A filter to be used against `ManualEntryLineScoreCell` object types. All fields are combined with a logical ‘and.’
"""
input ManualEntryLineScoreCellFilter {
  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Filter by the object’s `inning` field."""
  inning: IntFilter

  """Filter by the object’s `halfInning` field."""
  halfInning: HalfInningFilter

  """Filter by the object’s `runs` field."""
  runs: IntFilter

  """Checks for all expressions in this list."""
  and: [ManualEntryLineScoreCellFilter!]

  """Checks for any expressions in this list."""
  or: [ManualEntryLineScoreCellFilter!]

  """Negates the expression."""
  not: ManualEntryLineScoreCellFilter
}

type GameBattingStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!

  """Reads a single `Game` that is related to this `GameBattingStat`."""
  game: Game

  """Reads a single `Team` that is related to this `GameBattingStat`."""
  team: Team

  """Reads a single `Player` that is related to this `GameBattingStat`."""
  player: Player
}

"""Methods to use when ordering `GameBattingStat`."""
enum GameBattingStatsOrderBy {
  NATURAL
  GAME_ID_ASC
  GAME_ID_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  PLATE_APPEARANCES_ASC
  PLATE_APPEARANCES_DESC
  AT_BATS_ASC
  AT_BATS_DESC
  HITS_ASC
  HITS_DESC
  SINGLES_ASC
  SINGLES_DESC
  DOUBLES_ASC
  DOUBLES_DESC
  TRIPLES_ASC
  TRIPLES_DESC
  HOMERUNS_ASC
  HOMERUNS_DESC
  WALKS_ASC
  WALKS_DESC
  STRIKEOUTS_ASC
  STRIKEOUTS_DESC
  SAC_FLIES_ASC
  SAC_FLIES_DESC
  GIDP_ASC
  GIDP_DESC
  RUNS_ASC
  RUNS_DESC
  RBI_ASC
  RBI_DESC
  STOLEN_BASES_ASC
  STOLEN_BASES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GameBattingStat` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GameBattingStatCondition {
  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID

  """Checks for equality with the object’s `teamId` field."""
  teamId: UUID

  """Checks for equality with the object’s `playerId` field."""
  playerId: UUID

  """Checks for equality with the object’s `plateAppearances` field."""
  plateAppearances: Int

  """Checks for equality with the object’s `atBats` field."""
  atBats: Int

  """Checks for equality with the object’s `hits` field."""
  hits: Int

  """Checks for equality with the object’s `singles` field."""
  singles: Int

  """Checks for equality with the object’s `doubles` field."""
  doubles: Int

  """Checks for equality with the object’s `triples` field."""
  triples: Int

  """Checks for equality with the object’s `homeruns` field."""
  homeruns: Int

  """Checks for equality with the object’s `walks` field."""
  walks: Int

  """Checks for equality with the object’s `strikeouts` field."""
  strikeouts: Int

  """Checks for equality with the object’s `sacFlies` field."""
  sacFlies: Int

  """Checks for equality with the object’s `gidp` field."""
  gidp: Int

  """Checks for equality with the object’s `runs` field."""
  runs: Int

  """Checks for equality with the object’s `rbi` field."""
  rbi: Int

  """Checks for equality with the object’s `stolenBases` field."""
  stolenBases: Int
}

"""
A filter to be used against `GameBattingStat` object types. All fields are combined with a logical ‘and.’
"""
input GameBattingStatFilter {
  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Filter by the object’s `teamId` field."""
  teamId: UUIDFilter

  """Filter by the object’s `playerId` field."""
  playerId: UUIDFilter

  """Filter by the object’s `plateAppearances` field."""
  plateAppearances: IntFilter

  """Filter by the object’s `atBats` field."""
  atBats: IntFilter

  """Filter by the object’s `hits` field."""
  hits: IntFilter

  """Filter by the object’s `singles` field."""
  singles: IntFilter

  """Filter by the object’s `doubles` field."""
  doubles: IntFilter

  """Filter by the object’s `triples` field."""
  triples: IntFilter

  """Filter by the object’s `homeruns` field."""
  homeruns: IntFilter

  """Filter by the object’s `walks` field."""
  walks: IntFilter

  """Filter by the object’s `strikeouts` field."""
  strikeouts: IntFilter

  """Filter by the object’s `sacFlies` field."""
  sacFlies: IntFilter

  """Filter by the object’s `gidp` field."""
  gidp: IntFilter

  """Filter by the object’s `runs` field."""
  runs: IntFilter

  """Filter by the object’s `rbi` field."""
  rbi: IntFilter

  """Filter by the object’s `stolenBases` field."""
  stolenBases: IntFilter

  """Checks for all expressions in this list."""
  and: [GameBattingStatFilter!]

  """Checks for any expressions in this list."""
  or: [GameBattingStatFilter!]

  """Negates the expression."""
  not: GameBattingStatFilter
}

type TraditionalStatLine {
  playerId: UUID
  games: Int
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  xbh: Int
  battingAverage: Float
  onBasePct: Float
  sluggingPct: Float
  ops: Float
}

"""
A filter to be used against `TraditionalStatLine` object types. All fields are combined with a logical ‘and.’
"""
input TraditionalStatLineFilter {
  """Filter by the object’s `playerId` field."""
  playerId: UUIDFilter

  """Filter by the object’s `games` field."""
  games: IntFilter

  """Filter by the object’s `plateAppearances` field."""
  plateAppearances: IntFilter

  """Filter by the object’s `atBats` field."""
  atBats: IntFilter

  """Filter by the object’s `hits` field."""
  hits: IntFilter

  """Filter by the object’s `singles` field."""
  singles: IntFilter

  """Filter by the object’s `doubles` field."""
  doubles: IntFilter

  """Filter by the object’s `triples` field."""
  triples: IntFilter

  """Filter by the object’s `homeruns` field."""
  homeruns: IntFilter

  """Filter by the object’s `walks` field."""
  walks: IntFilter

  """Filter by the object’s `strikeouts` field."""
  strikeouts: IntFilter

  """Filter by the object’s `sacFlies` field."""
  sacFlies: IntFilter

  """Filter by the object’s `gidp` field."""
  gidp: IntFilter

  """Filter by the object’s `runs` field."""
  runs: IntFilter

  """Filter by the object’s `rbi` field."""
  rbi: IntFilter

  """Filter by the object’s `xbh` field."""
  xbh: IntFilter

  """Filter by the object’s `battingAverage` field."""
  battingAverage: FloatFilter

  """Filter by the object’s `onBasePct` field."""
  onBasePct: FloatFilter

  """Filter by the object’s `sluggingPct` field."""
  sluggingPct: FloatFilter

  """Filter by the object’s `ops` field."""
  ops: FloatFilter

  """Checks for all expressions in this list."""
  and: [TraditionalStatLineFilter!]

  """Checks for any expressions in this list."""
  or: [TraditionalStatLineFilter!]

  """Negates the expression."""
  not: TraditionalStatLineFilter
}

type LineScoreCell {
  inning: Int
  halfInning: HalfInning
  runs: Int
  hits: Int
}

"""
A filter to be used against `LineScoreCell` object types. All fields are combined with a logical ‘and.’
"""
input LineScoreCellFilter {
  """Filter by the object’s `inning` field."""
  inning: IntFilter

  """Filter by the object’s `halfInning` field."""
  halfInning: HalfInningFilter

  """Filter by the object’s `runs` field."""
  runs: IntFilter

  """Filter by the object’s `hits` field."""
  hits: IntFilter

  """Checks for all expressions in this list."""
  and: [LineScoreCellFilter!]

  """Checks for any expressions in this list."""
  or: [LineScoreCellFilter!]

  """Negates the expression."""
  not: LineScoreCellFilter
}

type PlayerAuxMeetupInfo implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  playerId: UUID!
  gender: Gender!
  bats: Handedness!
  throws: Handedness!
  preferredPositionFirst: FieldingPosition!
  preferredPositionSecond: FieldingPosition!
  preferredPositionThird: FieldingPosition!
  meetupMemberId: String!
  adminNickname: String
  selfNickname: String
  skillLevel: Int
  favoriteTeam: String
  hometown: String
  school: String
  dateDebuted: Date

  """Reads a single `Player` that is related to this `PlayerAuxMeetupInfo`."""
  player: Player
}

enum Gender {
  MALE
  FEMALE
}

enum Handedness {
  LEFT
  RIGHT
  BOTH
}

"""The day, does not include a time."""
scalar Date

type GameAuxMeetupInfo implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gameId: UUID!
  imageGalleryUrl: String
  meetupEventId: String
  advanced: Boolean!

  """Reads a single `Player` that is related to this `GameAuxMeetupInfo`."""
  game: Player
}

"""Methods to use when ordering `Field`."""
enum FieldsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NOTES_ASC
  NOTES_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Field` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FieldCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `notes` field."""
  notes: String

  """Checks for equality with the object’s `address` field."""
  address: String
}

"""
A filter to be used against `Field` object types. All fields are combined with a logical ‘and.’
"""
input FieldFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `notes` field."""
  notes: StringFilter

  """Filter by the object’s `address` field."""
  address: StringFilter

  """Checks for all expressions in this list."""
  and: [FieldFilter!]

  """Checks for any expressions in this list."""
  or: [FieldFilter!]

  """Negates the expression."""
  not: FieldFilter
}

"""Methods to use when ordering `GameAuxMeetupInfo`."""
enum GameAuxMeetupInfosOrderBy {
  NATURAL
  GAME_ID_ASC
  GAME_ID_DESC
  IMAGE_GALLERY_URL_ASC
  IMAGE_GALLERY_URL_DESC
  MEETUP_EVENT_ID_ASC
  MEETUP_EVENT_ID_DESC
  ADVANCED_ASC
  ADVANCED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GameAuxMeetupInfo` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GameAuxMeetupInfoCondition {
  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID

  """Checks for equality with the object’s `imageGalleryUrl` field."""
  imageGalleryUrl: String

  """Checks for equality with the object’s `meetupEventId` field."""
  meetupEventId: String

  """Checks for equality with the object’s `advanced` field."""
  advanced: Boolean
}

"""
A filter to be used against `GameAuxMeetupInfo` object types. All fields are combined with a logical ‘and.’
"""
input GameAuxMeetupInfoFilter {
  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Filter by the object’s `imageGalleryUrl` field."""
  imageGalleryUrl: StringFilter

  """Filter by the object’s `meetupEventId` field."""
  meetupEventId: StringFilter

  """Filter by the object’s `advanced` field."""
  advanced: BooleanFilter

  """Checks for all expressions in this list."""
  and: [GameAuxMeetupInfoFilter!]

  """Checks for any expressions in this list."""
  or: [GameAuxMeetupInfoFilter!]

  """Negates the expression."""
  not: GameAuxMeetupInfoFilter
}

"""Methods to use when ordering `GameEvent`."""
enum GameEventsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PLATE_APPEARANCE_ID_ASC
  PLATE_APPEARANCE_ID_DESC
  STOLEN_BASE_ATTEMPT_ID_ASC
  STOLEN_BASE_ATTEMPT_ID_DESC
  LINEUP_CHANGE_ID_ASC
  LINEUP_CHANGE_ID_DESC
  SOLO_MODE_OPPONENT_INNING_ID_ASC
  SOLO_MODE_OPPONENT_INNING_ID_DESC
  AT_BAT_SKIP_ID_ASC
  AT_BAT_SKIP_ID_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  EARLY_GAME_END_ID_ASC
  EARLY_GAME_END_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GameEvent` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GameEventCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `plateAppearanceId` field."""
  plateAppearanceId: UUID

  """Checks for equality with the object’s `stolenBaseAttemptId` field."""
  stolenBaseAttemptId: UUID

  """Checks for equality with the object’s `lineupChangeId` field."""
  lineupChangeId: UUID

  """
  Checks for equality with the object’s `soloModeOpponentInningId` field.
  """
  soloModeOpponentInningId: UUID

  """Checks for equality with the object’s `atBatSkipId` field."""
  atBatSkipId: UUID

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID

  """Checks for equality with the object’s `earlyGameEndId` field."""
  earlyGameEndId: UUID
}

"""
A filter to be used against `GameEvent` object types. All fields are combined with a logical ‘and.’
"""
input GameEventFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `plateAppearanceId` field."""
  plateAppearanceId: UUIDFilter

  """Filter by the object’s `stolenBaseAttemptId` field."""
  stolenBaseAttemptId: UUIDFilter

  """Filter by the object’s `lineupChangeId` field."""
  lineupChangeId: UUIDFilter

  """Filter by the object’s `soloModeOpponentInningId` field."""
  soloModeOpponentInningId: UUIDFilter

  """Filter by the object’s `atBatSkipId` field."""
  atBatSkipId: UUIDFilter

  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Filter by the object’s `earlyGameEndId` field."""
  earlyGameEndId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [GameEventFilter!]

  """Checks for any expressions in this list."""
  or: [GameEventFilter!]

  """Negates the expression."""
  not: GameEventFilter
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NOTES_ASC
  NOTES_DESC
  SOLO_MODE_ASC
  SOLO_MODE_DESC
  URL_SLUG_ASC
  URL_SLUG_DESC
  ALLOW_SKIPPING_AT_BATS_ASC
  ALLOW_SKIPPING_AT_BATS_DESC
  ALLOW_STEALS_ASC
  ALLOW_STEALS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Group` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `notes` field."""
  notes: String

  """Checks for equality with the object’s `soloMode` field."""
  soloMode: Boolean

  """Checks for equality with the object’s `urlSlug` field."""
  urlSlug: String

  """Checks for equality with the object’s `allowSkippingAtBats` field."""
  allowSkippingAtBats: Boolean

  """Checks for equality with the object’s `allowSteals` field."""
  allowSteals: Boolean
}

"""
A filter to be used against `Group` object types. All fields are combined with a logical ‘and.’
"""
input GroupFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `notes` field."""
  notes: StringFilter

  """Filter by the object’s `soloMode` field."""
  soloMode: BooleanFilter

  """Filter by the object’s `urlSlug` field."""
  urlSlug: StringFilter

  """Filter by the object’s `allowSkippingAtBats` field."""
  allowSkippingAtBats: BooleanFilter

  """Filter by the object’s `allowSteals` field."""
  allowSteals: BooleanFilter

  """Checks for all expressions in this list."""
  and: [GroupFilter!]

  """Checks for any expressions in this list."""
  or: [GroupFilter!]

  """Negates the expression."""
  not: GroupFilter
}

"""Methods to use when ordering `Player`."""
enum PlayersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  LEGACY_PLAYER_ID_ASC
  LEGACY_PLAYER_ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NICKNAME_ASC
  NICKNAME_DESC
  IMAGE_URL_ASC
  IMAGE_URL_DESC
  TIME_CREATED_ASC
  TIME_CREATED_DESC
  CLAIMED_ASC
  CLAIMED_DESC
  TIME_UPDATED_ASC
  TIME_UPDATED_DESC
  TIME_CLAIMED_ASC
  TIME_CLAIMED_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  FULL_NAME_ASC
  FULL_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Player` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PlayerCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `legacyPlayerId` field."""
  legacyPlayerId: Int

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `nickname` field."""
  nickname: String

  """Checks for equality with the object’s `imageUrl` field."""
  imageUrl: String

  """Checks for equality with the object’s `timeCreated` field."""
  timeCreated: Datetime

  """Checks for equality with the object’s `claimed` field."""
  claimed: Boolean

  """Checks for equality with the object’s `timeUpdated` field."""
  timeUpdated: Datetime

  """Checks for equality with the object’s `timeClaimed` field."""
  timeClaimed: Datetime

  """Checks for equality with the object’s `active` field."""
  active: Boolean
}

"""Methods to use when ordering `PlayerAuxMeetupInfo`."""
enum PlayerAuxMeetupInfosOrderBy {
  NATURAL
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  GENDER_ASC
  GENDER_DESC
  BATS_ASC
  BATS_DESC
  THROWS_ASC
  THROWS_DESC
  PREFERRED_POSITION_FIRST_ASC
  PREFERRED_POSITION_FIRST_DESC
  PREFERRED_POSITION_SECOND_ASC
  PREFERRED_POSITION_SECOND_DESC
  PREFERRED_POSITION_THIRD_ASC
  PREFERRED_POSITION_THIRD_DESC
  MEETUP_MEMBER_ID_ASC
  MEETUP_MEMBER_ID_DESC
  ADMIN_NICKNAME_ASC
  ADMIN_NICKNAME_DESC
  SELF_NICKNAME_ASC
  SELF_NICKNAME_DESC
  SKILL_LEVEL_ASC
  SKILL_LEVEL_DESC
  FAVORITE_TEAM_ASC
  FAVORITE_TEAM_DESC
  HOMETOWN_ASC
  HOMETOWN_DESC
  SCHOOL_ASC
  SCHOOL_DESC
  DATE_DEBUTED_ASC
  DATE_DEBUTED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PlayerAuxMeetupInfo` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input PlayerAuxMeetupInfoCondition {
  """Checks for equality with the object’s `playerId` field."""
  playerId: UUID

  """Checks for equality with the object’s `gender` field."""
  gender: Gender

  """Checks for equality with the object’s `bats` field."""
  bats: Handedness

  """Checks for equality with the object’s `throws` field."""
  throws: Handedness

  """Checks for equality with the object’s `preferredPositionFirst` field."""
  preferredPositionFirst: FieldingPosition

  """Checks for equality with the object’s `preferredPositionSecond` field."""
  preferredPositionSecond: FieldingPosition

  """Checks for equality with the object’s `preferredPositionThird` field."""
  preferredPositionThird: FieldingPosition

  """Checks for equality with the object’s `meetupMemberId` field."""
  meetupMemberId: String

  """Checks for equality with the object’s `adminNickname` field."""
  adminNickname: String

  """Checks for equality with the object’s `selfNickname` field."""
  selfNickname: String

  """Checks for equality with the object’s `skillLevel` field."""
  skillLevel: Int

  """Checks for equality with the object’s `favoriteTeam` field."""
  favoriteTeam: String

  """Checks for equality with the object’s `hometown` field."""
  hometown: String

  """Checks for equality with the object’s `school` field."""
  school: String

  """Checks for equality with the object’s `dateDebuted` field."""
  dateDebuted: Date
}

"""
A filter to be used against `PlayerAuxMeetupInfo` object types. All fields are combined with a logical ‘and.’
"""
input PlayerAuxMeetupInfoFilter {
  """Filter by the object’s `playerId` field."""
  playerId: UUIDFilter

  """Filter by the object’s `gender` field."""
  gender: GenderFilter

  """Filter by the object’s `bats` field."""
  bats: HandednessFilter

  """Filter by the object’s `throws` field."""
  throws: HandednessFilter

  """Filter by the object’s `preferredPositionFirst` field."""
  preferredPositionFirst: FieldingPositionFilter

  """Filter by the object’s `preferredPositionSecond` field."""
  preferredPositionSecond: FieldingPositionFilter

  """Filter by the object’s `preferredPositionThird` field."""
  preferredPositionThird: FieldingPositionFilter

  """Filter by the object’s `meetupMemberId` field."""
  meetupMemberId: StringFilter

  """Filter by the object’s `adminNickname` field."""
  adminNickname: StringFilter

  """Filter by the object’s `selfNickname` field."""
  selfNickname: StringFilter

  """Filter by the object’s `skillLevel` field."""
  skillLevel: IntFilter

  """Filter by the object’s `favoriteTeam` field."""
  favoriteTeam: StringFilter

  """Filter by the object’s `hometown` field."""
  hometown: StringFilter

  """Filter by the object’s `school` field."""
  school: StringFilter

  """Filter by the object’s `dateDebuted` field."""
  dateDebuted: DateFilter

  """Checks for all expressions in this list."""
  and: [PlayerAuxMeetupInfoFilter!]

  """Checks for any expressions in this list."""
  or: [PlayerAuxMeetupInfoFilter!]

  """Negates the expression."""
  not: PlayerAuxMeetupInfoFilter
}

"""
A filter to be used against Gender fields. All fields are combined with a logical ‘and.’
"""
input GenderFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Gender

  """Not equal to the specified value."""
  notEqualTo: Gender

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Gender

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Gender

  """Included in the specified list."""
  in: [Gender!]

  """Not included in the specified list."""
  notIn: [Gender!]

  """Less than the specified value."""
  lessThan: Gender

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Gender

  """Greater than the specified value."""
  greaterThan: Gender

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Gender
}

"""
A filter to be used against Handedness fields. All fields are combined with a logical ‘and.’
"""
input HandednessFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Handedness

  """Not equal to the specified value."""
  notEqualTo: Handedness

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Handedness

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Handedness

  """Included in the specified list."""
  in: [Handedness!]

  """Not included in the specified list."""
  notIn: [Handedness!]

  """Less than the specified value."""
  lessThan: Handedness

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Handedness

  """Greater than the specified value."""
  greaterThan: Handedness

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Handedness
}

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Included in the specified list."""
  in: [Date!]

  """Not included in the specified list."""
  notIn: [Date!]

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date
}

type ReduxDump implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  storeData: JSON!
  timeCreated: Datetime
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Methods to use when ordering `ReduxDump`."""
enum ReduxDumpsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  STORE_DATA_ASC
  STORE_DATA_DESC
  TIME_CREATED_ASC
  TIME_CREATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ReduxDump` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ReduxDumpCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `storeData` field."""
  storeData: JSON

  """Checks for equality with the object’s `timeCreated` field."""
  timeCreated: Datetime
}

"""
A filter to be used against `ReduxDump` object types. All fields are combined with a logical ‘and.’
"""
input ReduxDumpFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `storeData` field."""
  storeData: JSONFilter

  """Filter by the object’s `timeCreated` field."""
  timeCreated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ReduxDumpFilter!]

  """Checks for any expressions in this list."""
  or: [ReduxDumpFilter!]

  """Negates the expression."""
  not: ReduxDumpFilter
}

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

type UserGroupPermission {
  groupId: UUID
  permission: GroupPermissionType
}

enum GroupPermissionType {
  SAVE_GAMES
  DRAFT_TEAMS
  ADD_PLAYERS_TO_GROUP
}

"""
A filter to be used against `UserGroupPermission` object types. All fields are combined with a logical ‘and.’
"""
input UserGroupPermissionFilter {
  """Filter by the object’s `groupId` field."""
  groupId: UUIDFilter

  """Filter by the object’s `permission` field."""
  permission: GroupPermissionTypeFilter

  """Checks for all expressions in this list."""
  and: [UserGroupPermissionFilter!]

  """Checks for any expressions in this list."""
  or: [UserGroupPermissionFilter!]

  """Negates the expression."""
  not: UserGroupPermissionFilter
}

"""
A filter to be used against GroupPermissionType fields. All fields are combined with a logical ‘and.’
"""
input GroupPermissionTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: GroupPermissionType

  """Not equal to the specified value."""
  notEqualTo: GroupPermissionType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: GroupPermissionType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: GroupPermissionType

  """Included in the specified list."""
  in: [GroupPermissionType!]

  """Not included in the specified list."""
  notIn: [GroupPermissionType!]

  """Less than the specified value."""
  lessThan: GroupPermissionType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: GroupPermissionType

  """Greater than the specified value."""
  greaterThan: GroupPermissionType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: GroupPermissionType
}

enum PermissionType {
  ADD_NEW_PLAYERS
  SAVE_DEBUG_DATA
}

"""The return type of our `getPlateAppearancesConnection` query."""
type GetPlateAppearancesRecord {
  gameId: UUID
  gameStartTime: Datetime
  playerId: UUID
  type: PlateAppearanceType
  contact: ContactQuality
  hitTo: FieldingPosition
  runsScored: Int
  inning: Int
  halfInning: HalfInning
  gameStateBeforeId: UUID
  gameEventRecordId: UUID
}

"""
A filter to be used against `GetPlateAppearancesRecord` object types. All fields are combined with a logical ‘and.’
"""
input GetPlateAppearancesRecordFilter {
  """Filter by the object’s `gameId` field."""
  gameId: UUIDFilter

  """Filter by the object’s `gameStartTime` field."""
  gameStartTime: DatetimeFilter

  """Filter by the object’s `playerId` field."""
  playerId: UUIDFilter

  """Filter by the object’s `type` field."""
  type: PlateAppearanceTypeFilter

  """Filter by the object’s `contact` field."""
  contact: ContactQualityFilter

  """Filter by the object’s `hitTo` field."""
  hitTo: FieldingPositionFilter

  """Filter by the object’s `runsScored` field."""
  runsScored: IntFilter

  """Filter by the object’s `inning` field."""
  inning: IntFilter

  """Filter by the object’s `halfInning` field."""
  halfInning: HalfInningFilter

  """Filter by the object’s `gameStateBeforeId` field."""
  gameStateBeforeId: UUIDFilter

  """Filter by the object’s `gameEventRecordId` field."""
  gameEventRecordId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [GetPlateAppearancesRecordFilter!]

  """Checks for any expressions in this list."""
  or: [GetPlateAppearancesRecordFilter!]

  """Negates the expression."""
  not: GetPlateAppearancesRecordFilter
}

"""The return type of our `getRunsScoredConnection` query."""
type GetRunsScoredRecord {
  batterId: UUID
  runnerId: UUID
  battedIn: Boolean
}

"""
A filter to be used against `GetRunsScoredRecord` object types. All fields are combined with a logical ‘and.’
"""
input GetRunsScoredRecordFilter {
  """Filter by the object’s `batterId` field."""
  batterId: UUIDFilter

  """Filter by the object’s `runnerId` field."""
  runnerId: UUIDFilter

  """Filter by the object’s `battedIn` field."""
  battedIn: BooleanFilter

  """Checks for all expressions in this list."""
  and: [GetRunsScoredRecordFilter!]

  """Checks for any expressions in this list."""
  or: [GetRunsScoredRecordFilter!]

  """Negates the expression."""
  not: GetRunsScoredRecordFilter
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `AtBatSkip`."""
  createAtBatSkip(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAtBatSkipInput!
  ): CreateAtBatSkipPayload

  """Creates a single `BaseRunner`."""
  createBaseRunner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBaseRunnerInput!
  ): CreateBaseRunnerPayload

  """Creates a single `BasepathMovement`."""
  createBasepathMovement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBasepathMovementInput!
  ): CreateBasepathMovementPayload

  """Creates a single `EarlyGameEnd`."""
  createEarlyGameEnd(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEarlyGameEndInput!
  ): CreateEarlyGameEndPayload

  """Creates a single `Field`."""
  createField(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFieldInput!
  ): CreateFieldPayload

  """Creates a single `Game`."""
  createGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGameInput!
  ): CreateGamePayload

  """Creates a single `GameAuxMeetupInfo`."""
  createGameAuxMeetupInfo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGameAuxMeetupInfoInput!
  ): CreateGameAuxMeetupInfoPayload

  """Creates a single `GameEvent`."""
  createGameEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGameEventInput!
  ): CreateGameEventPayload

  """Creates a single `GameEventRecord`."""
  createGameEventRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGameEventRecordInput!
  ): CreateGameEventRecordPayload

  """Creates a single `GameState`."""
  createGameState(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGameStateInput!
  ): CreateGameStatePayload

  """Creates a single `Group`."""
  createGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupInput!
  ): CreateGroupPayload

  """Creates a single `Lineup`."""
  createLineup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLineupInput!
  ): CreateLineupPayload

  """Creates a single `LineupChange`."""
  createLineupChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLineupChangeInput!
  ): CreateLineupChangePayload

  """Creates a single `LineupForGameState`."""
  createLineupForGameState(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLineupForGameStateInput!
  ): CreateLineupForGameStatePayload

  """Creates a single `LineupSpot`."""
  createLineupSpot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLineupSpotInput!
  ): CreateLineupSpotPayload

  """Creates a single `ManualEntryBattingLine`."""
  createManualEntryBattingLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateManualEntryBattingLineInput!
  ): CreateManualEntryBattingLinePayload

  """Creates a single `ManualEntryLineScoreCell`."""
  createManualEntryLineScoreCell(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateManualEntryLineScoreCellInput!
  ): CreateManualEntryLineScoreCellPayload

  """Creates a single `ManualEntryPitchingLine`."""
  createManualEntryPitchingLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateManualEntryPitchingLineInput!
  ): CreateManualEntryPitchingLinePayload

  """Creates a single `OutOnPlayRunner`."""
  createOutOnPlayRunner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOutOnPlayRunnerInput!
  ): CreateOutOnPlayRunnerPayload

  """Creates a single `PlateAppearance`."""
  createPlateAppearance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlateAppearanceInput!
  ): CreatePlateAppearancePayload

  """Creates a single `Player`."""
  createPlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlayerInput!
  ): CreatePlayerPayload

  """Creates a single `PlayerAuxMeetupInfo`."""
  createPlayerAuxMeetupInfo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlayerAuxMeetupInfoInput!
  ): CreatePlayerAuxMeetupInfoPayload

  """Creates a single `PlayerGroupMembership`."""
  createPlayerGroupMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlayerGroupMembershipInput!
  ): CreatePlayerGroupMembershipPayload

  """Creates a single `ReduxDump`."""
  createReduxDump(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReduxDumpInput!
  ): CreateReduxDumpPayload

  """Creates a single `ScoredRunner`."""
  createScoredRunner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateScoredRunnerInput!
  ): CreateScoredRunnerPayload

  """Creates a single `SoloModeOpponentInning`."""
  createSoloModeOpponentInning(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSoloModeOpponentInningInput!
  ): CreateSoloModeOpponentInningPayload

  """Creates a single `StolenBaseAttempt`."""
  createStolenBaseAttempt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStolenBaseAttemptInput!
  ): CreateStolenBaseAttemptPayload

  """Creates a single `Team`."""
  createTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeamInput!
  ): CreateTeamPayload

  """Updates a single `AtBatSkip` using its globally unique id and a patch."""
  updateAtBatSkipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAtBatSkipByNodeIdInput!
  ): UpdateAtBatSkipPayload

  """Updates a single `AtBatSkip` using a unique key and a patch."""
  updateAtBatSkip(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAtBatSkipInput!
  ): UpdateAtBatSkipPayload

  """
  Updates a single `BaseRunner` using its globally unique id and a patch.
  """
  updateBaseRunnerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBaseRunnerByNodeIdInput!
  ): UpdateBaseRunnerPayload

  """Updates a single `BaseRunner` using a unique key and a patch."""
  updateBaseRunner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBaseRunnerInput!
  ): UpdateBaseRunnerPayload

  """
  Updates a single `BasepathMovement` using its globally unique id and a patch.
  """
  updateBasepathMovementByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBasepathMovementByNodeIdInput!
  ): UpdateBasepathMovementPayload

  """Updates a single `BasepathMovement` using a unique key and a patch."""
  updateBasepathMovement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBasepathMovementInput!
  ): UpdateBasepathMovementPayload

  """
  Updates a single `EarlyGameEnd` using its globally unique id and a patch.
  """
  updateEarlyGameEndByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEarlyGameEndByNodeIdInput!
  ): UpdateEarlyGameEndPayload

  """Updates a single `EarlyGameEnd` using a unique key and a patch."""
  updateEarlyGameEnd(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEarlyGameEndInput!
  ): UpdateEarlyGameEndPayload

  """Updates a single `Field` using its globally unique id and a patch."""
  updateFieldByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFieldByNodeIdInput!
  ): UpdateFieldPayload

  """Updates a single `Field` using a unique key and a patch."""
  updateField(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFieldInput!
  ): UpdateFieldPayload

  """Updates a single `Game` using its globally unique id and a patch."""
  updateGameByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameByNodeIdInput!
  ): UpdateGamePayload

  """Updates a single `Game` using a unique key and a patch."""
  updateGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameInput!
  ): UpdateGamePayload

  """Updates a single `Game` using a unique key and a patch."""
  updateGameByGroupIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameByGroupIdAndNameInput!
  ): UpdateGamePayload

  """
  Updates a single `GameAuxMeetupInfo` using its globally unique id and a patch.
  """
  updateGameAuxMeetupInfoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameAuxMeetupInfoByNodeIdInput!
  ): UpdateGameAuxMeetupInfoPayload

  """Updates a single `GameAuxMeetupInfo` using a unique key and a patch."""
  updateGameAuxMeetupInfo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameAuxMeetupInfoInput!
  ): UpdateGameAuxMeetupInfoPayload

  """Updates a single `GameEvent` using its globally unique id and a patch."""
  updateGameEventByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameEventByNodeIdInput!
  ): UpdateGameEventPayload

  """Updates a single `GameEvent` using a unique key and a patch."""
  updateGameEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameEventInput!
  ): UpdateGameEventPayload

  """
  Updates a single `GameEventRecord` using its globally unique id and a patch.
  """
  updateGameEventRecordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameEventRecordByNodeIdInput!
  ): UpdateGameEventRecordPayload

  """Updates a single `GameEventRecord` using a unique key and a patch."""
  updateGameEventRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameEventRecordInput!
  ): UpdateGameEventRecordPayload

  """Updates a single `GameEventRecord` using a unique key and a patch."""
  updateGameEventRecordByGameIdAndEventIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameEventRecordByGameIdAndEventIndexInput!
  ): UpdateGameEventRecordPayload

  """Updates a single `GameState` using its globally unique id and a patch."""
  updateGameStateByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameStateByNodeIdInput!
  ): UpdateGameStatePayload

  """Updates a single `GameState` using a unique key and a patch."""
  updateGameState(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameStateInput!
  ): UpdateGameStatePayload

  """Updates a single `Group` using its globally unique id and a patch."""
  updateGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByNodeIdInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroupByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByNameInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroupByUrlSlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByUrlSlugInput!
  ): UpdateGroupPayload

  """Updates a single `Lineup` using its globally unique id and a patch."""
  updateLineupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLineupByNodeIdInput!
  ): UpdateLineupPayload

  """Updates a single `Lineup` using a unique key and a patch."""
  updateLineup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLineupInput!
  ): UpdateLineupPayload

  """
  Updates a single `LineupChange` using its globally unique id and a patch.
  """
  updateLineupChangeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLineupChangeByNodeIdInput!
  ): UpdateLineupChangePayload

  """Updates a single `LineupChange` using a unique key and a patch."""
  updateLineupChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLineupChangeInput!
  ): UpdateLineupChangePayload

  """
  Updates a single `LineupForGameState` using its globally unique id and a patch.
  """
  updateLineupForGameStateByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLineupForGameStateByNodeIdInput!
  ): UpdateLineupForGameStatePayload

  """Updates a single `LineupForGameState` using a unique key and a patch."""
  updateLineupForGameState(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLineupForGameStateInput!
  ): UpdateLineupForGameStatePayload

  """
  Updates a single `LineupSpot` using its globally unique id and a patch.
  """
  updateLineupSpotByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLineupSpotByNodeIdInput!
  ): UpdateLineupSpotPayload

  """Updates a single `LineupSpot` using a unique key and a patch."""
  updateLineupSpot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLineupSpotInput!
  ): UpdateLineupSpotPayload

  """Updates a single `LineupSpot` using a unique key and a patch."""
  updateLineupSpotByLineupIdAndBattingOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLineupSpotByLineupIdAndBattingOrderInput!
  ): UpdateLineupSpotPayload

  """Updates a single `LineupSpot` using a unique key and a patch."""
  updateLineupSpotByLineupIdAndPosition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLineupSpotByLineupIdAndPositionInput!
  ): UpdateLineupSpotPayload

  """
  Updates a single `ManualEntryBattingLine` using its globally unique id and a patch.
  """
  updateManualEntryBattingLineByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateManualEntryBattingLineByNodeIdInput!
  ): UpdateManualEntryBattingLinePayload

  """
  Updates a single `ManualEntryBattingLine` using a unique key and a patch.
  """
  updateManualEntryBattingLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateManualEntryBattingLineInput!
  ): UpdateManualEntryBattingLinePayload

  """
  Updates a single `ManualEntryLineScoreCell` using its globally unique id and a patch.
  """
  updateManualEntryLineScoreCellByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateManualEntryLineScoreCellByNodeIdInput!
  ): UpdateManualEntryLineScoreCellPayload

  """
  Updates a single `ManualEntryLineScoreCell` using a unique key and a patch.
  """
  updateManualEntryLineScoreCell(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateManualEntryLineScoreCellInput!
  ): UpdateManualEntryLineScoreCellPayload

  """
  Updates a single `ManualEntryPitchingLine` using its globally unique id and a patch.
  """
  updateManualEntryPitchingLineByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateManualEntryPitchingLineByNodeIdInput!
  ): UpdateManualEntryPitchingLinePayload

  """
  Updates a single `ManualEntryPitchingLine` using a unique key and a patch.
  """
  updateManualEntryPitchingLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateManualEntryPitchingLineInput!
  ): UpdateManualEntryPitchingLinePayload

  """
  Updates a single `OutOnPlayRunner` using its globally unique id and a patch.
  """
  updateOutOnPlayRunnerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOutOnPlayRunnerByNodeIdInput!
  ): UpdateOutOnPlayRunnerPayload

  """Updates a single `OutOnPlayRunner` using a unique key and a patch."""
  updateOutOnPlayRunner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOutOnPlayRunnerInput!
  ): UpdateOutOnPlayRunnerPayload

  """
  Updates a single `PlateAppearance` using its globally unique id and a patch.
  """
  updatePlateAppearanceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlateAppearanceByNodeIdInput!
  ): UpdatePlateAppearancePayload

  """Updates a single `PlateAppearance` using a unique key and a patch."""
  updatePlateAppearance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlateAppearanceInput!
  ): UpdatePlateAppearancePayload

  """Updates a single `Player` using its globally unique id and a patch."""
  updatePlayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerByNodeIdInput!
  ): UpdatePlayerPayload

  """Updates a single `Player` using a unique key and a patch."""
  updatePlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerInput!
  ): UpdatePlayerPayload

  """Updates a single `Player` using a unique key and a patch."""
  updatePlayerByFirstNameAndLastName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerByFirstNameAndLastNameInput!
  ): UpdatePlayerPayload

  """
  Updates a single `PlayerAuxMeetupInfo` using its globally unique id and a patch.
  """
  updatePlayerAuxMeetupInfoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerAuxMeetupInfoByNodeIdInput!
  ): UpdatePlayerAuxMeetupInfoPayload

  """Updates a single `PlayerAuxMeetupInfo` using a unique key and a patch."""
  updatePlayerAuxMeetupInfo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerAuxMeetupInfoInput!
  ): UpdatePlayerAuxMeetupInfoPayload

  """
  Updates a single `PlayerGroupMembership` using its globally unique id and a patch.
  """
  updatePlayerGroupMembershipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerGroupMembershipByNodeIdInput!
  ): UpdatePlayerGroupMembershipPayload

  """
  Updates a single `PlayerGroupMembership` using a unique key and a patch.
  """
  updatePlayerGroupMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerGroupMembershipInput!
  ): UpdatePlayerGroupMembershipPayload

  """Updates a single `ReduxDump` using its globally unique id and a patch."""
  updateReduxDumpByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReduxDumpByNodeIdInput!
  ): UpdateReduxDumpPayload

  """Updates a single `ReduxDump` using a unique key and a patch."""
  updateReduxDump(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReduxDumpInput!
  ): UpdateReduxDumpPayload

  """
  Updates a single `ScoredRunner` using its globally unique id and a patch.
  """
  updateScoredRunnerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScoredRunnerByNodeIdInput!
  ): UpdateScoredRunnerPayload

  """Updates a single `ScoredRunner` using a unique key and a patch."""
  updateScoredRunner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScoredRunnerInput!
  ): UpdateScoredRunnerPayload

  """
  Updates a single `SoloModeOpponentInning` using its globally unique id and a patch.
  """
  updateSoloModeOpponentInningByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSoloModeOpponentInningByNodeIdInput!
  ): UpdateSoloModeOpponentInningPayload

  """
  Updates a single `SoloModeOpponentInning` using a unique key and a patch.
  """
  updateSoloModeOpponentInning(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSoloModeOpponentInningInput!
  ): UpdateSoloModeOpponentInningPayload

  """
  Updates a single `StolenBaseAttempt` using its globally unique id and a patch.
  """
  updateStolenBaseAttemptByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStolenBaseAttemptByNodeIdInput!
  ): UpdateStolenBaseAttemptPayload

  """Updates a single `StolenBaseAttempt` using a unique key and a patch."""
  updateStolenBaseAttempt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStolenBaseAttemptInput!
  ): UpdateStolenBaseAttemptPayload

  """Updates a single `Team` using its globally unique id and a patch."""
  updateTeamByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamByNodeIdInput!
  ): UpdateTeamPayload

  """Updates a single `Team` using a unique key and a patch."""
  updateTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamInput!
  ): UpdateTeamPayload

  """Updates a single `Team` using a unique key and a patch."""
  updateTeamByGameIdAndRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamByGameIdAndRoleInput!
  ): UpdateTeamPayload

  """Deletes a single `AtBatSkip` using its globally unique id."""
  deleteAtBatSkipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAtBatSkipByNodeIdInput!
  ): DeleteAtBatSkipPayload

  """Deletes a single `AtBatSkip` using a unique key."""
  deleteAtBatSkip(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAtBatSkipInput!
  ): DeleteAtBatSkipPayload

  """Deletes a single `BaseRunner` using its globally unique id."""
  deleteBaseRunnerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBaseRunnerByNodeIdInput!
  ): DeleteBaseRunnerPayload

  """Deletes a single `BaseRunner` using a unique key."""
  deleteBaseRunner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBaseRunnerInput!
  ): DeleteBaseRunnerPayload

  """Deletes a single `BasepathMovement` using its globally unique id."""
  deleteBasepathMovementByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBasepathMovementByNodeIdInput!
  ): DeleteBasepathMovementPayload

  """Deletes a single `BasepathMovement` using a unique key."""
  deleteBasepathMovement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBasepathMovementInput!
  ): DeleteBasepathMovementPayload

  """Deletes a single `EarlyGameEnd` using its globally unique id."""
  deleteEarlyGameEndByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEarlyGameEndByNodeIdInput!
  ): DeleteEarlyGameEndPayload

  """Deletes a single `EarlyGameEnd` using a unique key."""
  deleteEarlyGameEnd(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEarlyGameEndInput!
  ): DeleteEarlyGameEndPayload

  """Deletes a single `Field` using its globally unique id."""
  deleteFieldByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFieldByNodeIdInput!
  ): DeleteFieldPayload

  """Deletes a single `Field` using a unique key."""
  deleteField(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFieldInput!
  ): DeleteFieldPayload

  """Deletes a single `Game` using its globally unique id."""
  deleteGameByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameByNodeIdInput!
  ): DeleteGamePayload

  """Deletes a single `Game` using a unique key."""
  deleteGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameInput!
  ): DeleteGamePayload

  """Deletes a single `Game` using a unique key."""
  deleteGameByGroupIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameByGroupIdAndNameInput!
  ): DeleteGamePayload

  """Deletes a single `GameAuxMeetupInfo` using its globally unique id."""
  deleteGameAuxMeetupInfoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameAuxMeetupInfoByNodeIdInput!
  ): DeleteGameAuxMeetupInfoPayload

  """Deletes a single `GameAuxMeetupInfo` using a unique key."""
  deleteGameAuxMeetupInfo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameAuxMeetupInfoInput!
  ): DeleteGameAuxMeetupInfoPayload

  """Deletes a single `GameEvent` using its globally unique id."""
  deleteGameEventByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameEventByNodeIdInput!
  ): DeleteGameEventPayload

  """Deletes a single `GameEvent` using a unique key."""
  deleteGameEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameEventInput!
  ): DeleteGameEventPayload

  """Deletes a single `GameEventRecord` using its globally unique id."""
  deleteGameEventRecordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameEventRecordByNodeIdInput!
  ): DeleteGameEventRecordPayload

  """Deletes a single `GameEventRecord` using a unique key."""
  deleteGameEventRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameEventRecordInput!
  ): DeleteGameEventRecordPayload

  """Deletes a single `GameEventRecord` using a unique key."""
  deleteGameEventRecordByGameIdAndEventIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameEventRecordByGameIdAndEventIndexInput!
  ): DeleteGameEventRecordPayload

  """Deletes a single `GameState` using its globally unique id."""
  deleteGameStateByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameStateByNodeIdInput!
  ): DeleteGameStatePayload

  """Deletes a single `GameState` using a unique key."""
  deleteGameState(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameStateInput!
  ): DeleteGameStatePayload

  """Deletes a single `Group` using its globally unique id."""
  deleteGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByNodeIdInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroupByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByNameInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroupByUrlSlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByUrlSlugInput!
  ): DeleteGroupPayload

  """Deletes a single `Lineup` using its globally unique id."""
  deleteLineupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLineupByNodeIdInput!
  ): DeleteLineupPayload

  """Deletes a single `Lineup` using a unique key."""
  deleteLineup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLineupInput!
  ): DeleteLineupPayload

  """Deletes a single `LineupChange` using its globally unique id."""
  deleteLineupChangeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLineupChangeByNodeIdInput!
  ): DeleteLineupChangePayload

  """Deletes a single `LineupChange` using a unique key."""
  deleteLineupChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLineupChangeInput!
  ): DeleteLineupChangePayload

  """Deletes a single `LineupForGameState` using its globally unique id."""
  deleteLineupForGameStateByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLineupForGameStateByNodeIdInput!
  ): DeleteLineupForGameStatePayload

  """Deletes a single `LineupForGameState` using a unique key."""
  deleteLineupForGameState(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLineupForGameStateInput!
  ): DeleteLineupForGameStatePayload

  """Deletes a single `LineupSpot` using its globally unique id."""
  deleteLineupSpotByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLineupSpotByNodeIdInput!
  ): DeleteLineupSpotPayload

  """Deletes a single `LineupSpot` using a unique key."""
  deleteLineupSpot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLineupSpotInput!
  ): DeleteLineupSpotPayload

  """Deletes a single `LineupSpot` using a unique key."""
  deleteLineupSpotByLineupIdAndBattingOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLineupSpotByLineupIdAndBattingOrderInput!
  ): DeleteLineupSpotPayload

  """Deletes a single `LineupSpot` using a unique key."""
  deleteLineupSpotByLineupIdAndPosition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLineupSpotByLineupIdAndPositionInput!
  ): DeleteLineupSpotPayload

  """
  Deletes a single `ManualEntryBattingLine` using its globally unique id.
  """
  deleteManualEntryBattingLineByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteManualEntryBattingLineByNodeIdInput!
  ): DeleteManualEntryBattingLinePayload

  """Deletes a single `ManualEntryBattingLine` using a unique key."""
  deleteManualEntryBattingLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteManualEntryBattingLineInput!
  ): DeleteManualEntryBattingLinePayload

  """
  Deletes a single `ManualEntryLineScoreCell` using its globally unique id.
  """
  deleteManualEntryLineScoreCellByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteManualEntryLineScoreCellByNodeIdInput!
  ): DeleteManualEntryLineScoreCellPayload

  """Deletes a single `ManualEntryLineScoreCell` using a unique key."""
  deleteManualEntryLineScoreCell(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteManualEntryLineScoreCellInput!
  ): DeleteManualEntryLineScoreCellPayload

  """
  Deletes a single `ManualEntryPitchingLine` using its globally unique id.
  """
  deleteManualEntryPitchingLineByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteManualEntryPitchingLineByNodeIdInput!
  ): DeleteManualEntryPitchingLinePayload

  """Deletes a single `ManualEntryPitchingLine` using a unique key."""
  deleteManualEntryPitchingLine(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteManualEntryPitchingLineInput!
  ): DeleteManualEntryPitchingLinePayload

  """Deletes a single `OutOnPlayRunner` using its globally unique id."""
  deleteOutOnPlayRunnerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOutOnPlayRunnerByNodeIdInput!
  ): DeleteOutOnPlayRunnerPayload

  """Deletes a single `OutOnPlayRunner` using a unique key."""
  deleteOutOnPlayRunner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOutOnPlayRunnerInput!
  ): DeleteOutOnPlayRunnerPayload

  """Deletes a single `PlateAppearance` using its globally unique id."""
  deletePlateAppearanceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlateAppearanceByNodeIdInput!
  ): DeletePlateAppearancePayload

  """Deletes a single `PlateAppearance` using a unique key."""
  deletePlateAppearance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlateAppearanceInput!
  ): DeletePlateAppearancePayload

  """Deletes a single `Player` using its globally unique id."""
  deletePlayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerByNodeIdInput!
  ): DeletePlayerPayload

  """Deletes a single `Player` using a unique key."""
  deletePlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerInput!
  ): DeletePlayerPayload

  """Deletes a single `Player` using a unique key."""
  deletePlayerByFirstNameAndLastName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerByFirstNameAndLastNameInput!
  ): DeletePlayerPayload

  """Deletes a single `PlayerAuxMeetupInfo` using its globally unique id."""
  deletePlayerAuxMeetupInfoByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerAuxMeetupInfoByNodeIdInput!
  ): DeletePlayerAuxMeetupInfoPayload

  """Deletes a single `PlayerAuxMeetupInfo` using a unique key."""
  deletePlayerAuxMeetupInfo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerAuxMeetupInfoInput!
  ): DeletePlayerAuxMeetupInfoPayload

  """Deletes a single `PlayerGroupMembership` using its globally unique id."""
  deletePlayerGroupMembershipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerGroupMembershipByNodeIdInput!
  ): DeletePlayerGroupMembershipPayload

  """Deletes a single `PlayerGroupMembership` using a unique key."""
  deletePlayerGroupMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerGroupMembershipInput!
  ): DeletePlayerGroupMembershipPayload

  """Deletes a single `ReduxDump` using its globally unique id."""
  deleteReduxDumpByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReduxDumpByNodeIdInput!
  ): DeleteReduxDumpPayload

  """Deletes a single `ReduxDump` using a unique key."""
  deleteReduxDump(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReduxDumpInput!
  ): DeleteReduxDumpPayload

  """Deletes a single `ScoredRunner` using its globally unique id."""
  deleteScoredRunnerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScoredRunnerByNodeIdInput!
  ): DeleteScoredRunnerPayload

  """Deletes a single `ScoredRunner` using a unique key."""
  deleteScoredRunner(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScoredRunnerInput!
  ): DeleteScoredRunnerPayload

  """
  Deletes a single `SoloModeOpponentInning` using its globally unique id.
  """
  deleteSoloModeOpponentInningByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSoloModeOpponentInningByNodeIdInput!
  ): DeleteSoloModeOpponentInningPayload

  """Deletes a single `SoloModeOpponentInning` using a unique key."""
  deleteSoloModeOpponentInning(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSoloModeOpponentInningInput!
  ): DeleteSoloModeOpponentInningPayload

  """Deletes a single `StolenBaseAttempt` using its globally unique id."""
  deleteStolenBaseAttemptByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStolenBaseAttemptByNodeIdInput!
  ): DeleteStolenBaseAttemptPayload

  """Deletes a single `StolenBaseAttempt` using a unique key."""
  deleteStolenBaseAttempt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStolenBaseAttemptInput!
  ): DeleteStolenBaseAttemptPayload

  """Deletes a single `Team` using its globally unique id."""
  deleteTeamByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamByNodeIdInput!
  ): DeleteTeamPayload

  """Deletes a single `Team` using a unique key."""
  deleteTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamInput!
  ): DeleteTeamPayload

  """Deletes a single `Team` using a unique key."""
  deleteTeamByGameIdAndRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamByGameIdAndRoleInput!
  ): DeleteTeamPayload
  initiatePasswordReset(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitiatePasswordResetInput!
  ): InitiatePasswordResetPayload
  initiatePlayerClaim(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitiatePlayerClaimInput!
  ): InitiatePlayerClaimPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload
}

"""The output of our create `AtBatSkip` mutation."""
type CreateAtBatSkipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AtBatSkip` that was created by this mutation."""
  atBatSkip: AtBatSkip

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `AtBatSkip`."""
  batter: Player

  """Reads a single `Game` that is related to this `AtBatSkip`."""
  game: Game
}

"""All input for the create `AtBatSkip` mutation."""
input CreateAtBatSkipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AtBatSkip` to be created by this mutation."""
  atBatSkip: AtBatSkipInput!
}

"""An input for mutations affecting `AtBatSkip`"""
input AtBatSkipInput {
  id: UUID
  batterId: UUID
  gameId: UUID
  player: AtBatSkipBatterIdFkeyInput
  game: AtBatSkipGameIdFkeyInput
  gameEvents: GameEventAtBatSkipIdFkeyInverseInput
}

"""
Input for the nested mutation of `player` in the `AtBatSkipInput` mutation.
"""
input AtBatSkipBatterIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnAtBatSkipForAtBatSkipBatterIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnAtBatSkipForAtBatSkipBatterIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: AtBatSkipOnAtBatSkipForAtBatSkipBatterIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: AtBatSkipBatterIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to connect."""
input PlayerPlayerPkeyConnect {
  id: UUID!
}

"""The fields on `player` to look up the row to connect."""
input PlayerPlayerNameUniqueConnect {
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to connect."""
input PlayerNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!
}

"""The fields on `player` to look up the row to delete."""
input PlayerPlayerPkeyDelete {
  id: UUID!
}

"""The fields on `player` to look up the row to delete."""
input PlayerPlayerNameUniqueDelete {
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to delete."""
input PlayerNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `player` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `player` to look up the row to update."""
input PlayerOnAtBatSkipForAtBatSkipBatterIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnAtBatSkipForAtBatSkipBatterIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnAtBatSkipForAtBatSkipBatterIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""Input for the nested mutation of `team` in the `PlayerInput` mutation."""
input TeamCaptainIdFkeyInverseInput {
  """
  Flag indicating whether all other `team` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """The primary key(s) for `team` for the far side of the relationship."""
  connectById: [TeamTeamPkeyConnect!]

  """The primary key(s) for `team` for the far side of the relationship."""
  connectByGameIdAndRole: [TeamTeamGameIdRoleKeyConnect!]

  """The primary key(s) for `team` for the far side of the relationship."""
  connectByNodeId: [TeamNodeIdConnect!]

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteById: [TeamTeamPkeyDelete!]

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteByGameIdAndRole: [TeamTeamGameIdRoleKeyDelete!]

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteByNodeId: [TeamNodeIdDelete!]

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateById: [TeamOnTeamForTeamCaptainIdFkeyUsingTeamPkeyUpdate!]

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateByGameIdAndRole: [TeamOnTeamForTeamCaptainIdFkeyUsingTeamGameIdRoleKeyUpdate!]

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnTeamForTeamCaptainIdFkeyNodeIdUpdate!]

  """
  A `TeamInput` object that will be created and connected to this object.
  """
  create: [TeamCaptainIdFkeyTeamCreateInput!]
}

"""The fields on `team` to look up the row to connect."""
input TeamTeamPkeyConnect {
  id: UUID!
}

"""The fields on `team` to look up the row to connect."""
input TeamTeamGameIdRoleKeyConnect {
  gameId: UUID!
  role: TeamRole!
}

"""The globally unique `ID` look up for the row to connect."""
input TeamNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `team` to be connected.
  """
  nodeId: ID!
}

"""The fields on `team` to look up the row to delete."""
input TeamTeamPkeyDelete {
  id: UUID!
}

"""The fields on `team` to look up the row to delete."""
input TeamTeamGameIdRoleKeyDelete {
  gameId: UUID!
  role: TeamRole!
}

"""The globally unique `ID` look up for the row to delete."""
input TeamNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `team` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `team` to look up the row to update."""
input TeamOnTeamForTeamCaptainIdFkeyUsingTeamPkeyUpdate {
  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: updateTeamOnTeamForTeamCaptainIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `team` being updated.
"""
input updateTeamOnTeamForTeamCaptainIdFkeyPatch {
  id: UUID
  gameId: UUID
  role: TeamRole
  name: String
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""Input for the nested mutation of `game` in the `TeamInput` mutation."""
input TeamGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnTeamForTeamGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnTeamForTeamGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: TeamOnTeamForTeamGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: TeamGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to connect."""
input GameGamePkeyConnect {
  id: UUID!
}

"""The fields on `game` to look up the row to connect."""
input GameGameNameUniqPerGroupConnect {
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to connect."""
input GameNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!
}

"""The fields on `game` to look up the row to delete."""
input GameGamePkeyDelete {
  id: UUID!
}

"""The fields on `game` to look up the row to delete."""
input GameGameNameUniqPerGroupDelete {
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to delete."""
input GameNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `game` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `game` to look up the row to update."""
input GameOnTeamForTeamGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnTeamForTeamGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnTeamForTeamGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""Input for the nested mutation of `group` in the `GameInput` mutation."""
input GameGroupIdFkeyInput {
  """The primary key(s) for `group` for the far side of the relationship."""
  connectById: GroupGroupPkeyConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  connectByName: GroupGroupNameKeyConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  connectByUrlSlug: GroupGroupUrlSlugKeyConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  connectByNodeId: GroupNodeIdConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteById: GroupGroupPkeyDelete

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteByName: GroupGroupNameKeyDelete

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteByUrlSlug: GroupGroupUrlSlugKeyDelete

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteByNodeId: GroupNodeIdDelete

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateById: GroupOnGameForGameGroupIdFkeyUsingGroupPkeyUpdate

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateByName: GroupOnGameForGameGroupIdFkeyUsingGroupNameKeyUpdate

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateByUrlSlug: GroupOnGameForGameGroupIdFkeyUsingGroupUrlSlugKeyUpdate

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateByNodeId: GameOnGameForGameGroupIdFkeyNodeIdUpdate

  """
  A `GroupInput` object that will be created and connected to this object.
  """
  create: GameGroupIdFkeyGroupCreateInput
}

"""The fields on `group` to look up the row to connect."""
input GroupGroupPkeyConnect {
  id: UUID!
}

"""The fields on `group` to look up the row to connect."""
input GroupGroupNameKeyConnect {
  name: String!
}

"""The fields on `group` to look up the row to connect."""
input GroupGroupUrlSlugKeyConnect {
  urlSlug: String!
}

"""The globally unique `ID` look up for the row to connect."""
input GroupNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `group` to be connected.
  """
  nodeId: ID!
}

"""The fields on `group` to look up the row to delete."""
input GroupGroupPkeyDelete {
  id: UUID!
}

"""The fields on `group` to look up the row to delete."""
input GroupGroupNameKeyDelete {
  name: String!
}

"""The fields on `group` to look up the row to delete."""
input GroupGroupUrlSlugKeyDelete {
  urlSlug: String!
}

"""The globally unique `ID` look up for the row to delete."""
input GroupNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `group` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `group` to look up the row to update."""
input GroupOnGameForGameGroupIdFkeyUsingGroupPkeyUpdate {
  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: updateGroupOnGameForGameGroupIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `group` being updated.
"""
input updateGroupOnGameForGameGroupIdFkeyPatch {
  id: UUID
  name: String
  notes: String
  soloMode: Boolean
  urlSlug: String
  allowSkippingAtBats: Boolean
  allowSteals: Boolean
  games: GameGroupIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipGroupIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey0InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey0InverseInput
}

"""Input for the nested mutation of `game` in the `GroupInput` mutation."""
input GameGroupIdFkeyInverseInput {
  """
  Flag indicating whether all other `game` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: [GameGamePkeyConnect!]

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: [GameGameNameUniqPerGroupConnect!]

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: [GameNodeIdConnect!]

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: [GameGamePkeyDelete!]

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: [GameGameNameUniqPerGroupDelete!]

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: [GameNodeIdDelete!]

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: [GameOnGameForGameGroupIdFkeyUsingGamePkeyUpdate!]

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: [GameOnGameForGameGroupIdFkeyUsingGameNameUniqPerGroupUpdate!]

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: [GroupOnGameForGameGroupIdFkeyNodeIdUpdate!]

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: [GameGroupIdFkeyGameCreateInput!]
}

"""The fields on `game` to look up the row to update."""
input GameOnGameForGameGroupIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnGameForGameGroupIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnGameForGameGroupIdFkeyPatch {
  id: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""Input for the nested mutation of `field` in the `GameInput` mutation."""
input GameFieldIdFkeyInput {
  """The primary key(s) for `field` for the far side of the relationship."""
  connectById: FieldFieldPkeyConnect

  """The primary key(s) for `field` for the far side of the relationship."""
  connectByNodeId: FieldNodeIdConnect

  """The primary key(s) for `field` for the far side of the relationship."""
  deleteById: FieldFieldPkeyDelete

  """The primary key(s) for `field` for the far side of the relationship."""
  deleteByNodeId: FieldNodeIdDelete

  """
  The primary key(s) and patch data for `field` for the far side of the relationship.
  """
  updateById: FieldOnGameForGameFieldIdFkeyUsingFieldPkeyUpdate

  """
  The primary key(s) and patch data for `field` for the far side of the relationship.
  """
  updateByNodeId: GameOnGameForGameFieldIdFkeyNodeIdUpdate

  """
  A `FieldInput` object that will be created and connected to this object.
  """
  create: GameFieldIdFkeyFieldCreateInput
}

"""The fields on `field` to look up the row to connect."""
input FieldFieldPkeyConnect {
  id: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input FieldNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `field` to be connected.
  """
  nodeId: ID!
}

"""The fields on `field` to look up the row to delete."""
input FieldFieldPkeyDelete {
  id: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input FieldNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `field` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `field` to look up the row to update."""
input FieldOnGameForGameFieldIdFkeyUsingFieldPkeyUpdate {
  """
  An object where the defined keys will be set on the `field` being updated.
  """
  patch: updateFieldOnGameForGameFieldIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `field` being updated.
"""
input updateFieldOnGameForGameFieldIdFkeyPatch {
  id: UUID
  name: String
  notes: String
  address: String
  games: GameFieldIdFkeyInverseInput
}

"""Input for the nested mutation of `game` in the `FieldInput` mutation."""
input GameFieldIdFkeyInverseInput {
  """
  Flag indicating whether all other `game` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: [GameGamePkeyConnect!]

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: [GameGameNameUniqPerGroupConnect!]

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: [GameNodeIdConnect!]

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: [GameGamePkeyDelete!]

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: [GameGameNameUniqPerGroupDelete!]

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: [GameNodeIdDelete!]

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: [GameOnGameForGameFieldIdFkeyUsingGamePkeyUpdate!]

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: [GameOnGameForGameFieldIdFkeyUsingGameNameUniqPerGroupUpdate!]

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: [FieldOnGameForGameFieldIdFkeyNodeIdUpdate!]

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: [GameFieldIdFkeyGameCreateInput!]
}

"""The fields on `game` to look up the row to update."""
input GameOnGameForGameFieldIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnGameForGameFieldIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnGameForGameFieldIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""Input for the nested mutation of `team` in the `GameInput` mutation."""
input TeamGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `team` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """The primary key(s) for `team` for the far side of the relationship."""
  connectById: [TeamTeamPkeyConnect!]

  """The primary key(s) for `team` for the far side of the relationship."""
  connectByGameIdAndRole: [TeamTeamGameIdRoleKeyConnect!]

  """The primary key(s) for `team` for the far side of the relationship."""
  connectByNodeId: [TeamNodeIdConnect!]

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteById: [TeamTeamPkeyDelete!]

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteByGameIdAndRole: [TeamTeamGameIdRoleKeyDelete!]

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteByNodeId: [TeamNodeIdDelete!]

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateById: [TeamOnTeamForTeamGameIdFkeyUsingTeamPkeyUpdate!]

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateByGameIdAndRole: [TeamOnTeamForTeamGameIdFkeyUsingTeamGameIdRoleKeyUpdate!]

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateByNodeId: [GameOnTeamForTeamGameIdFkeyNodeIdUpdate!]

  """
  A `TeamInput` object that will be created and connected to this object.
  """
  create: [TeamGameIdFkeyTeamCreateInput!]
}

"""The fields on `team` to look up the row to update."""
input TeamOnTeamForTeamGameIdFkeyUsingTeamPkeyUpdate {
  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: updateTeamOnTeamForTeamGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `team` being updated.
"""
input updateTeamOnTeamForTeamGameIdFkeyPatch {
  id: UUID
  role: TeamRole
  name: String
  captainId: UUID
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""Input for the nested mutation of `player` in the `TeamInput` mutation."""
input TeamCaptainIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnTeamForTeamCaptainIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnTeamForTeamCaptainIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: TeamOnTeamForTeamCaptainIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: TeamCaptainIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnTeamForTeamCaptainIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnTeamForTeamCaptainIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnTeamForTeamCaptainIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `lineupSpot` in the `PlayerInput` mutation.
"""
input LineupSpotPlayerIdFkeyInverseInput {
  """
  Flag indicating whether all other `lineupSpot` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  connectByLineupIdAndPlayerId: [LineupSpotLineupSpotPkeyConnect!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  connectByLineupIdAndBattingOrder: [LineupSpotLineupSpotLineupIdBattingOrderKeyConnect!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  connectByLineupIdAndPosition: [LineupSpotLineupSpotLineupIdPositionKeyConnect!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  connectByNodeId: [LineupSpotNodeIdConnect!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  deleteByLineupIdAndPlayerId: [LineupSpotLineupSpotPkeyDelete!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  deleteByLineupIdAndBattingOrder: [LineupSpotLineupSpotLineupIdBattingOrderKeyDelete!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  deleteByLineupIdAndPosition: [LineupSpotLineupSpotLineupIdPositionKeyDelete!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  deleteByNodeId: [LineupSpotNodeIdDelete!]

  """
  The primary key(s) and patch data for `lineupSpot` for the far side of the relationship.
  """
  updateByLineupIdAndPlayerId: [LineupSpotOnLineupSpotForLineupSpotPlayerIdFkeyUsingLineupSpotPkeyUpdate!]

  """
  The primary key(s) and patch data for `lineupSpot` for the far side of the relationship.
  """
  updateByLineupIdAndBattingOrder: [LineupSpotOnLineupSpotForLineupSpotPlayerIdFkeyUsingLineupSpotLineupIdBattingOrderKeyUpdate!]

  """
  The primary key(s) and patch data for `lineupSpot` for the far side of the relationship.
  """
  updateByLineupIdAndPosition: [LineupSpotOnLineupSpotForLineupSpotPlayerIdFkeyUsingLineupSpotLineupIdPositionKeyUpdate!]

  """
  The primary key(s) and patch data for `lineupSpot` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnLineupSpotForLineupSpotPlayerIdFkeyNodeIdUpdate!]

  """
  A `LineupSpotInput` object that will be created and connected to this object.
  """
  create: [LineupSpotPlayerIdFkeyLineupSpotCreateInput!]
}

"""The fields on `lineupSpot` to look up the row to connect."""
input LineupSpotLineupSpotPkeyConnect {
  lineupId: UUID!
  playerId: UUID!
}

"""The fields on `lineupSpot` to look up the row to connect."""
input LineupSpotLineupSpotLineupIdBattingOrderKeyConnect {
  lineupId: UUID!
  battingOrder: Int!
}

"""The fields on `lineupSpot` to look up the row to connect."""
input LineupSpotLineupSpotLineupIdPositionKeyConnect {
  lineupId: UUID!
  position: FieldingPosition!
}

"""The globally unique `ID` look up for the row to connect."""
input LineupSpotNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `lineupSpot` to be connected.
  """
  nodeId: ID!
}

"""The fields on `lineupSpot` to look up the row to delete."""
input LineupSpotLineupSpotPkeyDelete {
  lineupId: UUID!
  playerId: UUID!
}

"""The fields on `lineupSpot` to look up the row to delete."""
input LineupSpotLineupSpotLineupIdBattingOrderKeyDelete {
  lineupId: UUID!
  battingOrder: Int!
}

"""The fields on `lineupSpot` to look up the row to delete."""
input LineupSpotLineupSpotLineupIdPositionKeyDelete {
  lineupId: UUID!
  position: FieldingPosition!
}

"""The globally unique `ID` look up for the row to delete."""
input LineupSpotNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `lineupSpot` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `lineupSpot` to look up the row to update."""
input LineupSpotOnLineupSpotForLineupSpotPlayerIdFkeyUsingLineupSpotPkeyUpdate {
  """
  An object where the defined keys will be set on the `lineupSpot` being updated.
  """
  patch: updateLineupSpotOnLineupSpotForLineupSpotPlayerIdFkeyPatch!
  lineupId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `lineupSpot` being updated.
"""
input updateLineupSpotOnLineupSpotForLineupSpotPlayerIdFkeyPatch {
  lineupId: UUID
  battingOrder: Int
  position: FieldingPosition
  gameId: UUID
  lineup: LineupSpotLineupIdFkeyInput
  player: LineupSpotPlayerIdFkeyInput
  game: LineupSpotGameIdFkeyInput
}

"""
Input for the nested mutation of `lineup` in the `LineupSpotInput` mutation.
"""
input LineupSpotLineupIdFkeyInput {
  """The primary key(s) for `lineup` for the far side of the relationship."""
  connectById: LineupLineupPkeyConnect

  """The primary key(s) for `lineup` for the far side of the relationship."""
  connectByNodeId: LineupNodeIdConnect

  """The primary key(s) for `lineup` for the far side of the relationship."""
  deleteById: LineupLineupPkeyDelete

  """The primary key(s) for `lineup` for the far side of the relationship."""
  deleteByNodeId: LineupNodeIdDelete

  """
  The primary key(s) and patch data for `lineup` for the far side of the relationship.
  """
  updateById: LineupOnLineupSpotForLineupSpotLineupIdFkeyUsingLineupPkeyUpdate

  """
  The primary key(s) and patch data for `lineup` for the far side of the relationship.
  """
  updateByNodeId: LineupSpotOnLineupSpotForLineupSpotLineupIdFkeyNodeIdUpdate

  """
  A `LineupInput` object that will be created and connected to this object.
  """
  create: LineupSpotLineupIdFkeyLineupCreateInput
}

"""The fields on `lineup` to look up the row to connect."""
input LineupLineupPkeyConnect {
  id: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input LineupNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `lineup` to be connected.
  """
  nodeId: ID!
}

"""The fields on `lineup` to look up the row to delete."""
input LineupLineupPkeyDelete {
  id: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input LineupNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `lineup` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `lineup` to look up the row to update."""
input LineupOnLineupSpotForLineupSpotLineupIdFkeyUsingLineupPkeyUpdate {
  """
  An object where the defined keys will be set on the `lineup` being updated.
  """
  patch: updateLineupOnLineupSpotForLineupSpotLineupIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `lineup` being updated.
"""
input updateLineupOnLineupSpotForLineupSpotLineupIdFkeyPatch {
  id: UUID
  teamId: UUID
  gameId: UUID
  team: LineupTeamIdFkeyInput
  game: LineupGameIdFkeyInput
  lineupSpots: LineupSpotLineupIdFkeyInverseInput
  lineupChangesToLineupBeforeIdUsingId: LineupChangeLineupBeforeIdFkeyInverseInput
  lineupChangesToLineupAfterIdUsingId: LineupChangeLineupAfterIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateLineupIdFkeyInverseInput
}

"""Input for the nested mutation of `team` in the `LineupInput` mutation."""
input LineupTeamIdFkeyInput {
  """The primary key(s) for `team` for the far side of the relationship."""
  connectById: TeamTeamPkeyConnect

  """The primary key(s) for `team` for the far side of the relationship."""
  connectByGameIdAndRole: TeamTeamGameIdRoleKeyConnect

  """The primary key(s) for `team` for the far side of the relationship."""
  connectByNodeId: TeamNodeIdConnect

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteById: TeamTeamPkeyDelete

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteByGameIdAndRole: TeamTeamGameIdRoleKeyDelete

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteByNodeId: TeamNodeIdDelete

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateById: TeamOnLineupForLineupTeamIdFkeyUsingTeamPkeyUpdate

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateByGameIdAndRole: TeamOnLineupForLineupTeamIdFkeyUsingTeamGameIdRoleKeyUpdate

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateByNodeId: LineupOnLineupForLineupTeamIdFkeyNodeIdUpdate

  """
  A `TeamInput` object that will be created and connected to this object.
  """
  create: LineupTeamIdFkeyTeamCreateInput
}

"""The fields on `team` to look up the row to update."""
input TeamOnLineupForLineupTeamIdFkeyUsingTeamPkeyUpdate {
  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: updateTeamOnLineupForLineupTeamIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `team` being updated.
"""
input updateTeamOnLineupForLineupTeamIdFkeyPatch {
  id: UUID
  gameId: UUID
  role: TeamRole
  name: String
  captainId: UUID
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""Input for the nested mutation of `lineup` in the `TeamInput` mutation."""
input LineupTeamIdFkeyInverseInput {
  """
  Flag indicating whether all other `lineup` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """The primary key(s) for `lineup` for the far side of the relationship."""
  connectById: [LineupLineupPkeyConnect!]

  """The primary key(s) for `lineup` for the far side of the relationship."""
  connectByNodeId: [LineupNodeIdConnect!]

  """The primary key(s) for `lineup` for the far side of the relationship."""
  deleteById: [LineupLineupPkeyDelete!]

  """The primary key(s) for `lineup` for the far side of the relationship."""
  deleteByNodeId: [LineupNodeIdDelete!]

  """
  The primary key(s) and patch data for `lineup` for the far side of the relationship.
  """
  updateById: [LineupOnLineupForLineupTeamIdFkeyUsingLineupPkeyUpdate!]

  """
  The primary key(s) and patch data for `lineup` for the far side of the relationship.
  """
  updateByNodeId: [TeamOnLineupForLineupTeamIdFkeyNodeIdUpdate!]

  """
  A `LineupInput` object that will be created and connected to this object.
  """
  create: [LineupTeamIdFkeyLineupCreateInput!]
}

"""The fields on `lineup` to look up the row to update."""
input LineupOnLineupForLineupTeamIdFkeyUsingLineupPkeyUpdate {
  """
  An object where the defined keys will be set on the `lineup` being updated.
  """
  patch: updateLineupOnLineupForLineupTeamIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `lineup` being updated.
"""
input updateLineupOnLineupForLineupTeamIdFkeyPatch {
  id: UUID
  gameId: UUID
  team: LineupTeamIdFkeyInput
  game: LineupGameIdFkeyInput
  lineupSpots: LineupSpotLineupIdFkeyInverseInput
  lineupChangesToLineupBeforeIdUsingId: LineupChangeLineupBeforeIdFkeyInverseInput
  lineupChangesToLineupAfterIdUsingId: LineupChangeLineupAfterIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateLineupIdFkeyInverseInput
}

"""Input for the nested mutation of `game` in the `LineupInput` mutation."""
input LineupGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnLineupForLineupGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnLineupForLineupGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: LineupOnLineupForLineupGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: LineupGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnLineupForLineupGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnLineupForLineupGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnLineupForLineupGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""Input for the nested mutation of `lineup` in the `GameInput` mutation."""
input LineupGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `lineup` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """The primary key(s) for `lineup` for the far side of the relationship."""
  connectById: [LineupLineupPkeyConnect!]

  """The primary key(s) for `lineup` for the far side of the relationship."""
  connectByNodeId: [LineupNodeIdConnect!]

  """The primary key(s) for `lineup` for the far side of the relationship."""
  deleteById: [LineupLineupPkeyDelete!]

  """The primary key(s) for `lineup` for the far side of the relationship."""
  deleteByNodeId: [LineupNodeIdDelete!]

  """
  The primary key(s) and patch data for `lineup` for the far side of the relationship.
  """
  updateById: [LineupOnLineupForLineupGameIdFkeyUsingLineupPkeyUpdate!]

  """
  The primary key(s) and patch data for `lineup` for the far side of the relationship.
  """
  updateByNodeId: [GameOnLineupForLineupGameIdFkeyNodeIdUpdate!]

  """
  A `LineupInput` object that will be created and connected to this object.
  """
  create: [LineupGameIdFkeyLineupCreateInput!]
}

"""The fields on `lineup` to look up the row to update."""
input LineupOnLineupForLineupGameIdFkeyUsingLineupPkeyUpdate {
  """
  An object where the defined keys will be set on the `lineup` being updated.
  """
  patch: updateLineupOnLineupForLineupGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `lineup` being updated.
"""
input updateLineupOnLineupForLineupGameIdFkeyPatch {
  id: UUID
  teamId: UUID
  team: LineupTeamIdFkeyInput
  game: LineupGameIdFkeyInput
  lineupSpots: LineupSpotLineupIdFkeyInverseInput
  lineupChangesToLineupBeforeIdUsingId: LineupChangeLineupBeforeIdFkeyInverseInput
  lineupChangesToLineupAfterIdUsingId: LineupChangeLineupAfterIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateLineupIdFkeyInverseInput
}

"""
Input for the nested mutation of `lineupSpot` in the `LineupInput` mutation.
"""
input LineupSpotLineupIdFkeyInverseInput {
  """
  Flag indicating whether all other `lineupSpot` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  connectByLineupIdAndPlayerId: [LineupSpotLineupSpotPkeyConnect!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  connectByLineupIdAndBattingOrder: [LineupSpotLineupSpotLineupIdBattingOrderKeyConnect!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  connectByLineupIdAndPosition: [LineupSpotLineupSpotLineupIdPositionKeyConnect!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  connectByNodeId: [LineupSpotNodeIdConnect!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  deleteByLineupIdAndPlayerId: [LineupSpotLineupSpotPkeyDelete!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  deleteByLineupIdAndBattingOrder: [LineupSpotLineupSpotLineupIdBattingOrderKeyDelete!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  deleteByLineupIdAndPosition: [LineupSpotLineupSpotLineupIdPositionKeyDelete!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  deleteByNodeId: [LineupSpotNodeIdDelete!]

  """
  The primary key(s) and patch data for `lineupSpot` for the far side of the relationship.
  """
  updateByLineupIdAndPlayerId: [LineupSpotOnLineupSpotForLineupSpotLineupIdFkeyUsingLineupSpotPkeyUpdate!]

  """
  The primary key(s) and patch data for `lineupSpot` for the far side of the relationship.
  """
  updateByLineupIdAndBattingOrder: [LineupSpotOnLineupSpotForLineupSpotLineupIdFkeyUsingLineupSpotLineupIdBattingOrderKeyUpdate!]

  """
  The primary key(s) and patch data for `lineupSpot` for the far side of the relationship.
  """
  updateByLineupIdAndPosition: [LineupSpotOnLineupSpotForLineupSpotLineupIdFkeyUsingLineupSpotLineupIdPositionKeyUpdate!]

  """
  The primary key(s) and patch data for `lineupSpot` for the far side of the relationship.
  """
  updateByNodeId: [LineupOnLineupSpotForLineupSpotLineupIdFkeyNodeIdUpdate!]

  """
  A `LineupSpotInput` object that will be created and connected to this object.
  """
  create: [LineupSpotLineupIdFkeyLineupSpotCreateInput!]
}

"""The fields on `lineupSpot` to look up the row to update."""
input LineupSpotOnLineupSpotForLineupSpotLineupIdFkeyUsingLineupSpotPkeyUpdate {
  """
  An object where the defined keys will be set on the `lineupSpot` being updated.
  """
  patch: updateLineupSpotOnLineupSpotForLineupSpotLineupIdFkeyPatch!
  lineupId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `lineupSpot` being updated.
"""
input updateLineupSpotOnLineupSpotForLineupSpotLineupIdFkeyPatch {
  playerId: UUID
  battingOrder: Int
  position: FieldingPosition
  gameId: UUID
  lineup: LineupSpotLineupIdFkeyInput
  player: LineupSpotPlayerIdFkeyInput
  game: LineupSpotGameIdFkeyInput
}

"""
Input for the nested mutation of `player` in the `LineupSpotInput` mutation.
"""
input LineupSpotPlayerIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnLineupSpotForLineupSpotPlayerIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnLineupSpotForLineupSpotPlayerIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: LineupSpotOnLineupSpotForLineupSpotPlayerIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: LineupSpotPlayerIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnLineupSpotForLineupSpotPlayerIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnLineupSpotForLineupSpotPlayerIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnLineupSpotForLineupSpotPlayerIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `plateAppearance` in the `PlayerInput` mutation.
"""
input PlateAppearanceBatterIdFkeyInverseInput {
  """
  Flag indicating whether all other `plateAppearance` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  connectById: [PlateAppearancePlateAppearancePkeyConnect!]

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  connectByNodeId: [PlateAppearanceNodeIdConnect!]

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  deleteById: [PlateAppearancePlateAppearancePkeyDelete!]

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  deleteByNodeId: [PlateAppearanceNodeIdDelete!]

  """
  The primary key(s) and patch data for `plateAppearance` for the far side of the relationship.
  """
  updateById: [PlateAppearanceOnPlateAppearanceForPlateAppearanceBatterIdFkeyUsingPlateAppearancePkeyUpdate!]

  """
  The primary key(s) and patch data for `plateAppearance` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnPlateAppearanceForPlateAppearanceBatterIdFkeyNodeIdUpdate!]

  """
  A `PlateAppearanceInput` object that will be created and connected to this object.
  """
  create: [PlateAppearanceBatterIdFkeyPlateAppearanceCreateInput!]
}

"""The fields on `plateAppearance` to look up the row to connect."""
input PlateAppearancePlateAppearancePkeyConnect {
  id: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input PlateAppearanceNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `plateAppearance` to be connected.
  """
  nodeId: ID!
}

"""The fields on `plateAppearance` to look up the row to delete."""
input PlateAppearancePlateAppearancePkeyDelete {
  id: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input PlateAppearanceNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `plateAppearance` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `plateAppearance` to look up the row to update."""
input PlateAppearanceOnPlateAppearanceForPlateAppearanceBatterIdFkeyUsingPlateAppearancePkeyUpdate {
  """
  An object where the defined keys will be set on the `plateAppearance` being updated.
  """
  patch: updatePlateAppearanceOnPlateAppearanceForPlateAppearanceBatterIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `plateAppearance` being updated.
"""
input updatePlateAppearanceOnPlateAppearanceForPlateAppearanceBatterIdFkeyPatch {
  id: UUID
  type: PlateAppearanceType
  contact: ContactQuality
  fieldedBy: FieldingPosition
  runsScoredOnSacFly: Int
  routinePlay: Boolean
  gameId: UUID
  game: PlateAppearanceGameIdFkeyInput
  player: PlateAppearanceBatterIdFkeyInput
  basepathMovements: BasepathMovementPlateAppearanceIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerPlateAppearanceIdFkeyInverseInput
  gameEvents: GameEventPlateAppearanceIdFkeyInverseInput
}

"""
Input for the nested mutation of `game` in the `PlateAppearanceInput` mutation.
"""
input PlateAppearanceGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnPlateAppearanceForPlateAppearanceGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnPlateAppearanceForPlateAppearanceGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: PlateAppearanceOnPlateAppearanceForPlateAppearanceGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: PlateAppearanceGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnPlateAppearanceForPlateAppearanceGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnPlateAppearanceForPlateAppearanceGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnPlateAppearanceForPlateAppearanceGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `lineupSpot` in the `GameInput` mutation.
"""
input LineupSpotGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `lineupSpot` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  connectByLineupIdAndPlayerId: [LineupSpotLineupSpotPkeyConnect!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  connectByLineupIdAndBattingOrder: [LineupSpotLineupSpotLineupIdBattingOrderKeyConnect!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  connectByLineupIdAndPosition: [LineupSpotLineupSpotLineupIdPositionKeyConnect!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  connectByNodeId: [LineupSpotNodeIdConnect!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  deleteByLineupIdAndPlayerId: [LineupSpotLineupSpotPkeyDelete!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  deleteByLineupIdAndBattingOrder: [LineupSpotLineupSpotLineupIdBattingOrderKeyDelete!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  deleteByLineupIdAndPosition: [LineupSpotLineupSpotLineupIdPositionKeyDelete!]

  """
  The primary key(s) for `lineupSpot` for the far side of the relationship.
  """
  deleteByNodeId: [LineupSpotNodeIdDelete!]

  """
  The primary key(s) and patch data for `lineupSpot` for the far side of the relationship.
  """
  updateByLineupIdAndPlayerId: [LineupSpotOnLineupSpotForLineupSpotGameIdFkeyUsingLineupSpotPkeyUpdate!]

  """
  The primary key(s) and patch data for `lineupSpot` for the far side of the relationship.
  """
  updateByLineupIdAndBattingOrder: [LineupSpotOnLineupSpotForLineupSpotGameIdFkeyUsingLineupSpotLineupIdBattingOrderKeyUpdate!]

  """
  The primary key(s) and patch data for `lineupSpot` for the far side of the relationship.
  """
  updateByLineupIdAndPosition: [LineupSpotOnLineupSpotForLineupSpotGameIdFkeyUsingLineupSpotLineupIdPositionKeyUpdate!]

  """
  The primary key(s) and patch data for `lineupSpot` for the far side of the relationship.
  """
  updateByNodeId: [GameOnLineupSpotForLineupSpotGameIdFkeyNodeIdUpdate!]

  """
  A `LineupSpotInput` object that will be created and connected to this object.
  """
  create: [LineupSpotGameIdFkeyLineupSpotCreateInput!]
}

"""The fields on `lineupSpot` to look up the row to update."""
input LineupSpotOnLineupSpotForLineupSpotGameIdFkeyUsingLineupSpotPkeyUpdate {
  """
  An object where the defined keys will be set on the `lineupSpot` being updated.
  """
  patch: updateLineupSpotOnLineupSpotForLineupSpotGameIdFkeyPatch!
  lineupId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `lineupSpot` being updated.
"""
input updateLineupSpotOnLineupSpotForLineupSpotGameIdFkeyPatch {
  lineupId: UUID
  playerId: UUID
  battingOrder: Int
  position: FieldingPosition
  lineup: LineupSpotLineupIdFkeyInput
  player: LineupSpotPlayerIdFkeyInput
  game: LineupSpotGameIdFkeyInput
}

"""
Input for the nested mutation of `game` in the `LineupSpotInput` mutation.
"""
input LineupSpotGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnLineupSpotForLineupSpotGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnLineupSpotForLineupSpotGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: LineupSpotOnLineupSpotForLineupSpotGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: LineupSpotGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnLineupSpotForLineupSpotGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnLineupSpotForLineupSpotGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnLineupSpotForLineupSpotGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `plateAppearance` in the `GameInput` mutation.
"""
input PlateAppearanceGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `plateAppearance` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  connectById: [PlateAppearancePlateAppearancePkeyConnect!]

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  connectByNodeId: [PlateAppearanceNodeIdConnect!]

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  deleteById: [PlateAppearancePlateAppearancePkeyDelete!]

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  deleteByNodeId: [PlateAppearanceNodeIdDelete!]

  """
  The primary key(s) and patch data for `plateAppearance` for the far side of the relationship.
  """
  updateById: [PlateAppearanceOnPlateAppearanceForPlateAppearanceGameIdFkeyUsingPlateAppearancePkeyUpdate!]

  """
  The primary key(s) and patch data for `plateAppearance` for the far side of the relationship.
  """
  updateByNodeId: [GameOnPlateAppearanceForPlateAppearanceGameIdFkeyNodeIdUpdate!]

  """
  A `PlateAppearanceInput` object that will be created and connected to this object.
  """
  create: [PlateAppearanceGameIdFkeyPlateAppearanceCreateInput!]
}

"""The fields on `plateAppearance` to look up the row to update."""
input PlateAppearanceOnPlateAppearanceForPlateAppearanceGameIdFkeyUsingPlateAppearancePkeyUpdate {
  """
  An object where the defined keys will be set on the `plateAppearance` being updated.
  """
  patch: updatePlateAppearanceOnPlateAppearanceForPlateAppearanceGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `plateAppearance` being updated.
"""
input updatePlateAppearanceOnPlateAppearanceForPlateAppearanceGameIdFkeyPatch {
  id: UUID
  type: PlateAppearanceType
  contact: ContactQuality
  fieldedBy: FieldingPosition
  runsScoredOnSacFly: Int
  routinePlay: Boolean
  batterId: UUID
  game: PlateAppearanceGameIdFkeyInput
  player: PlateAppearanceBatterIdFkeyInput
  basepathMovements: BasepathMovementPlateAppearanceIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerPlateAppearanceIdFkeyInverseInput
  gameEvents: GameEventPlateAppearanceIdFkeyInverseInput
}

"""
Input for the nested mutation of `player` in the `PlateAppearanceInput` mutation.
"""
input PlateAppearanceBatterIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnPlateAppearanceForPlateAppearanceBatterIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnPlateAppearanceForPlateAppearanceBatterIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: PlateAppearanceOnPlateAppearanceForPlateAppearanceBatterIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: PlateAppearanceBatterIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnPlateAppearanceForPlateAppearanceBatterIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnPlateAppearanceForPlateAppearanceBatterIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnPlateAppearanceForPlateAppearanceBatterIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `basepathMovement` in the `PlayerInput` mutation.
"""
input BasepathMovementRunnerIdFkeyInverseInput {
  """
  Flag indicating whether all other `basepathMovement` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `basepathMovement` for the far side of the relationship.
  """
  connectByPlateAppearanceIdAndRunnerId: [BasepathMovementBasepathMovementPkeyConnect!]

  """
  The primary key(s) for `basepathMovement` for the far side of the relationship.
  """
  connectByNodeId: [BasepathMovementNodeIdConnect!]

  """
  The primary key(s) for `basepathMovement` for the far side of the relationship.
  """
  deleteByPlateAppearanceIdAndRunnerId: [BasepathMovementBasepathMovementPkeyDelete!]

  """
  The primary key(s) for `basepathMovement` for the far side of the relationship.
  """
  deleteByNodeId: [BasepathMovementNodeIdDelete!]

  """
  The primary key(s) and patch data for `basepathMovement` for the far side of the relationship.
  """
  updateByPlateAppearanceIdAndRunnerId: [BasepathMovementOnBasepathMovementForBasepathMovementRunnerIdFkeyUsingBasepathMovementPkeyUpdate!]

  """
  The primary key(s) and patch data for `basepathMovement` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnBasepathMovementForBasepathMovementRunnerIdFkeyNodeIdUpdate!]

  """
  A `BasepathMovementInput` object that will be created and connected to this object.
  """
  create: [BasepathMovementRunnerIdFkeyBasepathMovementCreateInput!]
}

"""The fields on `basepathMovement` to look up the row to connect."""
input BasepathMovementBasepathMovementPkeyConnect {
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input BasepathMovementNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `basepathMovement` to be connected.
  """
  nodeId: ID!
}

"""The fields on `basepathMovement` to look up the row to delete."""
input BasepathMovementBasepathMovementPkeyDelete {
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input BasepathMovementNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `basepathMovement` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `basepathMovement` to look up the row to update."""
input BasepathMovementOnBasepathMovementForBasepathMovementRunnerIdFkeyUsingBasepathMovementPkeyUpdate {
  """
  An object where the defined keys will be set on the `basepathMovement` being updated.
  """
  patch: updateBasepathMovementOnBasepathMovementForBasepathMovementRunnerIdFkeyPatch!
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""
An object where the defined keys will be set on the `basepathMovement` being updated.
"""
input updateBasepathMovementOnBasepathMovementForBasepathMovementRunnerIdFkeyPatch {
  plateAppearanceId: UUID
  endBase: BaseType
  wasSafe: Boolean
  gameId: UUID
  plateAppearance: BasepathMovementPlateAppearanceIdFkeyInput
  player: BasepathMovementRunnerIdFkeyInput
  game: BasepathMovementGameIdFkeyInput
}

"""
Input for the nested mutation of `plateAppearance` in the `BasepathMovementInput` mutation.
"""
input BasepathMovementPlateAppearanceIdFkeyInput {
  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  connectById: PlateAppearancePlateAppearancePkeyConnect

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  connectByNodeId: PlateAppearanceNodeIdConnect

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  deleteById: PlateAppearancePlateAppearancePkeyDelete

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  deleteByNodeId: PlateAppearanceNodeIdDelete

  """
  The primary key(s) and patch data for `plateAppearance` for the far side of the relationship.
  """
  updateById: PlateAppearanceOnBasepathMovementForBasepathMovementPlateAppearanceIdFkeyUsingPlateAppearancePkeyUpdate

  """
  The primary key(s) and patch data for `plateAppearance` for the far side of the relationship.
  """
  updateByNodeId: BasepathMovementOnBasepathMovementForBasepathMovementPlateAppearanceIdFkeyNodeIdUpdate

  """
  A `PlateAppearanceInput` object that will be created and connected to this object.
  """
  create: BasepathMovementPlateAppearanceIdFkeyPlateAppearanceCreateInput
}

"""The fields on `plateAppearance` to look up the row to update."""
input PlateAppearanceOnBasepathMovementForBasepathMovementPlateAppearanceIdFkeyUsingPlateAppearancePkeyUpdate {
  """
  An object where the defined keys will be set on the `plateAppearance` being updated.
  """
  patch: updatePlateAppearanceOnBasepathMovementForBasepathMovementPlateAppearanceIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `plateAppearance` being updated.
"""
input updatePlateAppearanceOnBasepathMovementForBasepathMovementPlateAppearanceIdFkeyPatch {
  id: UUID
  type: PlateAppearanceType
  contact: ContactQuality
  fieldedBy: FieldingPosition
  runsScoredOnSacFly: Int
  routinePlay: Boolean
  gameId: UUID
  batterId: UUID
  game: PlateAppearanceGameIdFkeyInput
  player: PlateAppearanceBatterIdFkeyInput
  basepathMovements: BasepathMovementPlateAppearanceIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerPlateAppearanceIdFkeyInverseInput
  gameEvents: GameEventPlateAppearanceIdFkeyInverseInput
}

"""
Input for the nested mutation of `basepathMovement` in the `PlateAppearanceInput` mutation.
"""
input BasepathMovementPlateAppearanceIdFkeyInverseInput {
  """
  Flag indicating whether all other `basepathMovement` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `basepathMovement` for the far side of the relationship.
  """
  connectByPlateAppearanceIdAndRunnerId: [BasepathMovementBasepathMovementPkeyConnect!]

  """
  The primary key(s) for `basepathMovement` for the far side of the relationship.
  """
  connectByNodeId: [BasepathMovementNodeIdConnect!]

  """
  The primary key(s) for `basepathMovement` for the far side of the relationship.
  """
  deleteByPlateAppearanceIdAndRunnerId: [BasepathMovementBasepathMovementPkeyDelete!]

  """
  The primary key(s) for `basepathMovement` for the far side of the relationship.
  """
  deleteByNodeId: [BasepathMovementNodeIdDelete!]

  """
  The primary key(s) and patch data for `basepathMovement` for the far side of the relationship.
  """
  updateByPlateAppearanceIdAndRunnerId: [BasepathMovementOnBasepathMovementForBasepathMovementPlateAppearanceIdFkeyUsingBasepathMovementPkeyUpdate!]

  """
  The primary key(s) and patch data for `basepathMovement` for the far side of the relationship.
  """
  updateByNodeId: [PlateAppearanceOnBasepathMovementForBasepathMovementPlateAppearanceIdFkeyNodeIdUpdate!]

  """
  A `BasepathMovementInput` object that will be created and connected to this object.
  """
  create: [BasepathMovementPlateAppearanceIdFkeyBasepathMovementCreateInput!]
}

"""The fields on `basepathMovement` to look up the row to update."""
input BasepathMovementOnBasepathMovementForBasepathMovementPlateAppearanceIdFkeyUsingBasepathMovementPkeyUpdate {
  """
  An object where the defined keys will be set on the `basepathMovement` being updated.
  """
  patch: updateBasepathMovementOnBasepathMovementForBasepathMovementPlateAppearanceIdFkeyPatch!
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""
An object where the defined keys will be set on the `basepathMovement` being updated.
"""
input updateBasepathMovementOnBasepathMovementForBasepathMovementPlateAppearanceIdFkeyPatch {
  runnerId: UUID
  endBase: BaseType
  wasSafe: Boolean
  gameId: UUID
  plateAppearance: BasepathMovementPlateAppearanceIdFkeyInput
  player: BasepathMovementRunnerIdFkeyInput
  game: BasepathMovementGameIdFkeyInput
}

"""
Input for the nested mutation of `player` in the `BasepathMovementInput` mutation.
"""
input BasepathMovementRunnerIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnBasepathMovementForBasepathMovementRunnerIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnBasepathMovementForBasepathMovementRunnerIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: BasepathMovementOnBasepathMovementForBasepathMovementRunnerIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: BasepathMovementRunnerIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnBasepathMovementForBasepathMovementRunnerIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnBasepathMovementForBasepathMovementRunnerIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnBasepathMovementForBasepathMovementRunnerIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `outOnPlayRunner` in the `PlayerInput` mutation.
"""
input OutOnPlayRunnerRunnerIdFkeyInverseInput {
  """
  Flag indicating whether all other `outOnPlayRunner` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `outOnPlayRunner` for the far side of the relationship.
  """
  connectByPlateAppearanceIdAndRunnerId: [OutOnPlayRunnerOutOnPlayRunnerPkeyConnect!]

  """
  The primary key(s) for `outOnPlayRunner` for the far side of the relationship.
  """
  connectByNodeId: [OutOnPlayRunnerNodeIdConnect!]

  """
  The primary key(s) for `outOnPlayRunner` for the far side of the relationship.
  """
  deleteByPlateAppearanceIdAndRunnerId: [OutOnPlayRunnerOutOnPlayRunnerPkeyDelete!]

  """
  The primary key(s) for `outOnPlayRunner` for the far side of the relationship.
  """
  deleteByNodeId: [OutOnPlayRunnerNodeIdDelete!]

  """
  The primary key(s) and patch data for `outOnPlayRunner` for the far side of the relationship.
  """
  updateByPlateAppearanceIdAndRunnerId: [OutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyUsingOutOnPlayRunnerPkeyUpdate!]

  """
  The primary key(s) and patch data for `outOnPlayRunner` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyNodeIdUpdate!]

  """
  A `OutOnPlayRunnerInput` object that will be created and connected to this object.
  """
  create: [OutOnPlayRunnerRunnerIdFkeyOutOnPlayRunnerCreateInput!]
}

"""The fields on `outOnPlayRunner` to look up the row to connect."""
input OutOnPlayRunnerOutOnPlayRunnerPkeyConnect {
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input OutOnPlayRunnerNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `outOnPlayRunner` to be connected.
  """
  nodeId: ID!
}

"""The fields on `outOnPlayRunner` to look up the row to delete."""
input OutOnPlayRunnerOutOnPlayRunnerPkeyDelete {
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input OutOnPlayRunnerNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `outOnPlayRunner` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `outOnPlayRunner` to look up the row to update."""
input OutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyUsingOutOnPlayRunnerPkeyUpdate {
  """
  An object where the defined keys will be set on the `outOnPlayRunner` being updated.
  """
  patch: updateOutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyPatch!
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""
An object where the defined keys will be set on the `outOnPlayRunner` being updated.
"""
input updateOutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyPatch {
  plateAppearanceId: UUID
  gameId: UUID
  plateAppearance: OutOnPlayRunnerPlateAppearanceIdFkeyInput
  player: OutOnPlayRunnerRunnerIdFkeyInput
  game: OutOnPlayRunnerGameIdFkeyInput
}

"""
Input for the nested mutation of `plateAppearance` in the `OutOnPlayRunnerInput` mutation.
"""
input OutOnPlayRunnerPlateAppearanceIdFkeyInput {
  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  connectById: PlateAppearancePlateAppearancePkeyConnect

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  connectByNodeId: PlateAppearanceNodeIdConnect

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  deleteById: PlateAppearancePlateAppearancePkeyDelete

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  deleteByNodeId: PlateAppearanceNodeIdDelete

  """
  The primary key(s) and patch data for `plateAppearance` for the far side of the relationship.
  """
  updateById: PlateAppearanceOnOutOnPlayRunnerForOutOnPlayRunnerPlateAppearanceIdFkeyUsingPlateAppearancePkeyUpdate

  """
  The primary key(s) and patch data for `plateAppearance` for the far side of the relationship.
  """
  updateByNodeId: OutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerPlateAppearanceIdFkeyNodeIdUpdate

  """
  A `PlateAppearanceInput` object that will be created and connected to this object.
  """
  create: OutOnPlayRunnerPlateAppearanceIdFkeyPlateAppearanceCreateInput
}

"""The fields on `plateAppearance` to look up the row to update."""
input PlateAppearanceOnOutOnPlayRunnerForOutOnPlayRunnerPlateAppearanceIdFkeyUsingPlateAppearancePkeyUpdate {
  """
  An object where the defined keys will be set on the `plateAppearance` being updated.
  """
  patch: updatePlateAppearanceOnOutOnPlayRunnerForOutOnPlayRunnerPlateAppearanceIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `plateAppearance` being updated.
"""
input updatePlateAppearanceOnOutOnPlayRunnerForOutOnPlayRunnerPlateAppearanceIdFkeyPatch {
  id: UUID
  type: PlateAppearanceType
  contact: ContactQuality
  fieldedBy: FieldingPosition
  runsScoredOnSacFly: Int
  routinePlay: Boolean
  gameId: UUID
  batterId: UUID
  game: PlateAppearanceGameIdFkeyInput
  player: PlateAppearanceBatterIdFkeyInput
  basepathMovements: BasepathMovementPlateAppearanceIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerPlateAppearanceIdFkeyInverseInput
  gameEvents: GameEventPlateAppearanceIdFkeyInverseInput
}

"""
Input for the nested mutation of `outOnPlayRunner` in the `PlateAppearanceInput` mutation.
"""
input OutOnPlayRunnerPlateAppearanceIdFkeyInverseInput {
  """
  Flag indicating whether all other `outOnPlayRunner` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `outOnPlayRunner` for the far side of the relationship.
  """
  connectByPlateAppearanceIdAndRunnerId: [OutOnPlayRunnerOutOnPlayRunnerPkeyConnect!]

  """
  The primary key(s) for `outOnPlayRunner` for the far side of the relationship.
  """
  connectByNodeId: [OutOnPlayRunnerNodeIdConnect!]

  """
  The primary key(s) for `outOnPlayRunner` for the far side of the relationship.
  """
  deleteByPlateAppearanceIdAndRunnerId: [OutOnPlayRunnerOutOnPlayRunnerPkeyDelete!]

  """
  The primary key(s) for `outOnPlayRunner` for the far side of the relationship.
  """
  deleteByNodeId: [OutOnPlayRunnerNodeIdDelete!]

  """
  The primary key(s) and patch data for `outOnPlayRunner` for the far side of the relationship.
  """
  updateByPlateAppearanceIdAndRunnerId: [OutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerPlateAppearanceIdFkeyUsingOutOnPlayRunnerPkeyUpdate!]

  """
  The primary key(s) and patch data for `outOnPlayRunner` for the far side of the relationship.
  """
  updateByNodeId: [PlateAppearanceOnOutOnPlayRunnerForOutOnPlayRunnerPlateAppearanceIdFkeyNodeIdUpdate!]

  """
  A `OutOnPlayRunnerInput` object that will be created and connected to this object.
  """
  create: [OutOnPlayRunnerPlateAppearanceIdFkeyOutOnPlayRunnerCreateInput!]
}

"""The fields on `outOnPlayRunner` to look up the row to update."""
input OutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerPlateAppearanceIdFkeyUsingOutOnPlayRunnerPkeyUpdate {
  """
  An object where the defined keys will be set on the `outOnPlayRunner` being updated.
  """
  patch: updateOutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerPlateAppearanceIdFkeyPatch!
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""
An object where the defined keys will be set on the `outOnPlayRunner` being updated.
"""
input updateOutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerPlateAppearanceIdFkeyPatch {
  runnerId: UUID
  gameId: UUID
  plateAppearance: OutOnPlayRunnerPlateAppearanceIdFkeyInput
  player: OutOnPlayRunnerRunnerIdFkeyInput
  game: OutOnPlayRunnerGameIdFkeyInput
}

"""
Input for the nested mutation of `player` in the `OutOnPlayRunnerInput` mutation.
"""
input OutOnPlayRunnerRunnerIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: OutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: OutOnPlayRunnerRunnerIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `stolenBaseAttempt` in the `PlayerInput` mutation.
"""
input StolenBaseAttemptRunnerIdFkeyInverseInput {
  """
  Flag indicating whether all other `stolenBaseAttempt` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `stolenBaseAttempt` for the far side of the relationship.
  """
  connectById: [StolenBaseAttemptStolenBaseAttemptPkeyConnect!]

  """
  The primary key(s) for `stolenBaseAttempt` for the far side of the relationship.
  """
  connectByNodeId: [StolenBaseAttemptNodeIdConnect!]

  """
  The primary key(s) for `stolenBaseAttempt` for the far side of the relationship.
  """
  deleteById: [StolenBaseAttemptStolenBaseAttemptPkeyDelete!]

  """
  The primary key(s) for `stolenBaseAttempt` for the far side of the relationship.
  """
  deleteByNodeId: [StolenBaseAttemptNodeIdDelete!]

  """
  The primary key(s) and patch data for `stolenBaseAttempt` for the far side of the relationship.
  """
  updateById: [StolenBaseAttemptOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyUsingStolenBaseAttemptPkeyUpdate!]

  """
  The primary key(s) and patch data for `stolenBaseAttempt` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyNodeIdUpdate!]

  """
  A `StolenBaseAttemptInput` object that will be created and connected to this object.
  """
  create: [StolenBaseAttemptRunnerIdFkeyStolenBaseAttemptCreateInput!]
}

"""The fields on `stolenBaseAttempt` to look up the row to connect."""
input StolenBaseAttemptStolenBaseAttemptPkeyConnect {
  id: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input StolenBaseAttemptNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `stolenBaseAttempt` to be connected.
  """
  nodeId: ID!
}

"""The fields on `stolenBaseAttempt` to look up the row to delete."""
input StolenBaseAttemptStolenBaseAttemptPkeyDelete {
  id: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input StolenBaseAttemptNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `stolenBaseAttempt` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `stolenBaseAttempt` to look up the row to update."""
input StolenBaseAttemptOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyUsingStolenBaseAttemptPkeyUpdate {
  """
  An object where the defined keys will be set on the `stolenBaseAttempt` being updated.
  """
  patch: updateStolenBaseAttemptOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `stolenBaseAttempt` being updated.
"""
input updateStolenBaseAttemptOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyPatch {
  id: UUID
  success: Boolean
  gameId: UUID
  player: StolenBaseAttemptRunnerIdFkeyInput
  game: StolenBaseAttemptGameIdFkeyInput
  gameEvents: GameEventStolenBaseAttemptIdFkeyInverseInput
}

"""
Input for the nested mutation of `player` in the `StolenBaseAttemptInput` mutation.
"""
input StolenBaseAttemptRunnerIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: StolenBaseAttemptOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: StolenBaseAttemptRunnerIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `gameState` in the `PlayerInput` mutation.
"""
input GameStatePlayerAtBatFkeyInverseInput {
  """
  Flag indicating whether all other `gameState` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  connectById: [GameStateGameStatePkeyConnect!]

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  connectByNodeId: [GameStateNodeIdConnect!]

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  deleteById: [GameStateGameStatePkeyDelete!]

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  deleteByNodeId: [GameStateNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameState` for the far side of the relationship.
  """
  updateById: [GameStateOnGameStateForGameStatePlayerAtBatFkeyUsingGameStatePkeyUpdate!]

  """
  The primary key(s) and patch data for `gameState` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnGameStateForGameStatePlayerAtBatFkeyNodeIdUpdate!]

  """
  A `GameStateInput` object that will be created and connected to this object.
  """
  create: [GameStatePlayerAtBatFkeyGameStateCreateInput!]
}

"""The fields on `gameState` to look up the row to connect."""
input GameStateGameStatePkeyConnect {
  id: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input GameStateNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `gameState` to be connected.
  """
  nodeId: ID!
}

"""The fields on `gameState` to look up the row to delete."""
input GameStateGameStatePkeyDelete {
  id: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input GameStateNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `gameState` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `gameState` to look up the row to update."""
input GameStateOnGameStateForGameStatePlayerAtBatFkeyUsingGameStatePkeyUpdate {
  """
  An object where the defined keys will be set on the `gameState` being updated.
  """
  patch: updateGameStateOnGameStateForGameStatePlayerAtBatFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameState` being updated.
"""
input updateGameStateOnGameStateForGameStatePlayerAtBatFkeyPatch {
  id: UUID
  gameId: UUID
  gameStateIndex: Int
  inning: Int
  halfInning: HalfInning
  outs: Int
  score: [Int]
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""
Input for the nested mutation of `game` in the `GameStateInput` mutation.
"""
input GameStateGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnGameStateForGameStateGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnGameStateForGameStateGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: GameStateOnGameStateForGameStateGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: GameStateGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnGameStateForGameStateGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnGameStateForGameStateGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnGameStateForGameStateGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `basepathMovement` in the `GameInput` mutation.
"""
input BasepathMovementGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `basepathMovement` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `basepathMovement` for the far side of the relationship.
  """
  connectByPlateAppearanceIdAndRunnerId: [BasepathMovementBasepathMovementPkeyConnect!]

  """
  The primary key(s) for `basepathMovement` for the far side of the relationship.
  """
  connectByNodeId: [BasepathMovementNodeIdConnect!]

  """
  The primary key(s) for `basepathMovement` for the far side of the relationship.
  """
  deleteByPlateAppearanceIdAndRunnerId: [BasepathMovementBasepathMovementPkeyDelete!]

  """
  The primary key(s) for `basepathMovement` for the far side of the relationship.
  """
  deleteByNodeId: [BasepathMovementNodeIdDelete!]

  """
  The primary key(s) and patch data for `basepathMovement` for the far side of the relationship.
  """
  updateByPlateAppearanceIdAndRunnerId: [BasepathMovementOnBasepathMovementForBasepathMovementGameIdFkeyUsingBasepathMovementPkeyUpdate!]

  """
  The primary key(s) and patch data for `basepathMovement` for the far side of the relationship.
  """
  updateByNodeId: [GameOnBasepathMovementForBasepathMovementGameIdFkeyNodeIdUpdate!]

  """
  A `BasepathMovementInput` object that will be created and connected to this object.
  """
  create: [BasepathMovementGameIdFkeyBasepathMovementCreateInput!]
}

"""The fields on `basepathMovement` to look up the row to update."""
input BasepathMovementOnBasepathMovementForBasepathMovementGameIdFkeyUsingBasepathMovementPkeyUpdate {
  """
  An object where the defined keys will be set on the `basepathMovement` being updated.
  """
  patch: updateBasepathMovementOnBasepathMovementForBasepathMovementGameIdFkeyPatch!
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""
An object where the defined keys will be set on the `basepathMovement` being updated.
"""
input updateBasepathMovementOnBasepathMovementForBasepathMovementGameIdFkeyPatch {
  plateAppearanceId: UUID
  runnerId: UUID
  endBase: BaseType
  wasSafe: Boolean
  plateAppearance: BasepathMovementPlateAppearanceIdFkeyInput
  player: BasepathMovementRunnerIdFkeyInput
  game: BasepathMovementGameIdFkeyInput
}

"""
Input for the nested mutation of `game` in the `BasepathMovementInput` mutation.
"""
input BasepathMovementGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnBasepathMovementForBasepathMovementGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnBasepathMovementForBasepathMovementGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: BasepathMovementOnBasepathMovementForBasepathMovementGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: BasepathMovementGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnBasepathMovementForBasepathMovementGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnBasepathMovementForBasepathMovementGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnBasepathMovementForBasepathMovementGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `outOnPlayRunner` in the `GameInput` mutation.
"""
input OutOnPlayRunnerGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `outOnPlayRunner` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `outOnPlayRunner` for the far side of the relationship.
  """
  connectByPlateAppearanceIdAndRunnerId: [OutOnPlayRunnerOutOnPlayRunnerPkeyConnect!]

  """
  The primary key(s) for `outOnPlayRunner` for the far side of the relationship.
  """
  connectByNodeId: [OutOnPlayRunnerNodeIdConnect!]

  """
  The primary key(s) for `outOnPlayRunner` for the far side of the relationship.
  """
  deleteByPlateAppearanceIdAndRunnerId: [OutOnPlayRunnerOutOnPlayRunnerPkeyDelete!]

  """
  The primary key(s) for `outOnPlayRunner` for the far side of the relationship.
  """
  deleteByNodeId: [OutOnPlayRunnerNodeIdDelete!]

  """
  The primary key(s) and patch data for `outOnPlayRunner` for the far side of the relationship.
  """
  updateByPlateAppearanceIdAndRunnerId: [OutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyUsingOutOnPlayRunnerPkeyUpdate!]

  """
  The primary key(s) and patch data for `outOnPlayRunner` for the far side of the relationship.
  """
  updateByNodeId: [GameOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyNodeIdUpdate!]

  """
  A `OutOnPlayRunnerInput` object that will be created and connected to this object.
  """
  create: [OutOnPlayRunnerGameIdFkeyOutOnPlayRunnerCreateInput!]
}

"""The fields on `outOnPlayRunner` to look up the row to update."""
input OutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyUsingOutOnPlayRunnerPkeyUpdate {
  """
  An object where the defined keys will be set on the `outOnPlayRunner` being updated.
  """
  patch: updateOutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyPatch!
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""
An object where the defined keys will be set on the `outOnPlayRunner` being updated.
"""
input updateOutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyPatch {
  plateAppearanceId: UUID
  runnerId: UUID
  plateAppearance: OutOnPlayRunnerPlateAppearanceIdFkeyInput
  player: OutOnPlayRunnerRunnerIdFkeyInput
  game: OutOnPlayRunnerGameIdFkeyInput
}

"""
Input for the nested mutation of `game` in the `OutOnPlayRunnerInput` mutation.
"""
input OutOnPlayRunnerGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: OutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: OutOnPlayRunnerGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `stolenBaseAttempt` in the `GameInput` mutation.
"""
input StolenBaseAttemptGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `stolenBaseAttempt` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `stolenBaseAttempt` for the far side of the relationship.
  """
  connectById: [StolenBaseAttemptStolenBaseAttemptPkeyConnect!]

  """
  The primary key(s) for `stolenBaseAttempt` for the far side of the relationship.
  """
  connectByNodeId: [StolenBaseAttemptNodeIdConnect!]

  """
  The primary key(s) for `stolenBaseAttempt` for the far side of the relationship.
  """
  deleteById: [StolenBaseAttemptStolenBaseAttemptPkeyDelete!]

  """
  The primary key(s) for `stolenBaseAttempt` for the far side of the relationship.
  """
  deleteByNodeId: [StolenBaseAttemptNodeIdDelete!]

  """
  The primary key(s) and patch data for `stolenBaseAttempt` for the far side of the relationship.
  """
  updateById: [StolenBaseAttemptOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyUsingStolenBaseAttemptPkeyUpdate!]

  """
  The primary key(s) and patch data for `stolenBaseAttempt` for the far side of the relationship.
  """
  updateByNodeId: [GameOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyNodeIdUpdate!]

  """
  A `StolenBaseAttemptInput` object that will be created and connected to this object.
  """
  create: [StolenBaseAttemptGameIdFkeyStolenBaseAttemptCreateInput!]
}

"""The fields on `stolenBaseAttempt` to look up the row to update."""
input StolenBaseAttemptOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyUsingStolenBaseAttemptPkeyUpdate {
  """
  An object where the defined keys will be set on the `stolenBaseAttempt` being updated.
  """
  patch: updateStolenBaseAttemptOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `stolenBaseAttempt` being updated.
"""
input updateStolenBaseAttemptOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyPatch {
  id: UUID
  runnerId: UUID
  success: Boolean
  player: StolenBaseAttemptRunnerIdFkeyInput
  game: StolenBaseAttemptGameIdFkeyInput
  gameEvents: GameEventStolenBaseAttemptIdFkeyInverseInput
}

"""
Input for the nested mutation of `game` in the `StolenBaseAttemptInput` mutation.
"""
input StolenBaseAttemptGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: StolenBaseAttemptOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: StolenBaseAttemptGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `lineupChange` in the `GameInput` mutation.
"""
input LineupChangeGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `lineupChange` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  connectById: [LineupChangeLineupChangePkeyConnect!]

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  connectByNodeId: [LineupChangeNodeIdConnect!]

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  deleteById: [LineupChangeLineupChangePkeyDelete!]

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  deleteByNodeId: [LineupChangeNodeIdDelete!]

  """
  The primary key(s) and patch data for `lineupChange` for the far side of the relationship.
  """
  updateById: [LineupChangeOnLineupChangeForLineupChangeGameIdFkeyUsingLineupChangePkeyUpdate!]

  """
  The primary key(s) and patch data for `lineupChange` for the far side of the relationship.
  """
  updateByNodeId: [GameOnLineupChangeForLineupChangeGameIdFkeyNodeIdUpdate!]

  """
  A `LineupChangeInput` object that will be created and connected to this object.
  """
  create: [LineupChangeGameIdFkeyLineupChangeCreateInput!]
}

"""The fields on `lineupChange` to look up the row to connect."""
input LineupChangeLineupChangePkeyConnect {
  id: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input LineupChangeNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `lineupChange` to be connected.
  """
  nodeId: ID!
}

"""The fields on `lineupChange` to look up the row to delete."""
input LineupChangeLineupChangePkeyDelete {
  id: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input LineupChangeNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `lineupChange` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `lineupChange` to look up the row to update."""
input LineupChangeOnLineupChangeForLineupChangeGameIdFkeyUsingLineupChangePkeyUpdate {
  """
  An object where the defined keys will be set on the `lineupChange` being updated.
  """
  patch: updateLineupChangeOnLineupChangeForLineupChangeGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `lineupChange` being updated.
"""
input updateLineupChangeOnLineupChangeForLineupChangeGameIdFkeyPatch {
  id: UUID
  lineupBeforeId: UUID
  lineupAfterId: UUID
  lineup: LineupChangeLineupAfterIdFkeyInput
  game: LineupChangeGameIdFkeyInput
  gameEvents: GameEventLineupChangeIdFkeyInverseInput
}

"""
Input for the nested mutation of `lineup` in the `LineupChangeInput` mutation.
"""
input LineupChangeLineupAfterIdFkeyInput {
  """The primary key(s) for `lineup` for the far side of the relationship."""
  connectById: LineupLineupPkeyConnect

  """The primary key(s) for `lineup` for the far side of the relationship."""
  connectByNodeId: LineupNodeIdConnect

  """The primary key(s) for `lineup` for the far side of the relationship."""
  deleteById: LineupLineupPkeyDelete

  """The primary key(s) for `lineup` for the far side of the relationship."""
  deleteByNodeId: LineupNodeIdDelete

  """
  The primary key(s) and patch data for `lineup` for the far side of the relationship.
  """
  updateById: LineupOnLineupChangeForLineupChangeLineupAfterIdFkeyUsingLineupPkeyUpdate

  """
  The primary key(s) and patch data for `lineup` for the far side of the relationship.
  """
  updateByNodeId: LineupChangeOnLineupChangeForLineupChangeLineupAfterIdFkeyNodeIdUpdate

  """
  A `LineupInput` object that will be created and connected to this object.
  """
  create: LineupChangeLineupAfterIdFkeyLineupCreateInput
}

"""The fields on `lineup` to look up the row to update."""
input LineupOnLineupChangeForLineupChangeLineupAfterIdFkeyUsingLineupPkeyUpdate {
  """
  An object where the defined keys will be set on the `lineup` being updated.
  """
  patch: updateLineupOnLineupChangeForLineupChangeLineupAfterIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `lineup` being updated.
"""
input updateLineupOnLineupChangeForLineupChangeLineupAfterIdFkeyPatch {
  id: UUID
  teamId: UUID
  gameId: UUID
  team: LineupTeamIdFkeyInput
  game: LineupGameIdFkeyInput
  lineupSpots: LineupSpotLineupIdFkeyInverseInput
  lineupChangesToLineupBeforeIdUsingId: LineupChangeLineupBeforeIdFkeyInverseInput
  lineupChangesToLineupAfterIdUsingId: LineupChangeLineupAfterIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateLineupIdFkeyInverseInput
}

"""
Input for the nested mutation of `lineupChange` in the `LineupInput` mutation.
"""
input LineupChangeLineupBeforeIdFkeyInverseInput {
  """
  Flag indicating whether all other `lineupChange` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  connectById: [LineupChangeLineupChangePkeyConnect!]

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  connectByNodeId: [LineupChangeNodeIdConnect!]

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  deleteById: [LineupChangeLineupChangePkeyDelete!]

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  deleteByNodeId: [LineupChangeNodeIdDelete!]

  """
  The primary key(s) and patch data for `lineupChange` for the far side of the relationship.
  """
  updateById: [LineupChangeOnLineupChangeForLineupChangeLineupBeforeIdFkeyUsingLineupChangePkeyUpdate!]

  """
  The primary key(s) and patch data for `lineupChange` for the far side of the relationship.
  """
  updateByNodeId: [LineupOnLineupChangeForLineupChangeLineupBeforeIdFkeyNodeIdUpdate!]

  """
  A `LineupChangeInput` object that will be created and connected to this object.
  """
  create: [LineupChangeLineupBeforeIdFkeyLineupChangeCreateInput!]
}

"""The fields on `lineupChange` to look up the row to update."""
input LineupChangeOnLineupChangeForLineupChangeLineupBeforeIdFkeyUsingLineupChangePkeyUpdate {
  """
  An object where the defined keys will be set on the `lineupChange` being updated.
  """
  patch: updateLineupChangeOnLineupChangeForLineupChangeLineupBeforeIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `lineupChange` being updated.
"""
input updateLineupChangeOnLineupChangeForLineupChangeLineupBeforeIdFkeyPatch {
  id: UUID
  lineupAfterId: UUID
  gameId: UUID
  lineup: LineupChangeLineupAfterIdFkeyInput
  game: LineupChangeGameIdFkeyInput
  gameEvents: GameEventLineupChangeIdFkeyInverseInput
}

"""
Input for the nested mutation of `game` in the `LineupChangeInput` mutation.
"""
input LineupChangeGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnLineupChangeForLineupChangeGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnLineupChangeForLineupChangeGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: LineupChangeOnLineupChangeForLineupChangeGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: LineupChangeGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnLineupChangeForLineupChangeGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnLineupChangeForLineupChangeGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnLineupChangeForLineupChangeGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `gameEvent` in the `GameInput` mutation.
"""
input GameEventGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `gameEvent` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectById: [GameEventGameEventPkeyConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectByNodeId: [GameEventNodeIdConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteById: [GameEventGameEventPkeyDelete!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteByNodeId: [GameEventNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateById: [GameEventOnGameEventForGameEventGameIdFkeyUsingGameEventPkeyUpdate!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateByNodeId: [GameOnGameEventForGameEventGameIdFkeyNodeIdUpdate!]

  """
  A `GameEventInput` object that will be created and connected to this object.
  """
  create: [GameEventGameIdFkeyGameEventCreateInput!]
}

"""The fields on `gameEvent` to look up the row to connect."""
input GameEventGameEventPkeyConnect {
  id: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input GameEventNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `gameEvent` to be connected.
  """
  nodeId: ID!
}

"""The fields on `gameEvent` to look up the row to delete."""
input GameEventGameEventPkeyDelete {
  id: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input GameEventNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `gameEvent` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `gameEvent` to look up the row to update."""
input GameEventOnGameEventForGameEventGameIdFkeyUsingGameEventPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: updateGameEventOnGameEventForGameEventGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameEvent` being updated.
"""
input updateGameEventOnGameEventForGameEventGameIdFkeyPatch {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""
Input for the nested mutation of `plateAppearance` in the `GameEventInput` mutation.
"""
input GameEventPlateAppearanceIdFkeyInput {
  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  connectById: PlateAppearancePlateAppearancePkeyConnect

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  connectByNodeId: PlateAppearanceNodeIdConnect

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  deleteById: PlateAppearancePlateAppearancePkeyDelete

  """
  The primary key(s) for `plateAppearance` for the far side of the relationship.
  """
  deleteByNodeId: PlateAppearanceNodeIdDelete

  """
  The primary key(s) and patch data for `plateAppearance` for the far side of the relationship.
  """
  updateById: PlateAppearanceOnGameEventForGameEventPlateAppearanceIdFkeyUsingPlateAppearancePkeyUpdate

  """
  The primary key(s) and patch data for `plateAppearance` for the far side of the relationship.
  """
  updateByNodeId: GameEventOnGameEventForGameEventPlateAppearanceIdFkeyNodeIdUpdate

  """
  A `PlateAppearanceInput` object that will be created and connected to this object.
  """
  create: GameEventPlateAppearanceIdFkeyPlateAppearanceCreateInput
}

"""The fields on `plateAppearance` to look up the row to update."""
input PlateAppearanceOnGameEventForGameEventPlateAppearanceIdFkeyUsingPlateAppearancePkeyUpdate {
  """
  An object where the defined keys will be set on the `plateAppearance` being updated.
  """
  patch: updatePlateAppearanceOnGameEventForGameEventPlateAppearanceIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `plateAppearance` being updated.
"""
input updatePlateAppearanceOnGameEventForGameEventPlateAppearanceIdFkeyPatch {
  id: UUID
  type: PlateAppearanceType
  contact: ContactQuality
  fieldedBy: FieldingPosition
  runsScoredOnSacFly: Int
  routinePlay: Boolean
  gameId: UUID
  batterId: UUID
  game: PlateAppearanceGameIdFkeyInput
  player: PlateAppearanceBatterIdFkeyInput
  basepathMovements: BasepathMovementPlateAppearanceIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerPlateAppearanceIdFkeyInverseInput
  gameEvents: GameEventPlateAppearanceIdFkeyInverseInput
}

"""
Input for the nested mutation of `gameEvent` in the `PlateAppearanceInput` mutation.
"""
input GameEventPlateAppearanceIdFkeyInverseInput {
  """
  Flag indicating whether all other `gameEvent` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectById: [GameEventGameEventPkeyConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectByNodeId: [GameEventNodeIdConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteById: [GameEventGameEventPkeyDelete!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteByNodeId: [GameEventNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateById: [GameEventOnGameEventForGameEventPlateAppearanceIdFkeyUsingGameEventPkeyUpdate!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateByNodeId: [PlateAppearanceOnGameEventForGameEventPlateAppearanceIdFkeyNodeIdUpdate!]

  """
  A `GameEventInput` object that will be created and connected to this object.
  """
  create: [GameEventPlateAppearanceIdFkeyGameEventCreateInput!]
}

"""The fields on `gameEvent` to look up the row to update."""
input GameEventOnGameEventForGameEventPlateAppearanceIdFkeyUsingGameEventPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: updateGameEventOnGameEventForGameEventPlateAppearanceIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameEvent` being updated.
"""
input updateGameEventOnGameEventForGameEventPlateAppearanceIdFkeyPatch {
  id: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""
Input for the nested mutation of `stolenBaseAttempt` in the `GameEventInput` mutation.
"""
input GameEventStolenBaseAttemptIdFkeyInput {
  """
  The primary key(s) for `stolenBaseAttempt` for the far side of the relationship.
  """
  connectById: StolenBaseAttemptStolenBaseAttemptPkeyConnect

  """
  The primary key(s) for `stolenBaseAttempt` for the far side of the relationship.
  """
  connectByNodeId: StolenBaseAttemptNodeIdConnect

  """
  The primary key(s) for `stolenBaseAttempt` for the far side of the relationship.
  """
  deleteById: StolenBaseAttemptStolenBaseAttemptPkeyDelete

  """
  The primary key(s) for `stolenBaseAttempt` for the far side of the relationship.
  """
  deleteByNodeId: StolenBaseAttemptNodeIdDelete

  """
  The primary key(s) and patch data for `stolenBaseAttempt` for the far side of the relationship.
  """
  updateById: StolenBaseAttemptOnGameEventForGameEventStolenBaseAttemptIdFkeyUsingStolenBaseAttemptPkeyUpdate

  """
  The primary key(s) and patch data for `stolenBaseAttempt` for the far side of the relationship.
  """
  updateByNodeId: GameEventOnGameEventForGameEventStolenBaseAttemptIdFkeyNodeIdUpdate

  """
  A `StolenBaseAttemptInput` object that will be created and connected to this object.
  """
  create: GameEventStolenBaseAttemptIdFkeyStolenBaseAttemptCreateInput
}

"""The fields on `stolenBaseAttempt` to look up the row to update."""
input StolenBaseAttemptOnGameEventForGameEventStolenBaseAttemptIdFkeyUsingStolenBaseAttemptPkeyUpdate {
  """
  An object where the defined keys will be set on the `stolenBaseAttempt` being updated.
  """
  patch: updateStolenBaseAttemptOnGameEventForGameEventStolenBaseAttemptIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `stolenBaseAttempt` being updated.
"""
input updateStolenBaseAttemptOnGameEventForGameEventStolenBaseAttemptIdFkeyPatch {
  id: UUID
  runnerId: UUID
  success: Boolean
  gameId: UUID
  player: StolenBaseAttemptRunnerIdFkeyInput
  game: StolenBaseAttemptGameIdFkeyInput
  gameEvents: GameEventStolenBaseAttemptIdFkeyInverseInput
}

"""
Input for the nested mutation of `gameEvent` in the `StolenBaseAttemptInput` mutation.
"""
input GameEventStolenBaseAttemptIdFkeyInverseInput {
  """
  Flag indicating whether all other `gameEvent` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectById: [GameEventGameEventPkeyConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectByNodeId: [GameEventNodeIdConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteById: [GameEventGameEventPkeyDelete!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteByNodeId: [GameEventNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateById: [GameEventOnGameEventForGameEventStolenBaseAttemptIdFkeyUsingGameEventPkeyUpdate!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateByNodeId: [StolenBaseAttemptOnGameEventForGameEventStolenBaseAttemptIdFkeyNodeIdUpdate!]

  """
  A `GameEventInput` object that will be created and connected to this object.
  """
  create: [GameEventStolenBaseAttemptIdFkeyGameEventCreateInput!]
}

"""The fields on `gameEvent` to look up the row to update."""
input GameEventOnGameEventForGameEventStolenBaseAttemptIdFkeyUsingGameEventPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: updateGameEventOnGameEventForGameEventStolenBaseAttemptIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameEvent` being updated.
"""
input updateGameEventOnGameEventForGameEventStolenBaseAttemptIdFkeyPatch {
  id: UUID
  plateAppearanceId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""
Input for the nested mutation of `lineupChange` in the `GameEventInput` mutation.
"""
input GameEventLineupChangeIdFkeyInput {
  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  connectById: LineupChangeLineupChangePkeyConnect

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  connectByNodeId: LineupChangeNodeIdConnect

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  deleteById: LineupChangeLineupChangePkeyDelete

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  deleteByNodeId: LineupChangeNodeIdDelete

  """
  The primary key(s) and patch data for `lineupChange` for the far side of the relationship.
  """
  updateById: LineupChangeOnGameEventForGameEventLineupChangeIdFkeyUsingLineupChangePkeyUpdate

  """
  The primary key(s) and patch data for `lineupChange` for the far side of the relationship.
  """
  updateByNodeId: GameEventOnGameEventForGameEventLineupChangeIdFkeyNodeIdUpdate

  """
  A `LineupChangeInput` object that will be created and connected to this object.
  """
  create: GameEventLineupChangeIdFkeyLineupChangeCreateInput
}

"""The fields on `lineupChange` to look up the row to update."""
input LineupChangeOnGameEventForGameEventLineupChangeIdFkeyUsingLineupChangePkeyUpdate {
  """
  An object where the defined keys will be set on the `lineupChange` being updated.
  """
  patch: updateLineupChangeOnGameEventForGameEventLineupChangeIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `lineupChange` being updated.
"""
input updateLineupChangeOnGameEventForGameEventLineupChangeIdFkeyPatch {
  id: UUID
  lineupBeforeId: UUID
  lineupAfterId: UUID
  gameId: UUID
  lineup: LineupChangeLineupAfterIdFkeyInput
  game: LineupChangeGameIdFkeyInput
  gameEvents: GameEventLineupChangeIdFkeyInverseInput
}

"""
Input for the nested mutation of `gameEvent` in the `LineupChangeInput` mutation.
"""
input GameEventLineupChangeIdFkeyInverseInput {
  """
  Flag indicating whether all other `gameEvent` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectById: [GameEventGameEventPkeyConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectByNodeId: [GameEventNodeIdConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteById: [GameEventGameEventPkeyDelete!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteByNodeId: [GameEventNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateById: [GameEventOnGameEventForGameEventLineupChangeIdFkeyUsingGameEventPkeyUpdate!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateByNodeId: [LineupChangeOnGameEventForGameEventLineupChangeIdFkeyNodeIdUpdate!]

  """
  A `GameEventInput` object that will be created and connected to this object.
  """
  create: [GameEventLineupChangeIdFkeyGameEventCreateInput!]
}

"""The fields on `gameEvent` to look up the row to update."""
input GameEventOnGameEventForGameEventLineupChangeIdFkeyUsingGameEventPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: updateGameEventOnGameEventForGameEventLineupChangeIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameEvent` being updated.
"""
input updateGameEventOnGameEventForGameEventLineupChangeIdFkeyPatch {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""
Input for the nested mutation of `soloModeOpponentInning` in the `GameEventInput` mutation.
"""
input GameEventSoloModeOpponentInningIdFkeyInput {
  """
  The primary key(s) for `soloModeOpponentInning` for the far side of the relationship.
  """
  connectById: SoloModeOpponentInningSoloModeOpponentInningPkeyConnect

  """
  The primary key(s) for `soloModeOpponentInning` for the far side of the relationship.
  """
  connectByNodeId: SoloModeOpponentInningNodeIdConnect

  """
  The primary key(s) for `soloModeOpponentInning` for the far side of the relationship.
  """
  deleteById: SoloModeOpponentInningSoloModeOpponentInningPkeyDelete

  """
  The primary key(s) for `soloModeOpponentInning` for the far side of the relationship.
  """
  deleteByNodeId: SoloModeOpponentInningNodeIdDelete

  """
  The primary key(s) and patch data for `soloModeOpponentInning` for the far side of the relationship.
  """
  updateById: SoloModeOpponentInningOnGameEventForGameEventSoloModeOpponentInningIdFkeyUsingSoloModeOpponentInningPkeyUpdate

  """
  The primary key(s) and patch data for `soloModeOpponentInning` for the far side of the relationship.
  """
  updateByNodeId: GameEventOnGameEventForGameEventSoloModeOpponentInningIdFkeyNodeIdUpdate

  """
  A `SoloModeOpponentInningInput` object that will be created and connected to this object.
  """
  create: GameEventSoloModeOpponentInningIdFkeySoloModeOpponentInningCreateInput
}

"""The fields on `soloModeOpponentInning` to look up the row to connect."""
input SoloModeOpponentInningSoloModeOpponentInningPkeyConnect {
  id: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input SoloModeOpponentInningNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `soloModeOpponentInning` to be connected.
  """
  nodeId: ID!
}

"""The fields on `soloModeOpponentInning` to look up the row to delete."""
input SoloModeOpponentInningSoloModeOpponentInningPkeyDelete {
  id: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input SoloModeOpponentInningNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `soloModeOpponentInning` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `soloModeOpponentInning` to look up the row to update."""
input SoloModeOpponentInningOnGameEventForGameEventSoloModeOpponentInningIdFkeyUsingSoloModeOpponentInningPkeyUpdate {
  """
  An object where the defined keys will be set on the `soloModeOpponentInning` being updated.
  """
  patch: updateSoloModeOpponentInningOnGameEventForGameEventSoloModeOpponentInningIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `soloModeOpponentInning` being updated.
"""
input updateSoloModeOpponentInningOnGameEventForGameEventSoloModeOpponentInningIdFkeyPatch {
  id: UUID
  runsScored: Int
  gameId: UUID
  game: SoloModeOpponentInningGameIdFkeyInput
  gameEvents: GameEventSoloModeOpponentInningIdFkeyInverseInput
}

"""
Input for the nested mutation of `game` in the `SoloModeOpponentInningInput` mutation.
"""
input SoloModeOpponentInningGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: SoloModeOpponentInningOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: SoloModeOpponentInningGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `gameState` in the `GameInput` mutation.
"""
input GameStateGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `gameState` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  connectById: [GameStateGameStatePkeyConnect!]

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  connectByNodeId: [GameStateNodeIdConnect!]

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  deleteById: [GameStateGameStatePkeyDelete!]

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  deleteByNodeId: [GameStateNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameState` for the far side of the relationship.
  """
  updateById: [GameStateOnGameStateForGameStateGameIdFkeyUsingGameStatePkeyUpdate!]

  """
  The primary key(s) and patch data for `gameState` for the far side of the relationship.
  """
  updateByNodeId: [GameOnGameStateForGameStateGameIdFkeyNodeIdUpdate!]

  """
  A `GameStateInput` object that will be created and connected to this object.
  """
  create: [GameStateGameIdFkeyGameStateCreateInput!]
}

"""The fields on `gameState` to look up the row to update."""
input GameStateOnGameStateForGameStateGameIdFkeyUsingGameStatePkeyUpdate {
  """
  An object where the defined keys will be set on the `gameState` being updated.
  """
  patch: updateGameStateOnGameStateForGameStateGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameState` being updated.
"""
input updateGameStateOnGameStateForGameStateGameIdFkeyPatch {
  id: UUID
  gameStateIndex: Int
  playerAtBat: UUID
  inning: Int
  halfInning: HalfInning
  outs: Int
  score: [Int]
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""
Input for the nested mutation of `player` in the `GameStateInput` mutation.
"""
input GameStatePlayerAtBatFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnGameStateForGameStatePlayerAtBatFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnGameStateForGameStatePlayerAtBatFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: GameStateOnGameStateForGameStatePlayerAtBatFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: GameStatePlayerAtBatFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnGameStateForGameStatePlayerAtBatFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnGameStateForGameStatePlayerAtBatFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnGameStateForGameStatePlayerAtBatFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `baseRunner` in the `PlayerInput` mutation.
"""
input BaseRunnerRunnerIdFkeyInverseInput {
  """
  Flag indicating whether all other `baseRunner` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `baseRunner` for the far side of the relationship.
  """
  connectByGameStateIdAndRunnerId: [BaseRunnerBaseRunnerPkeyConnect!]

  """
  The primary key(s) for `baseRunner` for the far side of the relationship.
  """
  connectByNodeId: [BaseRunnerNodeIdConnect!]

  """
  The primary key(s) for `baseRunner` for the far side of the relationship.
  """
  deleteByGameStateIdAndRunnerId: [BaseRunnerBaseRunnerPkeyDelete!]

  """
  The primary key(s) for `baseRunner` for the far side of the relationship.
  """
  deleteByNodeId: [BaseRunnerNodeIdDelete!]

  """
  The primary key(s) and patch data for `baseRunner` for the far side of the relationship.
  """
  updateByGameStateIdAndRunnerId: [BaseRunnerOnBaseRunnerForBaseRunnerRunnerIdFkeyUsingBaseRunnerPkeyUpdate!]

  """
  The primary key(s) and patch data for `baseRunner` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnBaseRunnerForBaseRunnerRunnerIdFkeyNodeIdUpdate!]

  """
  A `BaseRunnerInput` object that will be created and connected to this object.
  """
  create: [BaseRunnerRunnerIdFkeyBaseRunnerCreateInput!]
}

"""The fields on `baseRunner` to look up the row to connect."""
input BaseRunnerBaseRunnerPkeyConnect {
  gameStateId: UUID!
  runnerId: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input BaseRunnerNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `baseRunner` to be connected.
  """
  nodeId: ID!
}

"""The fields on `baseRunner` to look up the row to delete."""
input BaseRunnerBaseRunnerPkeyDelete {
  gameStateId: UUID!
  runnerId: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input BaseRunnerNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `baseRunner` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `baseRunner` to look up the row to update."""
input BaseRunnerOnBaseRunnerForBaseRunnerRunnerIdFkeyUsingBaseRunnerPkeyUpdate {
  """
  An object where the defined keys will be set on the `baseRunner` being updated.
  """
  patch: updateBaseRunnerOnBaseRunnerForBaseRunnerRunnerIdFkeyPatch!
  gameStateId: UUID!
  runnerId: UUID!
}

"""
An object where the defined keys will be set on the `baseRunner` being updated.
"""
input updateBaseRunnerOnBaseRunnerForBaseRunnerRunnerIdFkeyPatch {
  gameStateId: UUID
  base: BaseType
  gameId: UUID
  gameState: BaseRunnerGameStateIdFkeyInput
  player: BaseRunnerRunnerIdFkeyInput
  game: BaseRunnerGameIdFkeyInput
}

"""
Input for the nested mutation of `gameState` in the `BaseRunnerInput` mutation.
"""
input BaseRunnerGameStateIdFkeyInput {
  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  connectById: GameStateGameStatePkeyConnect

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  connectByNodeId: GameStateNodeIdConnect

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  deleteById: GameStateGameStatePkeyDelete

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  deleteByNodeId: GameStateNodeIdDelete

  """
  The primary key(s) and patch data for `gameState` for the far side of the relationship.
  """
  updateById: GameStateOnBaseRunnerForBaseRunnerGameStateIdFkeyUsingGameStatePkeyUpdate

  """
  The primary key(s) and patch data for `gameState` for the far side of the relationship.
  """
  updateByNodeId: BaseRunnerOnBaseRunnerForBaseRunnerGameStateIdFkeyNodeIdUpdate

  """
  A `GameStateInput` object that will be created and connected to this object.
  """
  create: BaseRunnerGameStateIdFkeyGameStateCreateInput
}

"""The fields on `gameState` to look up the row to update."""
input GameStateOnBaseRunnerForBaseRunnerGameStateIdFkeyUsingGameStatePkeyUpdate {
  """
  An object where the defined keys will be set on the `gameState` being updated.
  """
  patch: updateGameStateOnBaseRunnerForBaseRunnerGameStateIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameState` being updated.
"""
input updateGameStateOnBaseRunnerForBaseRunnerGameStateIdFkeyPatch {
  id: UUID
  gameId: UUID
  gameStateIndex: Int
  playerAtBat: UUID
  inning: Int
  halfInning: HalfInning
  outs: Int
  score: [Int]
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""
Input for the nested mutation of `baseRunner` in the `GameStateInput` mutation.
"""
input BaseRunnerGameStateIdFkeyInverseInput {
  """
  Flag indicating whether all other `baseRunner` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `baseRunner` for the far side of the relationship.
  """
  connectByGameStateIdAndRunnerId: [BaseRunnerBaseRunnerPkeyConnect!]

  """
  The primary key(s) for `baseRunner` for the far side of the relationship.
  """
  connectByNodeId: [BaseRunnerNodeIdConnect!]

  """
  The primary key(s) for `baseRunner` for the far side of the relationship.
  """
  deleteByGameStateIdAndRunnerId: [BaseRunnerBaseRunnerPkeyDelete!]

  """
  The primary key(s) for `baseRunner` for the far side of the relationship.
  """
  deleteByNodeId: [BaseRunnerNodeIdDelete!]

  """
  The primary key(s) and patch data for `baseRunner` for the far side of the relationship.
  """
  updateByGameStateIdAndRunnerId: [BaseRunnerOnBaseRunnerForBaseRunnerGameStateIdFkeyUsingBaseRunnerPkeyUpdate!]

  """
  The primary key(s) and patch data for `baseRunner` for the far side of the relationship.
  """
  updateByNodeId: [GameStateOnBaseRunnerForBaseRunnerGameStateIdFkeyNodeIdUpdate!]

  """
  A `BaseRunnerInput` object that will be created and connected to this object.
  """
  create: [BaseRunnerGameStateIdFkeyBaseRunnerCreateInput!]
}

"""The fields on `baseRunner` to look up the row to update."""
input BaseRunnerOnBaseRunnerForBaseRunnerGameStateIdFkeyUsingBaseRunnerPkeyUpdate {
  """
  An object where the defined keys will be set on the `baseRunner` being updated.
  """
  patch: updateBaseRunnerOnBaseRunnerForBaseRunnerGameStateIdFkeyPatch!
  gameStateId: UUID!
  runnerId: UUID!
}

"""
An object where the defined keys will be set on the `baseRunner` being updated.
"""
input updateBaseRunnerOnBaseRunnerForBaseRunnerGameStateIdFkeyPatch {
  runnerId: UUID
  base: BaseType
  gameId: UUID
  gameState: BaseRunnerGameStateIdFkeyInput
  player: BaseRunnerRunnerIdFkeyInput
  game: BaseRunnerGameIdFkeyInput
}

"""
Input for the nested mutation of `player` in the `BaseRunnerInput` mutation.
"""
input BaseRunnerRunnerIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnBaseRunnerForBaseRunnerRunnerIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnBaseRunnerForBaseRunnerRunnerIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: BaseRunnerOnBaseRunnerForBaseRunnerRunnerIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: BaseRunnerRunnerIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnBaseRunnerForBaseRunnerRunnerIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnBaseRunnerForBaseRunnerRunnerIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnBaseRunnerForBaseRunnerRunnerIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `scoredRunner` in the `PlayerInput` mutation.
"""
input ScoredRunnerRunnerIdFkeyInverseInput {
  """
  Flag indicating whether all other `scoredRunner` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `scoredRunner` for the far side of the relationship.
  """
  connectByGameEventRecordIdAndRunnerId: [ScoredRunnerScoredRunnerPkeyConnect!]

  """
  The primary key(s) for `scoredRunner` for the far side of the relationship.
  """
  connectByNodeId: [ScoredRunnerNodeIdConnect!]

  """
  The primary key(s) for `scoredRunner` for the far side of the relationship.
  """
  deleteByGameEventRecordIdAndRunnerId: [ScoredRunnerScoredRunnerPkeyDelete!]

  """
  The primary key(s) for `scoredRunner` for the far side of the relationship.
  """
  deleteByNodeId: [ScoredRunnerNodeIdDelete!]

  """
  The primary key(s) and patch data for `scoredRunner` for the far side of the relationship.
  """
  updateByGameEventRecordIdAndRunnerId: [ScoredRunnerOnScoredRunnerForScoredRunnerRunnerIdFkeyUsingScoredRunnerPkeyUpdate!]

  """
  The primary key(s) and patch data for `scoredRunner` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnScoredRunnerForScoredRunnerRunnerIdFkeyNodeIdUpdate!]

  """
  A `ScoredRunnerInput` object that will be created and connected to this object.
  """
  create: [ScoredRunnerRunnerIdFkeyScoredRunnerCreateInput!]
}

"""The fields on `scoredRunner` to look up the row to connect."""
input ScoredRunnerScoredRunnerPkeyConnect {
  gameEventRecordId: UUID!
  runnerId: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input ScoredRunnerNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `scoredRunner` to be connected.
  """
  nodeId: ID!
}

"""The fields on `scoredRunner` to look up the row to delete."""
input ScoredRunnerScoredRunnerPkeyDelete {
  gameEventRecordId: UUID!
  runnerId: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input ScoredRunnerNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `scoredRunner` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `scoredRunner` to look up the row to update."""
input ScoredRunnerOnScoredRunnerForScoredRunnerRunnerIdFkeyUsingScoredRunnerPkeyUpdate {
  """
  An object where the defined keys will be set on the `scoredRunner` being updated.
  """
  patch: updateScoredRunnerOnScoredRunnerForScoredRunnerRunnerIdFkeyPatch!
  gameEventRecordId: UUID!
  runnerId: UUID!
}

"""
An object where the defined keys will be set on the `scoredRunner` being updated.
"""
input updateScoredRunnerOnScoredRunnerForScoredRunnerRunnerIdFkeyPatch {
  gameEventRecordId: UUID
  battedIn: Boolean
  gameId: UUID
  gameEventRecord: ScoredRunnerGameEventRecordIdFkeyInput
  player: ScoredRunnerRunnerIdFkeyInput
  game: ScoredRunnerGameIdFkeyInput
}

"""
Input for the nested mutation of `gameEventRecord` in the `ScoredRunnerInput` mutation.
"""
input ScoredRunnerGameEventRecordIdFkeyInput {
  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectById: GameEventRecordGameEventRecordPkeyConnect

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectByGameIdAndEventIndex: GameEventRecordGameEventRecordGameIdEventIndexKeyConnect

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectByNodeId: GameEventRecordNodeIdConnect

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteById: GameEventRecordGameEventRecordPkeyDelete

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteByGameIdAndEventIndex: GameEventRecordGameEventRecordGameIdEventIndexKeyDelete

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteByNodeId: GameEventRecordNodeIdDelete

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateById: GameEventRecordOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyUsingGameEventRecordPkeyUpdate

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateByGameIdAndEventIndex: GameEventRecordOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyUsingGameEventRecordGameIdEventIndexKeyUpdate

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateByNodeId: ScoredRunnerOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyNodeIdUpdate

  """
  A `GameEventRecordInput` object that will be created and connected to this object.
  """
  create: ScoredRunnerGameEventRecordIdFkeyGameEventRecordCreateInput
}

"""The fields on `gameEventRecord` to look up the row to connect."""
input GameEventRecordGameEventRecordPkeyConnect {
  id: UUID!
}

"""The fields on `gameEventRecord` to look up the row to connect."""
input GameEventRecordGameEventRecordGameIdEventIndexKeyConnect {
  gameId: UUID!
  eventIndex: Int!
}

"""The globally unique `ID` look up for the row to connect."""
input GameEventRecordNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `gameEventRecord` to be connected.
  """
  nodeId: ID!
}

"""The fields on `gameEventRecord` to look up the row to delete."""
input GameEventRecordGameEventRecordPkeyDelete {
  id: UUID!
}

"""The fields on `gameEventRecord` to look up the row to delete."""
input GameEventRecordGameEventRecordGameIdEventIndexKeyDelete {
  gameId: UUID!
  eventIndex: Int!
}

"""The globally unique `ID` look up for the row to delete."""
input GameEventRecordNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `gameEventRecord` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `gameEventRecord` to look up the row to update."""
input GameEventRecordOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyUsingGameEventRecordPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: updateGameEventRecordOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameEventRecord` being updated.
"""
input updateGameEventRecordOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyPatch {
  id: UUID
  gameId: UUID
  eventIndex: Int
  gameStateBeforeId: UUID
  gameStateAfterId: UUID
  gameEventId: UUID
  notes: String
  game: GameEventRecordGameIdFkeyInput
  gameStateBefore: GameEventRecordGameStateBeforeFkInput
  gameStateAfter: GameEventRecordGameStateAfterFkInput
  gameEvent: GameEventRecordGameEventIdFkeyInput
  scoredRunners: ScoredRunnerGameEventRecordIdFkeyInverseInput
}

"""
Input for the nested mutation of `game` in the `GameEventRecordInput` mutation.
"""
input GameEventRecordGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnGameEventRecordForGameEventRecordGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnGameEventRecordForGameEventRecordGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: GameEventRecordOnGameEventRecordForGameEventRecordGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: GameEventRecordGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnGameEventRecordForGameEventRecordGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnGameEventRecordForGameEventRecordGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnGameEventRecordForGameEventRecordGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `baseRunner` in the `GameInput` mutation.
"""
input BaseRunnerGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `baseRunner` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `baseRunner` for the far side of the relationship.
  """
  connectByGameStateIdAndRunnerId: [BaseRunnerBaseRunnerPkeyConnect!]

  """
  The primary key(s) for `baseRunner` for the far side of the relationship.
  """
  connectByNodeId: [BaseRunnerNodeIdConnect!]

  """
  The primary key(s) for `baseRunner` for the far side of the relationship.
  """
  deleteByGameStateIdAndRunnerId: [BaseRunnerBaseRunnerPkeyDelete!]

  """
  The primary key(s) for `baseRunner` for the far side of the relationship.
  """
  deleteByNodeId: [BaseRunnerNodeIdDelete!]

  """
  The primary key(s) and patch data for `baseRunner` for the far side of the relationship.
  """
  updateByGameStateIdAndRunnerId: [BaseRunnerOnBaseRunnerForBaseRunnerGameIdFkeyUsingBaseRunnerPkeyUpdate!]

  """
  The primary key(s) and patch data for `baseRunner` for the far side of the relationship.
  """
  updateByNodeId: [GameOnBaseRunnerForBaseRunnerGameIdFkeyNodeIdUpdate!]

  """
  A `BaseRunnerInput` object that will be created and connected to this object.
  """
  create: [BaseRunnerGameIdFkeyBaseRunnerCreateInput!]
}

"""The fields on `baseRunner` to look up the row to update."""
input BaseRunnerOnBaseRunnerForBaseRunnerGameIdFkeyUsingBaseRunnerPkeyUpdate {
  """
  An object where the defined keys will be set on the `baseRunner` being updated.
  """
  patch: updateBaseRunnerOnBaseRunnerForBaseRunnerGameIdFkeyPatch!
  gameStateId: UUID!
  runnerId: UUID!
}

"""
An object where the defined keys will be set on the `baseRunner` being updated.
"""
input updateBaseRunnerOnBaseRunnerForBaseRunnerGameIdFkeyPatch {
  gameStateId: UUID
  runnerId: UUID
  base: BaseType
  gameState: BaseRunnerGameStateIdFkeyInput
  player: BaseRunnerRunnerIdFkeyInput
  game: BaseRunnerGameIdFkeyInput
}

"""
Input for the nested mutation of `game` in the `BaseRunnerInput` mutation.
"""
input BaseRunnerGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnBaseRunnerForBaseRunnerGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnBaseRunnerForBaseRunnerGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: BaseRunnerOnBaseRunnerForBaseRunnerGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: BaseRunnerGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnBaseRunnerForBaseRunnerGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnBaseRunnerForBaseRunnerGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnBaseRunnerForBaseRunnerGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `lineupForGameState` in the `GameInput` mutation.
"""
input LineupForGameStateGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `lineupForGameState` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `lineupForGameState` for the far side of the relationship.
  """
  connectByGameStateIdAndLineupId: [LineupForGameStateLineupForGameStatePkeyConnect!]

  """
  The primary key(s) for `lineupForGameState` for the far side of the relationship.
  """
  connectByNodeId: [LineupForGameStateNodeIdConnect!]

  """
  The primary key(s) for `lineupForGameState` for the far side of the relationship.
  """
  deleteByGameStateIdAndLineupId: [LineupForGameStateLineupForGameStatePkeyDelete!]

  """
  The primary key(s) for `lineupForGameState` for the far side of the relationship.
  """
  deleteByNodeId: [LineupForGameStateNodeIdDelete!]

  """
  The primary key(s) and patch data for `lineupForGameState` for the far side of the relationship.
  """
  updateByGameStateIdAndLineupId: [LineupForGameStateOnLineupForGameStateForLineupForGameStateGameIdFkeyUsingLineupForGameStatePkeyUpdate!]

  """
  The primary key(s) and patch data for `lineupForGameState` for the far side of the relationship.
  """
  updateByNodeId: [GameOnLineupForGameStateForLineupForGameStateGameIdFkeyNodeIdUpdate!]

  """
  A `LineupForGameStateInput` object that will be created and connected to this object.
  """
  create: [LineupForGameStateGameIdFkeyLineupForGameStateCreateInput!]
}

"""The fields on `lineupForGameState` to look up the row to connect."""
input LineupForGameStateLineupForGameStatePkeyConnect {
  gameStateId: UUID!
  lineupId: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input LineupForGameStateNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `lineupForGameState` to be connected.
  """
  nodeId: ID!
}

"""The fields on `lineupForGameState` to look up the row to delete."""
input LineupForGameStateLineupForGameStatePkeyDelete {
  gameStateId: UUID!
  lineupId: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input LineupForGameStateNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `lineupForGameState` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `lineupForGameState` to look up the row to update."""
input LineupForGameStateOnLineupForGameStateForLineupForGameStateGameIdFkeyUsingLineupForGameStatePkeyUpdate {
  """
  An object where the defined keys will be set on the `lineupForGameState` being updated.
  """
  patch: updateLineupForGameStateOnLineupForGameStateForLineupForGameStateGameIdFkeyPatch!
  gameStateId: UUID!
  lineupId: UUID!
}

"""
An object where the defined keys will be set on the `lineupForGameState` being updated.
"""
input updateLineupForGameStateOnLineupForGameStateForLineupForGameStateGameIdFkeyPatch {
  gameStateId: UUID
  lineupId: UUID
  gameState: LineupForGameStateGameStateIdFkeyInput
  lineup: LineupForGameStateLineupIdFkeyInput
  game: LineupForGameStateGameIdFkeyInput
}

"""
Input for the nested mutation of `gameState` in the `LineupForGameStateInput` mutation.
"""
input LineupForGameStateGameStateIdFkeyInput {
  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  connectById: GameStateGameStatePkeyConnect

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  connectByNodeId: GameStateNodeIdConnect

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  deleteById: GameStateGameStatePkeyDelete

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  deleteByNodeId: GameStateNodeIdDelete

  """
  The primary key(s) and patch data for `gameState` for the far side of the relationship.
  """
  updateById: GameStateOnLineupForGameStateForLineupForGameStateGameStateIdFkeyUsingGameStatePkeyUpdate

  """
  The primary key(s) and patch data for `gameState` for the far side of the relationship.
  """
  updateByNodeId: LineupForGameStateOnLineupForGameStateForLineupForGameStateGameStateIdFkeyNodeIdUpdate

  """
  A `GameStateInput` object that will be created and connected to this object.
  """
  create: LineupForGameStateGameStateIdFkeyGameStateCreateInput
}

"""The fields on `gameState` to look up the row to update."""
input GameStateOnLineupForGameStateForLineupForGameStateGameStateIdFkeyUsingGameStatePkeyUpdate {
  """
  An object where the defined keys will be set on the `gameState` being updated.
  """
  patch: updateGameStateOnLineupForGameStateForLineupForGameStateGameStateIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameState` being updated.
"""
input updateGameStateOnLineupForGameStateForLineupForGameStateGameStateIdFkeyPatch {
  id: UUID
  gameId: UUID
  gameStateIndex: Int
  playerAtBat: UUID
  inning: Int
  halfInning: HalfInning
  outs: Int
  score: [Int]
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""
Input for the nested mutation of `lineupForGameState` in the `GameStateInput` mutation.
"""
input LineupForGameStateGameStateIdFkeyInverseInput {
  """
  Flag indicating whether all other `lineupForGameState` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `lineupForGameState` for the far side of the relationship.
  """
  connectByGameStateIdAndLineupId: [LineupForGameStateLineupForGameStatePkeyConnect!]

  """
  The primary key(s) for `lineupForGameState` for the far side of the relationship.
  """
  connectByNodeId: [LineupForGameStateNodeIdConnect!]

  """
  The primary key(s) for `lineupForGameState` for the far side of the relationship.
  """
  deleteByGameStateIdAndLineupId: [LineupForGameStateLineupForGameStatePkeyDelete!]

  """
  The primary key(s) for `lineupForGameState` for the far side of the relationship.
  """
  deleteByNodeId: [LineupForGameStateNodeIdDelete!]

  """
  The primary key(s) and patch data for `lineupForGameState` for the far side of the relationship.
  """
  updateByGameStateIdAndLineupId: [LineupForGameStateOnLineupForGameStateForLineupForGameStateGameStateIdFkeyUsingLineupForGameStatePkeyUpdate!]

  """
  The primary key(s) and patch data for `lineupForGameState` for the far side of the relationship.
  """
  updateByNodeId: [GameStateOnLineupForGameStateForLineupForGameStateGameStateIdFkeyNodeIdUpdate!]

  """
  A `LineupForGameStateInput` object that will be created and connected to this object.
  """
  create: [LineupForGameStateGameStateIdFkeyLineupForGameStateCreateInput!]
}

"""The fields on `lineupForGameState` to look up the row to update."""
input LineupForGameStateOnLineupForGameStateForLineupForGameStateGameStateIdFkeyUsingLineupForGameStatePkeyUpdate {
  """
  An object where the defined keys will be set on the `lineupForGameState` being updated.
  """
  patch: updateLineupForGameStateOnLineupForGameStateForLineupForGameStateGameStateIdFkeyPatch!
  gameStateId: UUID!
  lineupId: UUID!
}

"""
An object where the defined keys will be set on the `lineupForGameState` being updated.
"""
input updateLineupForGameStateOnLineupForGameStateForLineupForGameStateGameStateIdFkeyPatch {
  lineupId: UUID
  gameId: UUID
  gameState: LineupForGameStateGameStateIdFkeyInput
  lineup: LineupForGameStateLineupIdFkeyInput
  game: LineupForGameStateGameIdFkeyInput
}

"""
Input for the nested mutation of `lineup` in the `LineupForGameStateInput` mutation.
"""
input LineupForGameStateLineupIdFkeyInput {
  """The primary key(s) for `lineup` for the far side of the relationship."""
  connectById: LineupLineupPkeyConnect

  """The primary key(s) for `lineup` for the far side of the relationship."""
  connectByNodeId: LineupNodeIdConnect

  """The primary key(s) for `lineup` for the far side of the relationship."""
  deleteById: LineupLineupPkeyDelete

  """The primary key(s) for `lineup` for the far side of the relationship."""
  deleteByNodeId: LineupNodeIdDelete

  """
  The primary key(s) and patch data for `lineup` for the far side of the relationship.
  """
  updateById: LineupOnLineupForGameStateForLineupForGameStateLineupIdFkeyUsingLineupPkeyUpdate

  """
  The primary key(s) and patch data for `lineup` for the far side of the relationship.
  """
  updateByNodeId: LineupForGameStateOnLineupForGameStateForLineupForGameStateLineupIdFkeyNodeIdUpdate

  """
  A `LineupInput` object that will be created and connected to this object.
  """
  create: LineupForGameStateLineupIdFkeyLineupCreateInput
}

"""The fields on `lineup` to look up the row to update."""
input LineupOnLineupForGameStateForLineupForGameStateLineupIdFkeyUsingLineupPkeyUpdate {
  """
  An object where the defined keys will be set on the `lineup` being updated.
  """
  patch: updateLineupOnLineupForGameStateForLineupForGameStateLineupIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `lineup` being updated.
"""
input updateLineupOnLineupForGameStateForLineupForGameStateLineupIdFkeyPatch {
  id: UUID
  teamId: UUID
  gameId: UUID
  team: LineupTeamIdFkeyInput
  game: LineupGameIdFkeyInput
  lineupSpots: LineupSpotLineupIdFkeyInverseInput
  lineupChangesToLineupBeforeIdUsingId: LineupChangeLineupBeforeIdFkeyInverseInput
  lineupChangesToLineupAfterIdUsingId: LineupChangeLineupAfterIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateLineupIdFkeyInverseInput
}

"""
Input for the nested mutation of `lineupChange` in the `LineupInput` mutation.
"""
input LineupChangeLineupAfterIdFkeyInverseInput {
  """
  Flag indicating whether all other `lineupChange` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  connectById: [LineupChangeLineupChangePkeyConnect!]

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  connectByNodeId: [LineupChangeNodeIdConnect!]

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  deleteById: [LineupChangeLineupChangePkeyDelete!]

  """
  The primary key(s) for `lineupChange` for the far side of the relationship.
  """
  deleteByNodeId: [LineupChangeNodeIdDelete!]

  """
  The primary key(s) and patch data for `lineupChange` for the far side of the relationship.
  """
  updateById: [LineupChangeOnLineupChangeForLineupChangeLineupAfterIdFkeyUsingLineupChangePkeyUpdate!]

  """
  The primary key(s) and patch data for `lineupChange` for the far side of the relationship.
  """
  updateByNodeId: [LineupOnLineupChangeForLineupChangeLineupAfterIdFkeyNodeIdUpdate!]

  """
  A `LineupChangeInput` object that will be created and connected to this object.
  """
  create: [LineupChangeLineupAfterIdFkeyLineupChangeCreateInput!]
}

"""The fields on `lineupChange` to look up the row to update."""
input LineupChangeOnLineupChangeForLineupChangeLineupAfterIdFkeyUsingLineupChangePkeyUpdate {
  """
  An object where the defined keys will be set on the `lineupChange` being updated.
  """
  patch: updateLineupChangeOnLineupChangeForLineupChangeLineupAfterIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `lineupChange` being updated.
"""
input updateLineupChangeOnLineupChangeForLineupChangeLineupAfterIdFkeyPatch {
  id: UUID
  lineupBeforeId: UUID
  gameId: UUID
  lineup: LineupChangeLineupAfterIdFkeyInput
  game: LineupChangeGameIdFkeyInput
  gameEvents: GameEventLineupChangeIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input LineupOnLineupChangeForLineupChangeLineupAfterIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineupChange` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineupChange` being updated.
  """
  patch: LineupChangePatch!
}

"""
Represents an update to a `LineupChange`. Fields that are set will be updated.
"""
input LineupChangePatch {
  id: UUID
  lineupBeforeId: UUID
  lineupAfterId: UUID
  gameId: UUID
  lineup: LineupChangeLineupAfterIdFkeyInput
  game: LineupChangeGameIdFkeyInput
  gameEvents: GameEventLineupChangeIdFkeyInverseInput
}

"""The `lineupChange` to be created by this mutation."""
input LineupChangeLineupAfterIdFkeyLineupChangeCreateInput {
  id: UUID
  lineupBeforeId: UUID
  gameId: UUID
  lineup: LineupChangeLineupAfterIdFkeyInput
  game: LineupChangeGameIdFkeyInput
  gameEvents: GameEventLineupChangeIdFkeyInverseInput
}

"""
Input for the nested mutation of `lineupForGameState` in the `LineupInput` mutation.
"""
input LineupForGameStateLineupIdFkeyInverseInput {
  """
  Flag indicating whether all other `lineupForGameState` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `lineupForGameState` for the far side of the relationship.
  """
  connectByGameStateIdAndLineupId: [LineupForGameStateLineupForGameStatePkeyConnect!]

  """
  The primary key(s) for `lineupForGameState` for the far side of the relationship.
  """
  connectByNodeId: [LineupForGameStateNodeIdConnect!]

  """
  The primary key(s) for `lineupForGameState` for the far side of the relationship.
  """
  deleteByGameStateIdAndLineupId: [LineupForGameStateLineupForGameStatePkeyDelete!]

  """
  The primary key(s) for `lineupForGameState` for the far side of the relationship.
  """
  deleteByNodeId: [LineupForGameStateNodeIdDelete!]

  """
  The primary key(s) and patch data for `lineupForGameState` for the far side of the relationship.
  """
  updateByGameStateIdAndLineupId: [LineupForGameStateOnLineupForGameStateForLineupForGameStateLineupIdFkeyUsingLineupForGameStatePkeyUpdate!]

  """
  The primary key(s) and patch data for `lineupForGameState` for the far side of the relationship.
  """
  updateByNodeId: [LineupOnLineupForGameStateForLineupForGameStateLineupIdFkeyNodeIdUpdate!]

  """
  A `LineupForGameStateInput` object that will be created and connected to this object.
  """
  create: [LineupForGameStateLineupIdFkeyLineupForGameStateCreateInput!]
}

"""The fields on `lineupForGameState` to look up the row to update."""
input LineupForGameStateOnLineupForGameStateForLineupForGameStateLineupIdFkeyUsingLineupForGameStatePkeyUpdate {
  """
  An object where the defined keys will be set on the `lineupForGameState` being updated.
  """
  patch: updateLineupForGameStateOnLineupForGameStateForLineupForGameStateLineupIdFkeyPatch!
  gameStateId: UUID!
  lineupId: UUID!
}

"""
An object where the defined keys will be set on the `lineupForGameState` being updated.
"""
input updateLineupForGameStateOnLineupForGameStateForLineupForGameStateLineupIdFkeyPatch {
  gameStateId: UUID
  gameId: UUID
  gameState: LineupForGameStateGameStateIdFkeyInput
  lineup: LineupForGameStateLineupIdFkeyInput
  game: LineupForGameStateGameIdFkeyInput
}

"""
Input for the nested mutation of `game` in the `LineupForGameStateInput` mutation.
"""
input LineupForGameStateGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnLineupForGameStateForLineupForGameStateGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnLineupForGameStateForLineupForGameStateGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: LineupForGameStateOnLineupForGameStateForLineupForGameStateGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: LineupForGameStateGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnLineupForGameStateForLineupForGameStateGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnLineupForGameStateForLineupForGameStateGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnLineupForGameStateForLineupForGameStateGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `gameEventRecord` in the `GameInput` mutation.
"""
input GameEventRecordGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `gameEventRecord` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectById: [GameEventRecordGameEventRecordPkeyConnect!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectByGameIdAndEventIndex: [GameEventRecordGameEventRecordGameIdEventIndexKeyConnect!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectByNodeId: [GameEventRecordNodeIdConnect!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteById: [GameEventRecordGameEventRecordPkeyDelete!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteByGameIdAndEventIndex: [GameEventRecordGameEventRecordGameIdEventIndexKeyDelete!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteByNodeId: [GameEventRecordNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateById: [GameEventRecordOnGameEventRecordForGameEventRecordGameIdFkeyUsingGameEventRecordPkeyUpdate!]

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateByGameIdAndEventIndex: [GameEventRecordOnGameEventRecordForGameEventRecordGameIdFkeyUsingGameEventRecordGameIdEventIndexKeyUpdate!]

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateByNodeId: [GameOnGameEventRecordForGameEventRecordGameIdFkeyNodeIdUpdate!]

  """
  A `GameEventRecordInput` object that will be created and connected to this object.
  """
  create: [GameEventRecordGameIdFkeyGameEventRecordCreateInput!]
}

"""The fields on `gameEventRecord` to look up the row to update."""
input GameEventRecordOnGameEventRecordForGameEventRecordGameIdFkeyUsingGameEventRecordPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: updateGameEventRecordOnGameEventRecordForGameEventRecordGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameEventRecord` being updated.
"""
input updateGameEventRecordOnGameEventRecordForGameEventRecordGameIdFkeyPatch {
  id: UUID
  eventIndex: Int
  gameStateBeforeId: UUID
  gameStateAfterId: UUID
  gameEventId: UUID
  notes: String
  game: GameEventRecordGameIdFkeyInput
  gameStateBefore: GameEventRecordGameStateBeforeFkInput
  gameStateAfter: GameEventRecordGameStateAfterFkInput
  gameEvent: GameEventRecordGameEventIdFkeyInput
  scoredRunners: ScoredRunnerGameEventRecordIdFkeyInverseInput
}

"""
Input for the nested mutation of `gameState` in the `GameEventRecordInput` mutation.
"""
input GameEventRecordGameStateBeforeFkInput {
  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  connectById: GameStateGameStatePkeyConnect

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  connectByNodeId: GameStateNodeIdConnect

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  deleteById: GameStateGameStatePkeyDelete

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  deleteByNodeId: GameStateNodeIdDelete

  """
  The primary key(s) and patch data for `gameState` for the far side of the relationship.
  """
  updateById: GameStateOnGameEventRecordForGameEventRecordGameStateBeforeFkUsingGameStatePkeyUpdate

  """
  The primary key(s) and patch data for `gameState` for the far side of the relationship.
  """
  updateByNodeId: GameEventRecordOnGameEventRecordForGameEventRecordGameStateBeforeFkNodeIdUpdate

  """
  A `GameStateInput` object that will be created and connected to this object.
  """
  create: GameEventRecordGameStateBeforeFkGameStateCreateInput
}

"""The fields on `gameState` to look up the row to update."""
input GameStateOnGameEventRecordForGameEventRecordGameStateBeforeFkUsingGameStatePkeyUpdate {
  """
  An object where the defined keys will be set on the `gameState` being updated.
  """
  patch: updateGameStateOnGameEventRecordForGameEventRecordGameStateBeforeFkPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameState` being updated.
"""
input updateGameStateOnGameEventRecordForGameEventRecordGameStateBeforeFkPatch {
  id: UUID
  gameId: UUID
  gameStateIndex: Int
  playerAtBat: UUID
  inning: Int
  halfInning: HalfInning
  outs: Int
  score: [Int]
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""
Input for the nested mutation of `gameEventRecord` in the `GameStateInput` mutation.
"""
input GameEventRecordGameStateBeforeFkInverseInput {
  """
  Flag indicating whether all other `gameEventRecord` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectById: [GameEventRecordGameEventRecordPkeyConnect!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectByGameIdAndEventIndex: [GameEventRecordGameEventRecordGameIdEventIndexKeyConnect!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectByNodeId: [GameEventRecordNodeIdConnect!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteById: [GameEventRecordGameEventRecordPkeyDelete!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteByGameIdAndEventIndex: [GameEventRecordGameEventRecordGameIdEventIndexKeyDelete!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteByNodeId: [GameEventRecordNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateById: [GameEventRecordOnGameEventRecordForGameEventRecordGameStateBeforeFkUsingGameEventRecordPkeyUpdate!]

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateByGameIdAndEventIndex: [GameEventRecordOnGameEventRecordForGameEventRecordGameStateBeforeFkUsingGameEventRecordGameIdEventIndexKeyUpdate!]

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateByNodeId: [GameStateOnGameEventRecordForGameEventRecordGameStateBeforeFkNodeIdUpdate!]

  """
  A `GameEventRecordInput` object that will be created and connected to this object.
  """
  create: [GameEventRecordGameStateBeforeFkGameEventRecordCreateInput!]
}

"""The fields on `gameEventRecord` to look up the row to update."""
input GameEventRecordOnGameEventRecordForGameEventRecordGameStateBeforeFkUsingGameEventRecordPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: updateGameEventRecordOnGameEventRecordForGameEventRecordGameStateBeforeFkPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameEventRecord` being updated.
"""
input updateGameEventRecordOnGameEventRecordForGameEventRecordGameStateBeforeFkPatch {
  id: UUID
  gameId: UUID
  eventIndex: Int
  gameStateAfterId: UUID
  gameEventId: UUID
  notes: String
  game: GameEventRecordGameIdFkeyInput
  gameStateBefore: GameEventRecordGameStateBeforeFkInput
  gameStateAfter: GameEventRecordGameStateAfterFkInput
  gameEvent: GameEventRecordGameEventIdFkeyInput
  scoredRunners: ScoredRunnerGameEventRecordIdFkeyInverseInput
}

"""
Input for the nested mutation of `gameState` in the `GameEventRecordInput` mutation.
"""
input GameEventRecordGameStateAfterFkInput {
  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  connectById: GameStateGameStatePkeyConnect

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  connectByNodeId: GameStateNodeIdConnect

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  deleteById: GameStateGameStatePkeyDelete

  """
  The primary key(s) for `gameState` for the far side of the relationship.
  """
  deleteByNodeId: GameStateNodeIdDelete

  """
  The primary key(s) and patch data for `gameState` for the far side of the relationship.
  """
  updateById: GameStateOnGameEventRecordForGameEventRecordGameStateAfterFkUsingGameStatePkeyUpdate

  """
  The primary key(s) and patch data for `gameState` for the far side of the relationship.
  """
  updateByNodeId: GameEventRecordOnGameEventRecordForGameEventRecordGameStateAfterFkNodeIdUpdate

  """
  A `GameStateInput` object that will be created and connected to this object.
  """
  create: GameEventRecordGameStateAfterFkGameStateCreateInput
}

"""The fields on `gameState` to look up the row to update."""
input GameStateOnGameEventRecordForGameEventRecordGameStateAfterFkUsingGameStatePkeyUpdate {
  """
  An object where the defined keys will be set on the `gameState` being updated.
  """
  patch: updateGameStateOnGameEventRecordForGameEventRecordGameStateAfterFkPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameState` being updated.
"""
input updateGameStateOnGameEventRecordForGameEventRecordGameStateAfterFkPatch {
  id: UUID
  gameId: UUID
  gameStateIndex: Int
  playerAtBat: UUID
  inning: Int
  halfInning: HalfInning
  outs: Int
  score: [Int]
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""
Input for the nested mutation of `gameEventRecord` in the `GameStateInput` mutation.
"""
input GameEventRecordGameStateAfterFkInverseInput {
  """
  Flag indicating whether all other `gameEventRecord` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectById: [GameEventRecordGameEventRecordPkeyConnect!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectByGameIdAndEventIndex: [GameEventRecordGameEventRecordGameIdEventIndexKeyConnect!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectByNodeId: [GameEventRecordNodeIdConnect!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteById: [GameEventRecordGameEventRecordPkeyDelete!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteByGameIdAndEventIndex: [GameEventRecordGameEventRecordGameIdEventIndexKeyDelete!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteByNodeId: [GameEventRecordNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateById: [GameEventRecordOnGameEventRecordForGameEventRecordGameStateAfterFkUsingGameEventRecordPkeyUpdate!]

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateByGameIdAndEventIndex: [GameEventRecordOnGameEventRecordForGameEventRecordGameStateAfterFkUsingGameEventRecordGameIdEventIndexKeyUpdate!]

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateByNodeId: [GameStateOnGameEventRecordForGameEventRecordGameStateAfterFkNodeIdUpdate!]

  """
  A `GameEventRecordInput` object that will be created and connected to this object.
  """
  create: [GameEventRecordGameStateAfterFkGameEventRecordCreateInput!]
}

"""The fields on `gameEventRecord` to look up the row to update."""
input GameEventRecordOnGameEventRecordForGameEventRecordGameStateAfterFkUsingGameEventRecordPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: updateGameEventRecordOnGameEventRecordForGameEventRecordGameStateAfterFkPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameEventRecord` being updated.
"""
input updateGameEventRecordOnGameEventRecordForGameEventRecordGameStateAfterFkPatch {
  id: UUID
  gameId: UUID
  eventIndex: Int
  gameStateBeforeId: UUID
  gameEventId: UUID
  notes: String
  game: GameEventRecordGameIdFkeyInput
  gameStateBefore: GameEventRecordGameStateBeforeFkInput
  gameStateAfter: GameEventRecordGameStateAfterFkInput
  gameEvent: GameEventRecordGameEventIdFkeyInput
  scoredRunners: ScoredRunnerGameEventRecordIdFkeyInverseInput
}

"""
Input for the nested mutation of `gameEvent` in the `GameEventRecordInput` mutation.
"""
input GameEventRecordGameEventIdFkeyInput {
  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectById: GameEventGameEventPkeyConnect

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectByNodeId: GameEventNodeIdConnect

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteById: GameEventGameEventPkeyDelete

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteByNodeId: GameEventNodeIdDelete

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateById: GameEventOnGameEventRecordForGameEventRecordGameEventIdFkeyUsingGameEventPkeyUpdate

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateByNodeId: GameEventRecordOnGameEventRecordForGameEventRecordGameEventIdFkeyNodeIdUpdate

  """
  A `GameEventInput` object that will be created and connected to this object.
  """
  create: GameEventRecordGameEventIdFkeyGameEventCreateInput
}

"""The fields on `gameEvent` to look up the row to update."""
input GameEventOnGameEventRecordForGameEventRecordGameEventIdFkeyUsingGameEventPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: updateGameEventOnGameEventRecordForGameEventRecordGameEventIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameEvent` being updated.
"""
input updateGameEventOnGameEventRecordForGameEventRecordGameEventIdFkeyPatch {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""
Input for the nested mutation of `atBatSkip` in the `GameEventInput` mutation.
"""
input GameEventAtBatSkipIdFkeyInput {
  """
  The primary key(s) for `atBatSkip` for the far side of the relationship.
  """
  connectById: AtBatSkipAtBatSkipPkeyConnect

  """
  The primary key(s) for `atBatSkip` for the far side of the relationship.
  """
  connectByNodeId: AtBatSkipNodeIdConnect

  """
  The primary key(s) for `atBatSkip` for the far side of the relationship.
  """
  deleteById: AtBatSkipAtBatSkipPkeyDelete

  """
  The primary key(s) for `atBatSkip` for the far side of the relationship.
  """
  deleteByNodeId: AtBatSkipNodeIdDelete

  """
  The primary key(s) and patch data for `atBatSkip` for the far side of the relationship.
  """
  updateById: AtBatSkipOnGameEventForGameEventAtBatSkipIdFkeyUsingAtBatSkipPkeyUpdate

  """
  The primary key(s) and patch data for `atBatSkip` for the far side of the relationship.
  """
  updateByNodeId: GameEventOnGameEventForGameEventAtBatSkipIdFkeyNodeIdUpdate

  """
  A `AtBatSkipInput` object that will be created and connected to this object.
  """
  create: GameEventAtBatSkipIdFkeyAtBatSkipCreateInput
}

"""The fields on `atBatSkip` to look up the row to connect."""
input AtBatSkipAtBatSkipPkeyConnect {
  id: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input AtBatSkipNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `atBatSkip` to be connected.
  """
  nodeId: ID!
}

"""The fields on `atBatSkip` to look up the row to delete."""
input AtBatSkipAtBatSkipPkeyDelete {
  id: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input AtBatSkipNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `atBatSkip` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `atBatSkip` to look up the row to update."""
input AtBatSkipOnGameEventForGameEventAtBatSkipIdFkeyUsingAtBatSkipPkeyUpdate {
  """
  An object where the defined keys will be set on the `atBatSkip` being updated.
  """
  patch: updateAtBatSkipOnGameEventForGameEventAtBatSkipIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `atBatSkip` being updated.
"""
input updateAtBatSkipOnGameEventForGameEventAtBatSkipIdFkeyPatch {
  id: UUID
  batterId: UUID
  gameId: UUID
  player: AtBatSkipBatterIdFkeyInput
  game: AtBatSkipGameIdFkeyInput
  gameEvents: GameEventAtBatSkipIdFkeyInverseInput
}

"""
Input for the nested mutation of `game` in the `AtBatSkipInput` mutation.
"""
input AtBatSkipGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnAtBatSkipForAtBatSkipGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnAtBatSkipForAtBatSkipGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: AtBatSkipOnAtBatSkipForAtBatSkipGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: AtBatSkipGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnAtBatSkipForAtBatSkipGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnAtBatSkipForAtBatSkipGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnAtBatSkipForAtBatSkipGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `scoredRunner` in the `GameInput` mutation.
"""
input ScoredRunnerGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `scoredRunner` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `scoredRunner` for the far side of the relationship.
  """
  connectByGameEventRecordIdAndRunnerId: [ScoredRunnerScoredRunnerPkeyConnect!]

  """
  The primary key(s) for `scoredRunner` for the far side of the relationship.
  """
  connectByNodeId: [ScoredRunnerNodeIdConnect!]

  """
  The primary key(s) for `scoredRunner` for the far side of the relationship.
  """
  deleteByGameEventRecordIdAndRunnerId: [ScoredRunnerScoredRunnerPkeyDelete!]

  """
  The primary key(s) for `scoredRunner` for the far side of the relationship.
  """
  deleteByNodeId: [ScoredRunnerNodeIdDelete!]

  """
  The primary key(s) and patch data for `scoredRunner` for the far side of the relationship.
  """
  updateByGameEventRecordIdAndRunnerId: [ScoredRunnerOnScoredRunnerForScoredRunnerGameIdFkeyUsingScoredRunnerPkeyUpdate!]

  """
  The primary key(s) and patch data for `scoredRunner` for the far side of the relationship.
  """
  updateByNodeId: [GameOnScoredRunnerForScoredRunnerGameIdFkeyNodeIdUpdate!]

  """
  A `ScoredRunnerInput` object that will be created and connected to this object.
  """
  create: [ScoredRunnerGameIdFkeyScoredRunnerCreateInput!]
}

"""The fields on `scoredRunner` to look up the row to update."""
input ScoredRunnerOnScoredRunnerForScoredRunnerGameIdFkeyUsingScoredRunnerPkeyUpdate {
  """
  An object where the defined keys will be set on the `scoredRunner` being updated.
  """
  patch: updateScoredRunnerOnScoredRunnerForScoredRunnerGameIdFkeyPatch!
  gameEventRecordId: UUID!
  runnerId: UUID!
}

"""
An object where the defined keys will be set on the `scoredRunner` being updated.
"""
input updateScoredRunnerOnScoredRunnerForScoredRunnerGameIdFkeyPatch {
  gameEventRecordId: UUID
  runnerId: UUID
  battedIn: Boolean
  gameEventRecord: ScoredRunnerGameEventRecordIdFkeyInput
  player: ScoredRunnerRunnerIdFkeyInput
  game: ScoredRunnerGameIdFkeyInput
}

"""
Input for the nested mutation of `player` in the `ScoredRunnerInput` mutation.
"""
input ScoredRunnerRunnerIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnScoredRunnerForScoredRunnerRunnerIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnScoredRunnerForScoredRunnerRunnerIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: ScoredRunnerOnScoredRunnerForScoredRunnerRunnerIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: ScoredRunnerRunnerIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnScoredRunnerForScoredRunnerRunnerIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnScoredRunnerForScoredRunnerRunnerIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnScoredRunnerForScoredRunnerRunnerIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `playerGroupMembership` in the `PlayerInput` mutation.
"""
input PlayerGroupMembershipPlayerIdFkeyInverseInput {
  """
  Flag indicating whether all other `playerGroupMembership` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `playerGroupMembership` for the far side of the relationship.
  """
  connectByPlayerIdAndGroupId: [PlayerGroupMembershipPlayerGroupMembershipPkeyConnect!]

  """
  The primary key(s) for `playerGroupMembership` for the far side of the relationship.
  """
  connectByNodeId: [PlayerGroupMembershipNodeIdConnect!]

  """
  The primary key(s) for `playerGroupMembership` for the far side of the relationship.
  """
  deleteByPlayerIdAndGroupId: [PlayerGroupMembershipPlayerGroupMembershipPkeyDelete!]

  """
  The primary key(s) for `playerGroupMembership` for the far side of the relationship.
  """
  deleteByNodeId: [PlayerGroupMembershipNodeIdDelete!]

  """
  The primary key(s) and patch data for `playerGroupMembership` for the far side of the relationship.
  """
  updateByPlayerIdAndGroupId: [PlayerGroupMembershipOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyUsingPlayerGroupMembershipPkeyUpdate!]

  """
  The primary key(s) and patch data for `playerGroupMembership` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyNodeIdUpdate!]

  """
  A `PlayerGroupMembershipInput` object that will be created and connected to this object.
  """
  create: [PlayerGroupMembershipPlayerIdFkeyPlayerGroupMembershipCreateInput!]
}

"""The fields on `playerGroupMembership` to look up the row to connect."""
input PlayerGroupMembershipPlayerGroupMembershipPkeyConnect {
  playerId: UUID!
  groupId: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input PlayerGroupMembershipNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `playerGroupMembership` to be connected.
  """
  nodeId: ID!
}

"""The fields on `playerGroupMembership` to look up the row to delete."""
input PlayerGroupMembershipPlayerGroupMembershipPkeyDelete {
  playerId: UUID!
  groupId: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input PlayerGroupMembershipNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `playerGroupMembership` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `playerGroupMembership` to look up the row to update."""
input PlayerGroupMembershipOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyUsingPlayerGroupMembershipPkeyUpdate {
  """
  An object where the defined keys will be set on the `playerGroupMembership` being updated.
  """
  patch: updatePlayerGroupMembershipOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyPatch!
  playerId: UUID!
  groupId: UUID!
}

"""
An object where the defined keys will be set on the `playerGroupMembership` being updated.
"""
input updatePlayerGroupMembershipOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyPatch {
  groupId: UUID
  player: PlayerGroupMembershipPlayerIdFkeyInput
  group: PlayerGroupMembershipGroupIdFkeyInput
}

"""
Input for the nested mutation of `player` in the `PlayerGroupMembershipInput` mutation.
"""
input PlayerGroupMembershipPlayerIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: PlayerGroupMembershipOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: PlayerGroupMembershipPlayerIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `atBatSkip` in the `PlayerInput` mutation.
"""
input AtBatSkipBatterIdFkeyInverseInput {
  """
  Flag indicating whether all other `atBatSkip` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `atBatSkip` for the far side of the relationship.
  """
  connectById: [AtBatSkipAtBatSkipPkeyConnect!]

  """
  The primary key(s) for `atBatSkip` for the far side of the relationship.
  """
  connectByNodeId: [AtBatSkipNodeIdConnect!]

  """
  The primary key(s) for `atBatSkip` for the far side of the relationship.
  """
  deleteById: [AtBatSkipAtBatSkipPkeyDelete!]

  """
  The primary key(s) for `atBatSkip` for the far side of the relationship.
  """
  deleteByNodeId: [AtBatSkipNodeIdDelete!]

  """
  The primary key(s) and patch data for `atBatSkip` for the far side of the relationship.
  """
  updateById: [AtBatSkipOnAtBatSkipForAtBatSkipBatterIdFkeyUsingAtBatSkipPkeyUpdate!]

  """
  The primary key(s) and patch data for `atBatSkip` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnAtBatSkipForAtBatSkipBatterIdFkeyNodeIdUpdate!]

  """
  A `AtBatSkipInput` object that will be created and connected to this object.
  """
  create: [AtBatSkipBatterIdFkeyAtBatSkipCreateInput!]
}

"""The fields on `atBatSkip` to look up the row to update."""
input AtBatSkipOnAtBatSkipForAtBatSkipBatterIdFkeyUsingAtBatSkipPkeyUpdate {
  """
  An object where the defined keys will be set on the `atBatSkip` being updated.
  """
  patch: updateAtBatSkipOnAtBatSkipForAtBatSkipBatterIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `atBatSkip` being updated.
"""
input updateAtBatSkipOnAtBatSkipForAtBatSkipBatterIdFkeyPatch {
  id: UUID
  gameId: UUID
  player: AtBatSkipBatterIdFkeyInput
  game: AtBatSkipGameIdFkeyInput
  gameEvents: GameEventAtBatSkipIdFkeyInverseInput
}

"""
Input for the nested mutation of `gameEvent` in the `AtBatSkipInput` mutation.
"""
input GameEventAtBatSkipIdFkeyInverseInput {
  """
  Flag indicating whether all other `gameEvent` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectById: [GameEventGameEventPkeyConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectByNodeId: [GameEventNodeIdConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteById: [GameEventGameEventPkeyDelete!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteByNodeId: [GameEventNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateById: [GameEventOnGameEventForGameEventAtBatSkipIdFkeyUsingGameEventPkeyUpdate!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateByNodeId: [AtBatSkipOnGameEventForGameEventAtBatSkipIdFkeyNodeIdUpdate!]

  """
  A `GameEventInput` object that will be created and connected to this object.
  """
  create: [GameEventAtBatSkipIdFkeyGameEventCreateInput!]
}

"""The fields on `gameEvent` to look up the row to update."""
input GameEventOnGameEventForGameEventAtBatSkipIdFkeyUsingGameEventPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: updateGameEventOnGameEventForGameEventAtBatSkipIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameEvent` being updated.
"""
input updateGameEventOnGameEventForGameEventAtBatSkipIdFkeyPatch {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""
Input for the nested mutation of `game` in the `GameEventInput` mutation.
"""
input GameEventGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnGameEventForGameEventGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnGameEventForGameEventGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: GameEventOnGameEventForGameEventGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: GameEventGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnGameEventForGameEventGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnGameEventForGameEventGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnGameEventForGameEventGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `soloModeOpponentInning` in the `GameInput` mutation.
"""
input SoloModeOpponentInningGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `soloModeOpponentInning` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `soloModeOpponentInning` for the far side of the relationship.
  """
  connectById: [SoloModeOpponentInningSoloModeOpponentInningPkeyConnect!]

  """
  The primary key(s) for `soloModeOpponentInning` for the far side of the relationship.
  """
  connectByNodeId: [SoloModeOpponentInningNodeIdConnect!]

  """
  The primary key(s) for `soloModeOpponentInning` for the far side of the relationship.
  """
  deleteById: [SoloModeOpponentInningSoloModeOpponentInningPkeyDelete!]

  """
  The primary key(s) for `soloModeOpponentInning` for the far side of the relationship.
  """
  deleteByNodeId: [SoloModeOpponentInningNodeIdDelete!]

  """
  The primary key(s) and patch data for `soloModeOpponentInning` for the far side of the relationship.
  """
  updateById: [SoloModeOpponentInningOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyUsingSoloModeOpponentInningPkeyUpdate!]

  """
  The primary key(s) and patch data for `soloModeOpponentInning` for the far side of the relationship.
  """
  updateByNodeId: [GameOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyNodeIdUpdate!]

  """
  A `SoloModeOpponentInningInput` object that will be created and connected to this object.
  """
  create: [SoloModeOpponentInningGameIdFkeySoloModeOpponentInningCreateInput!]
}

"""The fields on `soloModeOpponentInning` to look up the row to update."""
input SoloModeOpponentInningOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyUsingSoloModeOpponentInningPkeyUpdate {
  """
  An object where the defined keys will be set on the `soloModeOpponentInning` being updated.
  """
  patch: updateSoloModeOpponentInningOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `soloModeOpponentInning` being updated.
"""
input updateSoloModeOpponentInningOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyPatch {
  id: UUID
  runsScored: Int
  game: SoloModeOpponentInningGameIdFkeyInput
  gameEvents: GameEventSoloModeOpponentInningIdFkeyInverseInput
}

"""
Input for the nested mutation of `gameEvent` in the `SoloModeOpponentInningInput` mutation.
"""
input GameEventSoloModeOpponentInningIdFkeyInverseInput {
  """
  Flag indicating whether all other `gameEvent` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectById: [GameEventGameEventPkeyConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectByNodeId: [GameEventNodeIdConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteById: [GameEventGameEventPkeyDelete!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteByNodeId: [GameEventNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateById: [GameEventOnGameEventForGameEventSoloModeOpponentInningIdFkeyUsingGameEventPkeyUpdate!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateByNodeId: [SoloModeOpponentInningOnGameEventForGameEventSoloModeOpponentInningIdFkeyNodeIdUpdate!]

  """
  A `GameEventInput` object that will be created and connected to this object.
  """
  create: [GameEventSoloModeOpponentInningIdFkeyGameEventCreateInput!]
}

"""The fields on `gameEvent` to look up the row to update."""
input GameEventOnGameEventForGameEventSoloModeOpponentInningIdFkeyUsingGameEventPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: updateGameEventOnGameEventForGameEventSoloModeOpponentInningIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameEvent` being updated.
"""
input updateGameEventOnGameEventForGameEventSoloModeOpponentInningIdFkeyPatch {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  atBatSkipId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""
Input for the nested mutation of `earlyGameEnd` in the `GameEventInput` mutation.
"""
input GameEventEarlyGameEndIdFkeyInput {
  """
  The primary key(s) for `earlyGameEnd` for the far side of the relationship.
  """
  connectById: EarlyGameEndEarlyGameEndPkeyConnect

  """
  The primary key(s) for `earlyGameEnd` for the far side of the relationship.
  """
  connectByNodeId: EarlyGameEndNodeIdConnect

  """
  The primary key(s) for `earlyGameEnd` for the far side of the relationship.
  """
  deleteById: EarlyGameEndEarlyGameEndPkeyDelete

  """
  The primary key(s) for `earlyGameEnd` for the far side of the relationship.
  """
  deleteByNodeId: EarlyGameEndNodeIdDelete

  """
  The primary key(s) and patch data for `earlyGameEnd` for the far side of the relationship.
  """
  updateById: EarlyGameEndOnGameEventForGameEventEarlyGameEndIdFkeyUsingEarlyGameEndPkeyUpdate

  """
  The primary key(s) and patch data for `earlyGameEnd` for the far side of the relationship.
  """
  updateByNodeId: GameEventOnGameEventForGameEventEarlyGameEndIdFkeyNodeIdUpdate

  """
  A `EarlyGameEndInput` object that will be created and connected to this object.
  """
  create: GameEventEarlyGameEndIdFkeyEarlyGameEndCreateInput
}

"""The fields on `earlyGameEnd` to look up the row to connect."""
input EarlyGameEndEarlyGameEndPkeyConnect {
  id: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input EarlyGameEndNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `earlyGameEnd` to be connected.
  """
  nodeId: ID!
}

"""The fields on `earlyGameEnd` to look up the row to delete."""
input EarlyGameEndEarlyGameEndPkeyDelete {
  id: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input EarlyGameEndNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `earlyGameEnd` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `earlyGameEnd` to look up the row to update."""
input EarlyGameEndOnGameEventForGameEventEarlyGameEndIdFkeyUsingEarlyGameEndPkeyUpdate {
  """
  An object where the defined keys will be set on the `earlyGameEnd` being updated.
  """
  patch: updateEarlyGameEndOnGameEventForGameEventEarlyGameEndIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `earlyGameEnd` being updated.
"""
input updateEarlyGameEndOnGameEventForGameEventEarlyGameEndIdFkeyPatch {
  id: UUID
  reason: EarlyGameEndReason
  gameId: UUID
  game: EarlyGameEndGameIdFkeyInput
  gameEvents: GameEventEarlyGameEndIdFkeyInverseInput
}

"""
Input for the nested mutation of `game` in the `EarlyGameEndInput` mutation.
"""
input EarlyGameEndGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnEarlyGameEndForEarlyGameEndGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnEarlyGameEndForEarlyGameEndGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: EarlyGameEndOnEarlyGameEndForEarlyGameEndGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: EarlyGameEndGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnEarlyGameEndForEarlyGameEndGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnEarlyGameEndForEarlyGameEndGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnEarlyGameEndForEarlyGameEndGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `atBatSkip` in the `GameInput` mutation.
"""
input AtBatSkipGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `atBatSkip` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `atBatSkip` for the far side of the relationship.
  """
  connectById: [AtBatSkipAtBatSkipPkeyConnect!]

  """
  The primary key(s) for `atBatSkip` for the far side of the relationship.
  """
  connectByNodeId: [AtBatSkipNodeIdConnect!]

  """
  The primary key(s) for `atBatSkip` for the far side of the relationship.
  """
  deleteById: [AtBatSkipAtBatSkipPkeyDelete!]

  """
  The primary key(s) for `atBatSkip` for the far side of the relationship.
  """
  deleteByNodeId: [AtBatSkipNodeIdDelete!]

  """
  The primary key(s) and patch data for `atBatSkip` for the far side of the relationship.
  """
  updateById: [AtBatSkipOnAtBatSkipForAtBatSkipGameIdFkeyUsingAtBatSkipPkeyUpdate!]

  """
  The primary key(s) and patch data for `atBatSkip` for the far side of the relationship.
  """
  updateByNodeId: [GameOnAtBatSkipForAtBatSkipGameIdFkeyNodeIdUpdate!]

  """
  A `AtBatSkipInput` object that will be created and connected to this object.
  """
  create: [AtBatSkipGameIdFkeyAtBatSkipCreateInput!]
}

"""The fields on `atBatSkip` to look up the row to update."""
input AtBatSkipOnAtBatSkipForAtBatSkipGameIdFkeyUsingAtBatSkipPkeyUpdate {
  """
  An object where the defined keys will be set on the `atBatSkip` being updated.
  """
  patch: updateAtBatSkipOnAtBatSkipForAtBatSkipGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `atBatSkip` being updated.
"""
input updateAtBatSkipOnAtBatSkipForAtBatSkipGameIdFkeyPatch {
  id: UUID
  batterId: UUID
  player: AtBatSkipBatterIdFkeyInput
  game: AtBatSkipGameIdFkeyInput
  gameEvents: GameEventAtBatSkipIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnAtBatSkipForAtBatSkipGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `atBatSkip` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `atBatSkip` being updated.
  """
  patch: AtBatSkipPatch!
}

"""
Represents an update to a `AtBatSkip`. Fields that are set will be updated.
"""
input AtBatSkipPatch {
  id: UUID
  batterId: UUID
  gameId: UUID
  player: AtBatSkipBatterIdFkeyInput
  game: AtBatSkipGameIdFkeyInput
  gameEvents: GameEventAtBatSkipIdFkeyInverseInput
}

"""The `atBatSkip` to be created by this mutation."""
input AtBatSkipGameIdFkeyAtBatSkipCreateInput {
  id: UUID
  batterId: UUID
  player: AtBatSkipBatterIdFkeyInput
  game: AtBatSkipGameIdFkeyInput
  gameEvents: GameEventAtBatSkipIdFkeyInverseInput
}

"""
Input for the nested mutation of `earlyGameEnd` in the `GameInput` mutation.
"""
input EarlyGameEndGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `earlyGameEnd` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `earlyGameEnd` for the far side of the relationship.
  """
  connectById: [EarlyGameEndEarlyGameEndPkeyConnect!]

  """
  The primary key(s) for `earlyGameEnd` for the far side of the relationship.
  """
  connectByNodeId: [EarlyGameEndNodeIdConnect!]

  """
  The primary key(s) for `earlyGameEnd` for the far side of the relationship.
  """
  deleteById: [EarlyGameEndEarlyGameEndPkeyDelete!]

  """
  The primary key(s) for `earlyGameEnd` for the far side of the relationship.
  """
  deleteByNodeId: [EarlyGameEndNodeIdDelete!]

  """
  The primary key(s) and patch data for `earlyGameEnd` for the far side of the relationship.
  """
  updateById: [EarlyGameEndOnEarlyGameEndForEarlyGameEndGameIdFkeyUsingEarlyGameEndPkeyUpdate!]

  """
  The primary key(s) and patch data for `earlyGameEnd` for the far side of the relationship.
  """
  updateByNodeId: [GameOnEarlyGameEndForEarlyGameEndGameIdFkeyNodeIdUpdate!]

  """
  A `EarlyGameEndInput` object that will be created and connected to this object.
  """
  create: [EarlyGameEndGameIdFkeyEarlyGameEndCreateInput!]
}

"""The fields on `earlyGameEnd` to look up the row to update."""
input EarlyGameEndOnEarlyGameEndForEarlyGameEndGameIdFkeyUsingEarlyGameEndPkeyUpdate {
  """
  An object where the defined keys will be set on the `earlyGameEnd` being updated.
  """
  patch: updateEarlyGameEndOnEarlyGameEndForEarlyGameEndGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `earlyGameEnd` being updated.
"""
input updateEarlyGameEndOnEarlyGameEndForEarlyGameEndGameIdFkeyPatch {
  id: UUID
  reason: EarlyGameEndReason
  game: EarlyGameEndGameIdFkeyInput
  gameEvents: GameEventEarlyGameEndIdFkeyInverseInput
}

"""
Input for the nested mutation of `gameEvent` in the `EarlyGameEndInput` mutation.
"""
input GameEventEarlyGameEndIdFkeyInverseInput {
  """
  Flag indicating whether all other `gameEvent` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectById: [GameEventGameEventPkeyConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  connectByNodeId: [GameEventNodeIdConnect!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteById: [GameEventGameEventPkeyDelete!]

  """
  The primary key(s) for `gameEvent` for the far side of the relationship.
  """
  deleteByNodeId: [GameEventNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateById: [GameEventOnGameEventForGameEventEarlyGameEndIdFkeyUsingGameEventPkeyUpdate!]

  """
  The primary key(s) and patch data for `gameEvent` for the far side of the relationship.
  """
  updateByNodeId: [EarlyGameEndOnGameEventForGameEventEarlyGameEndIdFkeyNodeIdUpdate!]

  """
  A `GameEventInput` object that will be created and connected to this object.
  """
  create: [GameEventEarlyGameEndIdFkeyGameEventCreateInput!]
}

"""The fields on `gameEvent` to look up the row to update."""
input GameEventOnGameEventForGameEventEarlyGameEndIdFkeyUsingGameEventPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: updateGameEventOnGameEventForGameEventEarlyGameEndIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameEvent` being updated.
"""
input updateGameEventOnGameEventForGameEventEarlyGameEndIdFkeyPatch {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  gameId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""
Input for the nested mutation of `gameEventRecord` in the `GameEventInput` mutation.
"""
input GameEventRecordGameEventIdFkeyInverseInput {
  """
  Flag indicating whether all other `gameEventRecord` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectById: [GameEventRecordGameEventRecordPkeyConnect!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectByGameIdAndEventIndex: [GameEventRecordGameEventRecordGameIdEventIndexKeyConnect!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  connectByNodeId: [GameEventRecordNodeIdConnect!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteById: [GameEventRecordGameEventRecordPkeyDelete!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteByGameIdAndEventIndex: [GameEventRecordGameEventRecordGameIdEventIndexKeyDelete!]

  """
  The primary key(s) for `gameEventRecord` for the far side of the relationship.
  """
  deleteByNodeId: [GameEventRecordNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateById: [GameEventRecordOnGameEventRecordForGameEventRecordGameEventIdFkeyUsingGameEventRecordPkeyUpdate!]

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateByGameIdAndEventIndex: [GameEventRecordOnGameEventRecordForGameEventRecordGameEventIdFkeyUsingGameEventRecordGameIdEventIndexKeyUpdate!]

  """
  The primary key(s) and patch data for `gameEventRecord` for the far side of the relationship.
  """
  updateByNodeId: [GameEventOnGameEventRecordForGameEventRecordGameEventIdFkeyNodeIdUpdate!]

  """
  A `GameEventRecordInput` object that will be created and connected to this object.
  """
  create: [GameEventRecordGameEventIdFkeyGameEventRecordCreateInput!]
}

"""The fields on `gameEventRecord` to look up the row to update."""
input GameEventRecordOnGameEventRecordForGameEventRecordGameEventIdFkeyUsingGameEventRecordPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: updateGameEventRecordOnGameEventRecordForGameEventRecordGameEventIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `gameEventRecord` being updated.
"""
input updateGameEventRecordOnGameEventRecordForGameEventRecordGameEventIdFkeyPatch {
  id: UUID
  gameId: UUID
  eventIndex: Int
  gameStateBeforeId: UUID
  gameStateAfterId: UUID
  notes: String
  game: GameEventRecordGameIdFkeyInput
  gameStateBefore: GameEventRecordGameStateBeforeFkInput
  gameStateAfter: GameEventRecordGameStateAfterFkInput
  gameEvent: GameEventRecordGameEventIdFkeyInput
  scoredRunners: ScoredRunnerGameEventRecordIdFkeyInverseInput
}

"""
Input for the nested mutation of `scoredRunner` in the `GameEventRecordInput` mutation.
"""
input ScoredRunnerGameEventRecordIdFkeyInverseInput {
  """
  Flag indicating whether all other `scoredRunner` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `scoredRunner` for the far side of the relationship.
  """
  connectByGameEventRecordIdAndRunnerId: [ScoredRunnerScoredRunnerPkeyConnect!]

  """
  The primary key(s) for `scoredRunner` for the far side of the relationship.
  """
  connectByNodeId: [ScoredRunnerNodeIdConnect!]

  """
  The primary key(s) for `scoredRunner` for the far side of the relationship.
  """
  deleteByGameEventRecordIdAndRunnerId: [ScoredRunnerScoredRunnerPkeyDelete!]

  """
  The primary key(s) for `scoredRunner` for the far side of the relationship.
  """
  deleteByNodeId: [ScoredRunnerNodeIdDelete!]

  """
  The primary key(s) and patch data for `scoredRunner` for the far side of the relationship.
  """
  updateByGameEventRecordIdAndRunnerId: [ScoredRunnerOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyUsingScoredRunnerPkeyUpdate!]

  """
  The primary key(s) and patch data for `scoredRunner` for the far side of the relationship.
  """
  updateByNodeId: [GameEventRecordOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyNodeIdUpdate!]

  """
  A `ScoredRunnerInput` object that will be created and connected to this object.
  """
  create: [ScoredRunnerGameEventRecordIdFkeyScoredRunnerCreateInput!]
}

"""The fields on `scoredRunner` to look up the row to update."""
input ScoredRunnerOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyUsingScoredRunnerPkeyUpdate {
  """
  An object where the defined keys will be set on the `scoredRunner` being updated.
  """
  patch: updateScoredRunnerOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyPatch!
  gameEventRecordId: UUID!
  runnerId: UUID!
}

"""
An object where the defined keys will be set on the `scoredRunner` being updated.
"""
input updateScoredRunnerOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyPatch {
  runnerId: UUID
  battedIn: Boolean
  gameId: UUID
  gameEventRecord: ScoredRunnerGameEventRecordIdFkeyInput
  player: ScoredRunnerRunnerIdFkeyInput
  game: ScoredRunnerGameIdFkeyInput
}

"""
Input for the nested mutation of `game` in the `ScoredRunnerInput` mutation.
"""
input ScoredRunnerGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnScoredRunnerForScoredRunnerGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnScoredRunnerForScoredRunnerGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: ScoredRunnerOnScoredRunnerForScoredRunnerGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: ScoredRunnerGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnScoredRunnerForScoredRunnerGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnScoredRunnerForScoredRunnerGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnScoredRunnerForScoredRunnerGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `manualEntryBattingLine` in the `GameInput` mutation.
"""
input ManualEntryBattingLineGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `manualEntryBattingLine` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `manualEntryBattingLine` for the far side of the relationship.
  """
  connectByGameIdAndTeamIdAndPlayerId: [ManualEntryBattingLineManualEntryBattingLinePkeyConnect!]

  """
  The primary key(s) for `manualEntryBattingLine` for the far side of the relationship.
  """
  connectByNodeId: [ManualEntryBattingLineNodeIdConnect!]

  """
  The primary key(s) for `manualEntryBattingLine` for the far side of the relationship.
  """
  deleteByGameIdAndTeamIdAndPlayerId: [ManualEntryBattingLineManualEntryBattingLinePkeyDelete!]

  """
  The primary key(s) for `manualEntryBattingLine` for the far side of the relationship.
  """
  deleteByNodeId: [ManualEntryBattingLineNodeIdDelete!]

  """
  The primary key(s) and patch data for `manualEntryBattingLine` for the far side of the relationship.
  """
  updateByGameIdAndTeamIdAndPlayerId: [ManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyUsingManualEntryBattingLinePkeyUpdate!]

  """
  The primary key(s) and patch data for `manualEntryBattingLine` for the far side of the relationship.
  """
  updateByNodeId: [GameOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyNodeIdUpdate!]

  """
  A `ManualEntryBattingLineInput` object that will be created and connected to this object.
  """
  create: [ManualEntryBattingLineGameIdFkeyManualEntryBattingLineCreateInput!]
}

"""The fields on `manualEntryBattingLine` to look up the row to connect."""
input ManualEntryBattingLineManualEntryBattingLinePkeyConnect {
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input ManualEntryBattingLineNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `manualEntryBattingLine` to be connected.
  """
  nodeId: ID!
}

"""The fields on `manualEntryBattingLine` to look up the row to delete."""
input ManualEntryBattingLineManualEntryBattingLinePkeyDelete {
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input ManualEntryBattingLineNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `manualEntryBattingLine` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `manualEntryBattingLine` to look up the row to update."""
input ManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyUsingManualEntryBattingLinePkeyUpdate {
  """
  An object where the defined keys will be set on the `manualEntryBattingLine` being updated.
  """
  patch: updateManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyPatch!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `manualEntryBattingLine` being updated.
"""
input updateManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyPatch {
  teamId: UUID
  playerId: UUID
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  game: ManualEntryBattingLineGameIdFkeyInput
  team: ManualEntryBattingLineTeamIdFkeyInput
  player: ManualEntryBattingLinePlayerIdFkeyInput
}

"""
Input for the nested mutation of `game` in the `ManualEntryBattingLineInput` mutation.
"""
input ManualEntryBattingLineGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: ManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: ManualEntryBattingLineGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `manualEntryPitchingLine` in the `GameInput` mutation.
"""
input ManualEntryPitchingLineGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `manualEntryPitchingLine` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `manualEntryPitchingLine` for the far side of the relationship.
  """
  connectByGameIdAndTeamIdAndPlayerId: [ManualEntryPitchingLineManualEntryPitchingLinePkeyConnect!]

  """
  The primary key(s) for `manualEntryPitchingLine` for the far side of the relationship.
  """
  connectByNodeId: [ManualEntryPitchingLineNodeIdConnect!]

  """
  The primary key(s) for `manualEntryPitchingLine` for the far side of the relationship.
  """
  deleteByGameIdAndTeamIdAndPlayerId: [ManualEntryPitchingLineManualEntryPitchingLinePkeyDelete!]

  """
  The primary key(s) for `manualEntryPitchingLine` for the far side of the relationship.
  """
  deleteByNodeId: [ManualEntryPitchingLineNodeIdDelete!]

  """
  The primary key(s) and patch data for `manualEntryPitchingLine` for the far side of the relationship.
  """
  updateByGameIdAndTeamIdAndPlayerId: [ManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyUsingManualEntryPitchingLinePkeyUpdate!]

  """
  The primary key(s) and patch data for `manualEntryPitchingLine` for the far side of the relationship.
  """
  updateByNodeId: [GameOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyNodeIdUpdate!]

  """
  A `ManualEntryPitchingLineInput` object that will be created and connected to this object.
  """
  create: [ManualEntryPitchingLineGameIdFkeyManualEntryPitchingLineCreateInput!]
}

"""The fields on `manualEntryPitchingLine` to look up the row to connect."""
input ManualEntryPitchingLineManualEntryPitchingLinePkeyConnect {
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input ManualEntryPitchingLineNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `manualEntryPitchingLine` to be connected.
  """
  nodeId: ID!
}

"""The fields on `manualEntryPitchingLine` to look up the row to delete."""
input ManualEntryPitchingLineManualEntryPitchingLinePkeyDelete {
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input ManualEntryPitchingLineNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `manualEntryPitchingLine` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `manualEntryPitchingLine` to look up the row to update."""
input ManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyUsingManualEntryPitchingLinePkeyUpdate {
  """
  An object where the defined keys will be set on the `manualEntryPitchingLine` being updated.
  """
  patch: updateManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyPatch!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `manualEntryPitchingLine` being updated.
"""
input updateManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyPatch {
  teamId: UUID
  playerId: UUID
  inningsPitched: Int
  won: Boolean
  lost: Boolean
  save: Boolean
  completeGame: Boolean
  qualityStart: Boolean
  runsAllowed: Int
  strikeouts: Int
  walks: Int
  game: ManualEntryPitchingLineGameIdFkeyInput
  team: ManualEntryPitchingLineTeamIdFkeyInput
  player: ManualEntryPitchingLinePlayerIdFkeyInput
}

"""
Input for the nested mutation of `game` in the `ManualEntryPitchingLineInput` mutation.
"""
input ManualEntryPitchingLineGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: ManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: ManualEntryPitchingLineGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `manualEntryLineScoreCell` in the `GameInput` mutation.
"""
input ManualEntryLineScoreCellGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `manualEntryLineScoreCell` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `manualEntryLineScoreCell` for the far side of the relationship.
  """
  connectByGameIdAndInningAndHalfInning: [ManualEntryLineScoreCellManualEntryLineScoreCellPkeyConnect!]

  """
  The primary key(s) for `manualEntryLineScoreCell` for the far side of the relationship.
  """
  connectByNodeId: [ManualEntryLineScoreCellNodeIdConnect!]

  """
  The primary key(s) for `manualEntryLineScoreCell` for the far side of the relationship.
  """
  deleteByGameIdAndInningAndHalfInning: [ManualEntryLineScoreCellManualEntryLineScoreCellPkeyDelete!]

  """
  The primary key(s) for `manualEntryLineScoreCell` for the far side of the relationship.
  """
  deleteByNodeId: [ManualEntryLineScoreCellNodeIdDelete!]

  """
  The primary key(s) and patch data for `manualEntryLineScoreCell` for the far side of the relationship.
  """
  updateByGameIdAndInningAndHalfInning: [ManualEntryLineScoreCellOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyUsingManualEntryLineScoreCellPkeyUpdate!]

  """
  The primary key(s) and patch data for `manualEntryLineScoreCell` for the far side of the relationship.
  """
  updateByNodeId: [GameOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyNodeIdUpdate!]

  """
  A `ManualEntryLineScoreCellInput` object that will be created and connected to this object.
  """
  create: [ManualEntryLineScoreCellGameIdFkeyManualEntryLineScoreCellCreateInput!]
}

"""
The fields on `manualEntryLineScoreCell` to look up the row to connect.
"""
input ManualEntryLineScoreCellManualEntryLineScoreCellPkeyConnect {
  gameId: UUID!
  inning: Int!
  halfInning: HalfInning!
}

"""The globally unique `ID` look up for the row to connect."""
input ManualEntryLineScoreCellNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `manualEntryLineScoreCell` to be connected.
  """
  nodeId: ID!
}

"""The fields on `manualEntryLineScoreCell` to look up the row to delete."""
input ManualEntryLineScoreCellManualEntryLineScoreCellPkeyDelete {
  gameId: UUID!
  inning: Int!
  halfInning: HalfInning!
}

"""The globally unique `ID` look up for the row to delete."""
input ManualEntryLineScoreCellNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `manualEntryLineScoreCell` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `manualEntryLineScoreCell` to look up the row to update."""
input ManualEntryLineScoreCellOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyUsingManualEntryLineScoreCellPkeyUpdate {
  """
  An object where the defined keys will be set on the `manualEntryLineScoreCell` being updated.
  """
  patch: updateManualEntryLineScoreCellOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyPatch!
  gameId: UUID!
  inning: Int!
  halfInning: HalfInning!
}

"""
An object where the defined keys will be set on the `manualEntryLineScoreCell` being updated.
"""
input updateManualEntryLineScoreCellOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyPatch {
  inning: Int
  halfInning: HalfInning
  runs: Int
  game: ManualEntryLineScoreCellGameIdFkeyInput
}

"""
Input for the nested mutation of `game` in the `ManualEntryLineScoreCellInput` mutation.
"""
input ManualEntryLineScoreCellGameIdFkeyInput {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyUsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyUsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: ManualEntryLineScoreCellOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyNodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: ManualEntryLineScoreCellGameIdFkeyGameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyUsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyPatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `gameBattingStat` in the `GameInput` mutation.
"""
input FakePublicGameBattingStatsForeignKey0InverseInput {
  """
  Flag indicating whether all other `gameBattingStat` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameBattingStat` for the far side of the relationship.
  """
  connectByGameIdAndTeamIdAndPlayerId: [GameBattingStatFakePublicGameBattingStatsPrimaryKeyConnect!]

  """
  The primary key(s) for `gameBattingStat` for the far side of the relationship.
  """
  connectByNodeId: [GameBattingStatNodeIdConnect!]

  """
  The primary key(s) for `gameBattingStat` for the far side of the relationship.
  """
  deleteByGameIdAndTeamIdAndPlayerId: [GameBattingStatFakePublicGameBattingStatsPrimaryKeyDelete!]

  """
  The primary key(s) for `gameBattingStat` for the far side of the relationship.
  """
  deleteByNodeId: [GameBattingStatNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameBattingStat` for the far side of the relationship.
  """
  updateByGameIdAndTeamIdAndPlayerId: [GameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey0UsingFakePublicGameBattingStatsPrimaryKeyUpdate!]

  """
  The primary key(s) and patch data for `gameBattingStat` for the far side of the relationship.
  """
  updateByNodeId: [GameOnGameBattingStatForFakePublicGameBattingStatsForeignKey0NodeIdUpdate!]

  """
  A `GameBattingStatInput` object that will be created and connected to this object.
  """
  create: [FakePublicGameBattingStatsForeignKey0GameBattingStatsCreateInput!]
}

"""The fields on `gameBattingStat` to look up the row to connect."""
input GameBattingStatFakePublicGameBattingStatsPrimaryKeyConnect {
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input GameBattingStatNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `gameBattingStat` to be connected.
  """
  nodeId: ID!
}

"""The fields on `gameBattingStat` to look up the row to delete."""
input GameBattingStatFakePublicGameBattingStatsPrimaryKeyDelete {
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input GameBattingStatNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `gameBattingStat` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `gameBattingStat` to look up the row to update."""
input GameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey0UsingFakePublicGameBattingStatsPrimaryKeyUpdate {
  """
  An object where the defined keys will be set on the `gameBattingStat` being updated.
  """
  patch: updateGameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey0Patch!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `gameBattingStat` being updated.
"""
input updateGameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey0Patch {
  teamId: UUID
  playerId: UUID
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  game: FakePublicGameBattingStatsForeignKey0Input
  team: FakePublicGameBattingStatsForeignKey1Input
  player: FakePublicGameBattingStatsForeignKey2Input
}

"""
Input for the nested mutation of `game` in the `GameBattingStatInput` mutation.
"""
input FakePublicGameBattingStatsForeignKey0Input {
  """The primary key(s) for `game` for the far side of the relationship."""
  connectById: GameGamePkeyConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByGroupIdAndName: GameGameNameUniqPerGroupConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  connectByNodeId: GameNodeIdConnect

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteById: GameGamePkeyDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByGroupIdAndName: GameGameNameUniqPerGroupDelete

  """The primary key(s) for `game` for the far side of the relationship."""
  deleteByNodeId: GameNodeIdDelete

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateById: GameOnGameBattingStatForFakePublicGameBattingStatsForeignKey0UsingGamePkeyUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByGroupIdAndName: GameOnGameBattingStatForFakePublicGameBattingStatsForeignKey0UsingGameNameUniqPerGroupUpdate

  """
  The primary key(s) and patch data for `game` for the far side of the relationship.
  """
  updateByNodeId: GameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey0NodeIdUpdate

  """
  A `GameInput` object that will be created and connected to this object.
  """
  create: FakePublicGameBattingStatsForeignKey0GameCreateInput
}

"""The fields on `game` to look up the row to update."""
input GameOnGameBattingStatForFakePublicGameBattingStatsForeignKey0UsingGamePkeyUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnGameBattingStatForFakePublicGameBattingStatsForeignKey0Patch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `game` being updated.
"""
input updateGameOnGameBattingStatForFakePublicGameBattingStatsForeignKey0Patch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The fields on `game` to look up the row to update."""
input GameOnGameBattingStatForFakePublicGameBattingStatsForeignKey0UsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnGameBattingStatForFakePublicGameBattingStatsForeignKey0Patch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input GameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey0NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""Represents an update to a `Game`. Fields that are set will be updated."""
input GamePatch {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]
  gameLength: Int
  timeStarted: Datetime
  timeEnded: Datetime
  timeSaved: Datetime
  soloMode: Boolean
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The `game` to be created by this mutation."""
input FakePublicGameBattingStatsForeignKey0GameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `team` in the `GameBattingStatInput` mutation.
"""
input FakePublicGameBattingStatsForeignKey1Input {
  """The primary key(s) for `team` for the far side of the relationship."""
  connectById: TeamTeamPkeyConnect

  """The primary key(s) for `team` for the far side of the relationship."""
  connectByGameIdAndRole: TeamTeamGameIdRoleKeyConnect

  """The primary key(s) for `team` for the far side of the relationship."""
  connectByNodeId: TeamNodeIdConnect

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteById: TeamTeamPkeyDelete

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteByGameIdAndRole: TeamTeamGameIdRoleKeyDelete

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteByNodeId: TeamNodeIdDelete

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateById: TeamOnGameBattingStatForFakePublicGameBattingStatsForeignKey1UsingTeamPkeyUpdate

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateByGameIdAndRole: TeamOnGameBattingStatForFakePublicGameBattingStatsForeignKey1UsingTeamGameIdRoleKeyUpdate

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateByNodeId: GameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey1NodeIdUpdate

  """
  A `TeamInput` object that will be created and connected to this object.
  """
  create: FakePublicGameBattingStatsForeignKey1TeamCreateInput
}

"""The fields on `team` to look up the row to update."""
input TeamOnGameBattingStatForFakePublicGameBattingStatsForeignKey1UsingTeamPkeyUpdate {
  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: updateTeamOnGameBattingStatForFakePublicGameBattingStatsForeignKey1Patch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `team` being updated.
"""
input updateTeamOnGameBattingStatForFakePublicGameBattingStatsForeignKey1Patch {
  id: UUID
  gameId: UUID
  role: TeamRole
  name: String
  captainId: UUID
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `manualEntryBattingLine` in the `TeamInput` mutation.
"""
input ManualEntryBattingLineTeamIdFkeyInverseInput {
  """
  Flag indicating whether all other `manualEntryBattingLine` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `manualEntryBattingLine` for the far side of the relationship.
  """
  connectByGameIdAndTeamIdAndPlayerId: [ManualEntryBattingLineManualEntryBattingLinePkeyConnect!]

  """
  The primary key(s) for `manualEntryBattingLine` for the far side of the relationship.
  """
  connectByNodeId: [ManualEntryBattingLineNodeIdConnect!]

  """
  The primary key(s) for `manualEntryBattingLine` for the far side of the relationship.
  """
  deleteByGameIdAndTeamIdAndPlayerId: [ManualEntryBattingLineManualEntryBattingLinePkeyDelete!]

  """
  The primary key(s) for `manualEntryBattingLine` for the far side of the relationship.
  """
  deleteByNodeId: [ManualEntryBattingLineNodeIdDelete!]

  """
  The primary key(s) and patch data for `manualEntryBattingLine` for the far side of the relationship.
  """
  updateByGameIdAndTeamIdAndPlayerId: [ManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyUsingManualEntryBattingLinePkeyUpdate!]

  """
  The primary key(s) and patch data for `manualEntryBattingLine` for the far side of the relationship.
  """
  updateByNodeId: [TeamOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyNodeIdUpdate!]

  """
  A `ManualEntryBattingLineInput` object that will be created and connected to this object.
  """
  create: [ManualEntryBattingLineTeamIdFkeyManualEntryBattingLineCreateInput!]
}

"""The fields on `manualEntryBattingLine` to look up the row to update."""
input ManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyUsingManualEntryBattingLinePkeyUpdate {
  """
  An object where the defined keys will be set on the `manualEntryBattingLine` being updated.
  """
  patch: updateManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyPatch!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `manualEntryBattingLine` being updated.
"""
input updateManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyPatch {
  gameId: UUID
  playerId: UUID
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  game: ManualEntryBattingLineGameIdFkeyInput
  team: ManualEntryBattingLineTeamIdFkeyInput
  player: ManualEntryBattingLinePlayerIdFkeyInput
}

"""
Input for the nested mutation of `team` in the `ManualEntryBattingLineInput` mutation.
"""
input ManualEntryBattingLineTeamIdFkeyInput {
  """The primary key(s) for `team` for the far side of the relationship."""
  connectById: TeamTeamPkeyConnect

  """The primary key(s) for `team` for the far side of the relationship."""
  connectByGameIdAndRole: TeamTeamGameIdRoleKeyConnect

  """The primary key(s) for `team` for the far side of the relationship."""
  connectByNodeId: TeamNodeIdConnect

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteById: TeamTeamPkeyDelete

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteByGameIdAndRole: TeamTeamGameIdRoleKeyDelete

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteByNodeId: TeamNodeIdDelete

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateById: TeamOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyUsingTeamPkeyUpdate

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateByGameIdAndRole: TeamOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyUsingTeamGameIdRoleKeyUpdate

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateByNodeId: ManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyNodeIdUpdate

  """
  A `TeamInput` object that will be created and connected to this object.
  """
  create: ManualEntryBattingLineTeamIdFkeyTeamCreateInput
}

"""The fields on `team` to look up the row to update."""
input TeamOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyUsingTeamPkeyUpdate {
  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: updateTeamOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `team` being updated.
"""
input updateTeamOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyPatch {
  id: UUID
  gameId: UUID
  role: TeamRole
  name: String
  captainId: UUID
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `manualEntryPitchingLine` in the `TeamInput` mutation.
"""
input ManualEntryPitchingLineTeamIdFkeyInverseInput {
  """
  Flag indicating whether all other `manualEntryPitchingLine` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `manualEntryPitchingLine` for the far side of the relationship.
  """
  connectByGameIdAndTeamIdAndPlayerId: [ManualEntryPitchingLineManualEntryPitchingLinePkeyConnect!]

  """
  The primary key(s) for `manualEntryPitchingLine` for the far side of the relationship.
  """
  connectByNodeId: [ManualEntryPitchingLineNodeIdConnect!]

  """
  The primary key(s) for `manualEntryPitchingLine` for the far side of the relationship.
  """
  deleteByGameIdAndTeamIdAndPlayerId: [ManualEntryPitchingLineManualEntryPitchingLinePkeyDelete!]

  """
  The primary key(s) for `manualEntryPitchingLine` for the far side of the relationship.
  """
  deleteByNodeId: [ManualEntryPitchingLineNodeIdDelete!]

  """
  The primary key(s) and patch data for `manualEntryPitchingLine` for the far side of the relationship.
  """
  updateByGameIdAndTeamIdAndPlayerId: [ManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyUsingManualEntryPitchingLinePkeyUpdate!]

  """
  The primary key(s) and patch data for `manualEntryPitchingLine` for the far side of the relationship.
  """
  updateByNodeId: [TeamOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyNodeIdUpdate!]

  """
  A `ManualEntryPitchingLineInput` object that will be created and connected to this object.
  """
  create: [ManualEntryPitchingLineTeamIdFkeyManualEntryPitchingLineCreateInput!]
}

"""The fields on `manualEntryPitchingLine` to look up the row to update."""
input ManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyUsingManualEntryPitchingLinePkeyUpdate {
  """
  An object where the defined keys will be set on the `manualEntryPitchingLine` being updated.
  """
  patch: updateManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyPatch!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `manualEntryPitchingLine` being updated.
"""
input updateManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyPatch {
  gameId: UUID
  playerId: UUID
  inningsPitched: Int
  won: Boolean
  lost: Boolean
  save: Boolean
  completeGame: Boolean
  qualityStart: Boolean
  runsAllowed: Int
  strikeouts: Int
  walks: Int
  game: ManualEntryPitchingLineGameIdFkeyInput
  team: ManualEntryPitchingLineTeamIdFkeyInput
  player: ManualEntryPitchingLinePlayerIdFkeyInput
}

"""
Input for the nested mutation of `team` in the `ManualEntryPitchingLineInput` mutation.
"""
input ManualEntryPitchingLineTeamIdFkeyInput {
  """The primary key(s) for `team` for the far side of the relationship."""
  connectById: TeamTeamPkeyConnect

  """The primary key(s) for `team` for the far side of the relationship."""
  connectByGameIdAndRole: TeamTeamGameIdRoleKeyConnect

  """The primary key(s) for `team` for the far side of the relationship."""
  connectByNodeId: TeamNodeIdConnect

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteById: TeamTeamPkeyDelete

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteByGameIdAndRole: TeamTeamGameIdRoleKeyDelete

  """The primary key(s) for `team` for the far side of the relationship."""
  deleteByNodeId: TeamNodeIdDelete

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateById: TeamOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyUsingTeamPkeyUpdate

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateByGameIdAndRole: TeamOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyUsingTeamGameIdRoleKeyUpdate

  """
  The primary key(s) and patch data for `team` for the far side of the relationship.
  """
  updateByNodeId: ManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyNodeIdUpdate

  """
  A `TeamInput` object that will be created and connected to this object.
  """
  create: ManualEntryPitchingLineTeamIdFkeyTeamCreateInput
}

"""The fields on `team` to look up the row to update."""
input TeamOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyUsingTeamPkeyUpdate {
  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: updateTeamOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `team` being updated.
"""
input updateTeamOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyPatch {
  id: UUID
  gameId: UUID
  role: TeamRole
  name: String
  captainId: UUID
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `gameBattingStat` in the `TeamInput` mutation.
"""
input FakePublicGameBattingStatsForeignKey1InverseInput {
  """
  Flag indicating whether all other `gameBattingStat` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameBattingStat` for the far side of the relationship.
  """
  connectByGameIdAndTeamIdAndPlayerId: [GameBattingStatFakePublicGameBattingStatsPrimaryKeyConnect!]

  """
  The primary key(s) for `gameBattingStat` for the far side of the relationship.
  """
  connectByNodeId: [GameBattingStatNodeIdConnect!]

  """
  The primary key(s) for `gameBattingStat` for the far side of the relationship.
  """
  deleteByGameIdAndTeamIdAndPlayerId: [GameBattingStatFakePublicGameBattingStatsPrimaryKeyDelete!]

  """
  The primary key(s) for `gameBattingStat` for the far side of the relationship.
  """
  deleteByNodeId: [GameBattingStatNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameBattingStat` for the far side of the relationship.
  """
  updateByGameIdAndTeamIdAndPlayerId: [GameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey1UsingFakePublicGameBattingStatsPrimaryKeyUpdate!]

  """
  The primary key(s) and patch data for `gameBattingStat` for the far side of the relationship.
  """
  updateByNodeId: [TeamOnGameBattingStatForFakePublicGameBattingStatsForeignKey1NodeIdUpdate!]

  """
  A `GameBattingStatInput` object that will be created and connected to this object.
  """
  create: [FakePublicGameBattingStatsForeignKey1GameBattingStatsCreateInput!]
}

"""The fields on `gameBattingStat` to look up the row to update."""
input GameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey1UsingFakePublicGameBattingStatsPrimaryKeyUpdate {
  """
  An object where the defined keys will be set on the `gameBattingStat` being updated.
  """
  patch: updateGameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey1Patch!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `gameBattingStat` being updated.
"""
input updateGameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey1Patch {
  gameId: UUID
  playerId: UUID
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  game: FakePublicGameBattingStatsForeignKey0Input
  team: FakePublicGameBattingStatsForeignKey1Input
  player: FakePublicGameBattingStatsForeignKey2Input
}

"""
Input for the nested mutation of `player` in the `GameBattingStatInput` mutation.
"""
input FakePublicGameBattingStatsForeignKey2Input {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnGameBattingStatForFakePublicGameBattingStatsForeignKey2UsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnGameBattingStatForFakePublicGameBattingStatsForeignKey2UsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: GameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey2NodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: FakePublicGameBattingStatsForeignKey2PlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnGameBattingStatForFakePublicGameBattingStatsForeignKey2UsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnGameBattingStatForFakePublicGameBattingStatsForeignKey2Patch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnGameBattingStatForFakePublicGameBattingStatsForeignKey2Patch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `manualEntryBattingLine` in the `PlayerInput` mutation.
"""
input ManualEntryBattingLinePlayerIdFkeyInverseInput {
  """
  Flag indicating whether all other `manualEntryBattingLine` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `manualEntryBattingLine` for the far side of the relationship.
  """
  connectByGameIdAndTeamIdAndPlayerId: [ManualEntryBattingLineManualEntryBattingLinePkeyConnect!]

  """
  The primary key(s) for `manualEntryBattingLine` for the far side of the relationship.
  """
  connectByNodeId: [ManualEntryBattingLineNodeIdConnect!]

  """
  The primary key(s) for `manualEntryBattingLine` for the far side of the relationship.
  """
  deleteByGameIdAndTeamIdAndPlayerId: [ManualEntryBattingLineManualEntryBattingLinePkeyDelete!]

  """
  The primary key(s) for `manualEntryBattingLine` for the far side of the relationship.
  """
  deleteByNodeId: [ManualEntryBattingLineNodeIdDelete!]

  """
  The primary key(s) and patch data for `manualEntryBattingLine` for the far side of the relationship.
  """
  updateByGameIdAndTeamIdAndPlayerId: [ManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyUsingManualEntryBattingLinePkeyUpdate!]

  """
  The primary key(s) and patch data for `manualEntryBattingLine` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyNodeIdUpdate!]

  """
  A `ManualEntryBattingLineInput` object that will be created and connected to this object.
  """
  create: [ManualEntryBattingLinePlayerIdFkeyManualEntryBattingLineCreateInput!]
}

"""The fields on `manualEntryBattingLine` to look up the row to update."""
input ManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyUsingManualEntryBattingLinePkeyUpdate {
  """
  An object where the defined keys will be set on the `manualEntryBattingLine` being updated.
  """
  patch: updateManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyPatch!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `manualEntryBattingLine` being updated.
"""
input updateManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyPatch {
  gameId: UUID
  teamId: UUID
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  game: ManualEntryBattingLineGameIdFkeyInput
  team: ManualEntryBattingLineTeamIdFkeyInput
  player: ManualEntryBattingLinePlayerIdFkeyInput
}

"""
Input for the nested mutation of `player` in the `ManualEntryBattingLineInput` mutation.
"""
input ManualEntryBattingLinePlayerIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: ManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: ManualEntryBattingLinePlayerIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `manualEntryPitchingLine` in the `PlayerInput` mutation.
"""
input ManualEntryPitchingLinePlayerIdFkeyInverseInput {
  """
  Flag indicating whether all other `manualEntryPitchingLine` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `manualEntryPitchingLine` for the far side of the relationship.
  """
  connectByGameIdAndTeamIdAndPlayerId: [ManualEntryPitchingLineManualEntryPitchingLinePkeyConnect!]

  """
  The primary key(s) for `manualEntryPitchingLine` for the far side of the relationship.
  """
  connectByNodeId: [ManualEntryPitchingLineNodeIdConnect!]

  """
  The primary key(s) for `manualEntryPitchingLine` for the far side of the relationship.
  """
  deleteByGameIdAndTeamIdAndPlayerId: [ManualEntryPitchingLineManualEntryPitchingLinePkeyDelete!]

  """
  The primary key(s) for `manualEntryPitchingLine` for the far side of the relationship.
  """
  deleteByNodeId: [ManualEntryPitchingLineNodeIdDelete!]

  """
  The primary key(s) and patch data for `manualEntryPitchingLine` for the far side of the relationship.
  """
  updateByGameIdAndTeamIdAndPlayerId: [ManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyUsingManualEntryPitchingLinePkeyUpdate!]

  """
  The primary key(s) and patch data for `manualEntryPitchingLine` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyNodeIdUpdate!]

  """
  A `ManualEntryPitchingLineInput` object that will be created and connected to this object.
  """
  create: [ManualEntryPitchingLinePlayerIdFkeyManualEntryPitchingLineCreateInput!]
}

"""The fields on `manualEntryPitchingLine` to look up the row to update."""
input ManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyUsingManualEntryPitchingLinePkeyUpdate {
  """
  An object where the defined keys will be set on the `manualEntryPitchingLine` being updated.
  """
  patch: updateManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyPatch!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `manualEntryPitchingLine` being updated.
"""
input updateManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyPatch {
  gameId: UUID
  teamId: UUID
  inningsPitched: Int
  won: Boolean
  lost: Boolean
  save: Boolean
  completeGame: Boolean
  qualityStart: Boolean
  runsAllowed: Int
  strikeouts: Int
  walks: Int
  game: ManualEntryPitchingLineGameIdFkeyInput
  team: ManualEntryPitchingLineTeamIdFkeyInput
  player: ManualEntryPitchingLinePlayerIdFkeyInput
}

"""
Input for the nested mutation of `player` in the `ManualEntryPitchingLineInput` mutation.
"""
input ManualEntryPitchingLinePlayerIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: ManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: ManualEntryPitchingLinePlayerIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `playerAuxMeetupInfo` in the `PlayerInput` mutation.
"""
input PlayerAuxMeetupInfoPlayerIdFkeyInverseInput {
  """
  Flag indicating whether all other `playerAuxMeetupInfo` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `playerAuxMeetupInfo` for the far side of the relationship.
  """
  connectByPlayerId: PlayerAuxMeetupInfoPlayerAuxMeetupInfoPkeyConnect

  """
  The primary key(s) for `playerAuxMeetupInfo` for the far side of the relationship.
  """
  connectByNodeId: PlayerAuxMeetupInfoNodeIdConnect

  """
  The primary key(s) for `playerAuxMeetupInfo` for the far side of the relationship.
  """
  deleteByPlayerId: PlayerAuxMeetupInfoPlayerAuxMeetupInfoPkeyDelete

  """
  The primary key(s) for `playerAuxMeetupInfo` for the far side of the relationship.
  """
  deleteByNodeId: PlayerAuxMeetupInfoNodeIdDelete

  """
  The primary key(s) and patch data for `playerAuxMeetupInfo` for the far side of the relationship.
  """
  updateByPlayerId: PlayerAuxMeetupInfoOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyUsingPlayerAuxMeetupInfoPkeyUpdate

  """
  The primary key(s) and patch data for `playerAuxMeetupInfo` for the far side of the relationship.
  """
  updateByNodeId: PlayerOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyNodeIdUpdate

  """
  A `PlayerAuxMeetupInfoInput` object that will be created and connected to this object.
  """
  create: [PlayerAuxMeetupInfoPlayerIdFkeyPlayerAuxMeetupInfoCreateInput!]
}

"""The fields on `playerAuxMeetupInfo` to look up the row to connect."""
input PlayerAuxMeetupInfoPlayerAuxMeetupInfoPkeyConnect {
  playerId: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input PlayerAuxMeetupInfoNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `playerAuxMeetupInfo` to be connected.
  """
  nodeId: ID!
}

"""The fields on `playerAuxMeetupInfo` to look up the row to delete."""
input PlayerAuxMeetupInfoPlayerAuxMeetupInfoPkeyDelete {
  playerId: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input PlayerAuxMeetupInfoNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `playerAuxMeetupInfo` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `playerAuxMeetupInfo` to look up the row to update."""
input PlayerAuxMeetupInfoOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyUsingPlayerAuxMeetupInfoPkeyUpdate {
  """
  An object where the defined keys will be set on the `playerAuxMeetupInfo` being updated.
  """
  patch: updatePlayerAuxMeetupInfoOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyPatch!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `playerAuxMeetupInfo` being updated.
"""
input updatePlayerAuxMeetupInfoOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyPatch {
  gender: Gender
  bats: Handedness
  throws: Handedness
  preferredPositionFirst: FieldingPosition
  preferredPositionSecond: FieldingPosition
  preferredPositionThird: FieldingPosition
  meetupMemberId: String
  adminNickname: String
  selfNickname: String
  skillLevel: Int
  favoriteTeam: String
  hometown: String
  school: String
  dateDebuted: Date
  player: PlayerAuxMeetupInfoPlayerIdFkeyInput
}

"""
Input for the nested mutation of `player` in the `PlayerAuxMeetupInfoInput` mutation.
"""
input PlayerAuxMeetupInfoPlayerIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: PlayerAuxMeetupInfoOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: PlayerAuxMeetupInfoPlayerIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `gameAuxMeetupInfo` in the `PlayerInput` mutation.
"""
input GameAuxMeetupInfoGameIdFkeyInverseInput {
  """
  Flag indicating whether all other `gameAuxMeetupInfo` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameAuxMeetupInfo` for the far side of the relationship.
  """
  connectByGameId: GameAuxMeetupInfoGameAuxMeetupInfoPkeyConnect

  """
  The primary key(s) for `gameAuxMeetupInfo` for the far side of the relationship.
  """
  connectByNodeId: GameAuxMeetupInfoNodeIdConnect

  """
  The primary key(s) for `gameAuxMeetupInfo` for the far side of the relationship.
  """
  deleteByGameId: GameAuxMeetupInfoGameAuxMeetupInfoPkeyDelete

  """
  The primary key(s) for `gameAuxMeetupInfo` for the far side of the relationship.
  """
  deleteByNodeId: GameAuxMeetupInfoNodeIdDelete

  """
  The primary key(s) and patch data for `gameAuxMeetupInfo` for the far side of the relationship.
  """
  updateByGameId: GameAuxMeetupInfoOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyUsingGameAuxMeetupInfoPkeyUpdate

  """
  The primary key(s) and patch data for `gameAuxMeetupInfo` for the far side of the relationship.
  """
  updateByNodeId: PlayerOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyNodeIdUpdate

  """
  A `GameAuxMeetupInfoInput` object that will be created and connected to this object.
  """
  create: [GameAuxMeetupInfoGameIdFkeyGameAuxMeetupInfoCreateInput!]
}

"""The fields on `gameAuxMeetupInfo` to look up the row to connect."""
input GameAuxMeetupInfoGameAuxMeetupInfoPkeyConnect {
  gameId: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input GameAuxMeetupInfoNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `gameAuxMeetupInfo` to be connected.
  """
  nodeId: ID!
}

"""The fields on `gameAuxMeetupInfo` to look up the row to delete."""
input GameAuxMeetupInfoGameAuxMeetupInfoPkeyDelete {
  gameId: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input GameAuxMeetupInfoNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `gameAuxMeetupInfo` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `gameAuxMeetupInfo` to look up the row to update."""
input GameAuxMeetupInfoOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyUsingGameAuxMeetupInfoPkeyUpdate {
  """
  An object where the defined keys will be set on the `gameAuxMeetupInfo` being updated.
  """
  patch: updateGameAuxMeetupInfoOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyPatch!
  gameId: UUID!
}

"""
An object where the defined keys will be set on the `gameAuxMeetupInfo` being updated.
"""
input updateGameAuxMeetupInfoOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyPatch {
  imageGalleryUrl: String
  meetupEventId: String
  advanced: Boolean
  player: GameAuxMeetupInfoGameIdFkeyInput
}

"""
Input for the nested mutation of `player` in the `GameAuxMeetupInfoInput` mutation.
"""
input GameAuxMeetupInfoGameIdFkeyInput {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyUsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyUsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: GameAuxMeetupInfoOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyNodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: GameAuxMeetupInfoGameIdFkeyPlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyUsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `careerBattingStat` in the `PlayerInput` mutation.
"""
input FakePublicCareerBattingStatsForeignKey1InverseInput {
  """
  Flag indicating whether all other `careerBattingStat` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `careerBattingStat` for the far side of the relationship.
  """
  connectByGroupIdAndPlayerId: [CareerBattingStatFakePublicCareerBattingStatsPrimaryKeyConnect!]

  """
  The primary key(s) for `careerBattingStat` for the far side of the relationship.
  """
  connectByNodeId: [CareerBattingStatNodeIdConnect!]

  """
  The primary key(s) for `careerBattingStat` for the far side of the relationship.
  """
  deleteByGroupIdAndPlayerId: [CareerBattingStatFakePublicCareerBattingStatsPrimaryKeyDelete!]

  """
  The primary key(s) for `careerBattingStat` for the far side of the relationship.
  """
  deleteByNodeId: [CareerBattingStatNodeIdDelete!]

  """
  The primary key(s) and patch data for `careerBattingStat` for the far side of the relationship.
  """
  updateByGroupIdAndPlayerId: [CareerBattingStatOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1UsingFakePublicCareerBattingStatsPrimaryKeyUpdate!]

  """
  The primary key(s) and patch data for `careerBattingStat` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1NodeIdUpdate!]

  """
  A `CareerBattingStatInput` object that will be created and connected to this object.
  """
  create: [FakePublicCareerBattingStatsForeignKey1CareerBattingStatsCreateInput!]
}

"""The fields on `careerBattingStat` to look up the row to connect."""
input CareerBattingStatFakePublicCareerBattingStatsPrimaryKeyConnect {
  groupId: UUID!
  playerId: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input CareerBattingStatNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `careerBattingStat` to be connected.
  """
  nodeId: ID!
}

"""The fields on `careerBattingStat` to look up the row to delete."""
input CareerBattingStatFakePublicCareerBattingStatsPrimaryKeyDelete {
  groupId: UUID!
  playerId: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input CareerBattingStatNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `careerBattingStat` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `careerBattingStat` to look up the row to update."""
input CareerBattingStatOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1UsingFakePublicCareerBattingStatsPrimaryKeyUpdate {
  """
  An object where the defined keys will be set on the `careerBattingStat` being updated.
  """
  patch: updateCareerBattingStatOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1Patch!
  groupId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `careerBattingStat` being updated.
"""
input updateCareerBattingStatOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1Patch {
  groupId: UUID
  seasons: Int
  games: Int
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  avg: Float
  obp: Float
  slg: Float
  ops: Float
  group: FakePublicCareerBattingStatsForeignKey0Input
  player: FakePublicCareerBattingStatsForeignKey1Input
}

"""
Input for the nested mutation of `group` in the `CareerBattingStatInput` mutation.
"""
input FakePublicCareerBattingStatsForeignKey0Input {
  """The primary key(s) for `group` for the far side of the relationship."""
  connectById: GroupGroupPkeyConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  connectByName: GroupGroupNameKeyConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  connectByUrlSlug: GroupGroupUrlSlugKeyConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  connectByNodeId: GroupNodeIdConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteById: GroupGroupPkeyDelete

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteByName: GroupGroupNameKeyDelete

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteByUrlSlug: GroupGroupUrlSlugKeyDelete

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteByNodeId: GroupNodeIdDelete

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateById: GroupOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0UsingGroupPkeyUpdate

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateByName: GroupOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0UsingGroupNameKeyUpdate

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateByUrlSlug: GroupOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0UsingGroupUrlSlugKeyUpdate

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateByNodeId: CareerBattingStatOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0NodeIdUpdate

  """
  A `GroupInput` object that will be created and connected to this object.
  """
  create: FakePublicCareerBattingStatsForeignKey0GroupCreateInput
}

"""The fields on `group` to look up the row to update."""
input GroupOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0UsingGroupPkeyUpdate {
  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: updateGroupOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0Patch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `group` being updated.
"""
input updateGroupOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0Patch {
  id: UUID
  name: String
  notes: String
  soloMode: Boolean
  urlSlug: String
  allowSkippingAtBats: Boolean
  allowSteals: Boolean
  games: GameGroupIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipGroupIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey0InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `playerGroupMembership` in the `GroupInput` mutation.
"""
input PlayerGroupMembershipGroupIdFkeyInverseInput {
  """
  Flag indicating whether all other `playerGroupMembership` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `playerGroupMembership` for the far side of the relationship.
  """
  connectByPlayerIdAndGroupId: [PlayerGroupMembershipPlayerGroupMembershipPkeyConnect!]

  """
  The primary key(s) for `playerGroupMembership` for the far side of the relationship.
  """
  connectByNodeId: [PlayerGroupMembershipNodeIdConnect!]

  """
  The primary key(s) for `playerGroupMembership` for the far side of the relationship.
  """
  deleteByPlayerIdAndGroupId: [PlayerGroupMembershipPlayerGroupMembershipPkeyDelete!]

  """
  The primary key(s) for `playerGroupMembership` for the far side of the relationship.
  """
  deleteByNodeId: [PlayerGroupMembershipNodeIdDelete!]

  """
  The primary key(s) and patch data for `playerGroupMembership` for the far side of the relationship.
  """
  updateByPlayerIdAndGroupId: [PlayerGroupMembershipOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyUsingPlayerGroupMembershipPkeyUpdate!]

  """
  The primary key(s) and patch data for `playerGroupMembership` for the far side of the relationship.
  """
  updateByNodeId: [GroupOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyNodeIdUpdate!]

  """
  A `PlayerGroupMembershipInput` object that will be created and connected to this object.
  """
  create: [PlayerGroupMembershipGroupIdFkeyPlayerGroupMembershipCreateInput!]
}

"""The fields on `playerGroupMembership` to look up the row to update."""
input PlayerGroupMembershipOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyUsingPlayerGroupMembershipPkeyUpdate {
  """
  An object where the defined keys will be set on the `playerGroupMembership` being updated.
  """
  patch: updatePlayerGroupMembershipOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyPatch!
  playerId: UUID!
  groupId: UUID!
}

"""
An object where the defined keys will be set on the `playerGroupMembership` being updated.
"""
input updatePlayerGroupMembershipOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyPatch {
  playerId: UUID
  player: PlayerGroupMembershipPlayerIdFkeyInput
  group: PlayerGroupMembershipGroupIdFkeyInput
}

"""
Input for the nested mutation of `group` in the `PlayerGroupMembershipInput` mutation.
"""
input PlayerGroupMembershipGroupIdFkeyInput {
  """The primary key(s) for `group` for the far side of the relationship."""
  connectById: GroupGroupPkeyConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  connectByName: GroupGroupNameKeyConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  connectByUrlSlug: GroupGroupUrlSlugKeyConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  connectByNodeId: GroupNodeIdConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteById: GroupGroupPkeyDelete

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteByName: GroupGroupNameKeyDelete

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteByUrlSlug: GroupGroupUrlSlugKeyDelete

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteByNodeId: GroupNodeIdDelete

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateById: GroupOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyUsingGroupPkeyUpdate

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateByName: GroupOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyUsingGroupNameKeyUpdate

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateByUrlSlug: GroupOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyUsingGroupUrlSlugKeyUpdate

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateByNodeId: PlayerGroupMembershipOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyNodeIdUpdate

  """
  A `GroupInput` object that will be created and connected to this object.
  """
  create: PlayerGroupMembershipGroupIdFkeyGroupCreateInput
}

"""The fields on `group` to look up the row to update."""
input GroupOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyUsingGroupPkeyUpdate {
  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: updateGroupOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyPatch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `group` being updated.
"""
input updateGroupOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyPatch {
  id: UUID
  name: String
  notes: String
  soloMode: Boolean
  urlSlug: String
  allowSkippingAtBats: Boolean
  allowSteals: Boolean
  games: GameGroupIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipGroupIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey0InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `careerBattingStat` in the `GroupInput` mutation.
"""
input FakePublicCareerBattingStatsForeignKey0InverseInput {
  """
  Flag indicating whether all other `careerBattingStat` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `careerBattingStat` for the far side of the relationship.
  """
  connectByGroupIdAndPlayerId: [CareerBattingStatFakePublicCareerBattingStatsPrimaryKeyConnect!]

  """
  The primary key(s) for `careerBattingStat` for the far side of the relationship.
  """
  connectByNodeId: [CareerBattingStatNodeIdConnect!]

  """
  The primary key(s) for `careerBattingStat` for the far side of the relationship.
  """
  deleteByGroupIdAndPlayerId: [CareerBattingStatFakePublicCareerBattingStatsPrimaryKeyDelete!]

  """
  The primary key(s) for `careerBattingStat` for the far side of the relationship.
  """
  deleteByNodeId: [CareerBattingStatNodeIdDelete!]

  """
  The primary key(s) and patch data for `careerBattingStat` for the far side of the relationship.
  """
  updateByGroupIdAndPlayerId: [CareerBattingStatOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0UsingFakePublicCareerBattingStatsPrimaryKeyUpdate!]

  """
  The primary key(s) and patch data for `careerBattingStat` for the far side of the relationship.
  """
  updateByNodeId: [GroupOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0NodeIdUpdate!]

  """
  A `CareerBattingStatInput` object that will be created and connected to this object.
  """
  create: [FakePublicCareerBattingStatsForeignKey0CareerBattingStatsCreateInput!]
}

"""The fields on `careerBattingStat` to look up the row to update."""
input CareerBattingStatOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0UsingFakePublicCareerBattingStatsPrimaryKeyUpdate {
  """
  An object where the defined keys will be set on the `careerBattingStat` being updated.
  """
  patch: updateCareerBattingStatOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0Patch!
  groupId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `careerBattingStat` being updated.
"""
input updateCareerBattingStatOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0Patch {
  playerId: UUID
  seasons: Int
  games: Int
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  avg: Float
  obp: Float
  slg: Float
  ops: Float
  group: FakePublicCareerBattingStatsForeignKey0Input
  player: FakePublicCareerBattingStatsForeignKey1Input
}

"""
Input for the nested mutation of `player` in the `CareerBattingStatInput` mutation.
"""
input FakePublicCareerBattingStatsForeignKey1Input {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1UsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1UsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: CareerBattingStatOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1NodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: FakePublicCareerBattingStatsForeignKey1PlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1UsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1Patch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1Patch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""
Input for the nested mutation of `gameBattingStat` in the `PlayerInput` mutation.
"""
input FakePublicGameBattingStatsForeignKey2InverseInput {
  """
  Flag indicating whether all other `gameBattingStat` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `gameBattingStat` for the far side of the relationship.
  """
  connectByGameIdAndTeamIdAndPlayerId: [GameBattingStatFakePublicGameBattingStatsPrimaryKeyConnect!]

  """
  The primary key(s) for `gameBattingStat` for the far side of the relationship.
  """
  connectByNodeId: [GameBattingStatNodeIdConnect!]

  """
  The primary key(s) for `gameBattingStat` for the far side of the relationship.
  """
  deleteByGameIdAndTeamIdAndPlayerId: [GameBattingStatFakePublicGameBattingStatsPrimaryKeyDelete!]

  """
  The primary key(s) for `gameBattingStat` for the far side of the relationship.
  """
  deleteByNodeId: [GameBattingStatNodeIdDelete!]

  """
  The primary key(s) and patch data for `gameBattingStat` for the far side of the relationship.
  """
  updateByGameIdAndTeamIdAndPlayerId: [GameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey2UsingFakePublicGameBattingStatsPrimaryKeyUpdate!]

  """
  The primary key(s) and patch data for `gameBattingStat` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnGameBattingStatForFakePublicGameBattingStatsForeignKey2NodeIdUpdate!]

  """
  A `GameBattingStatInput` object that will be created and connected to this object.
  """
  create: [FakePublicGameBattingStatsForeignKey2GameBattingStatsCreateInput!]
}

"""The fields on `gameBattingStat` to look up the row to update."""
input GameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey2UsingFakePublicGameBattingStatsPrimaryKeyUpdate {
  """
  An object where the defined keys will be set on the `gameBattingStat` being updated.
  """
  patch: updateGameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey2Patch!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `gameBattingStat` being updated.
"""
input updateGameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey2Patch {
  gameId: UUID
  teamId: UUID
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  game: FakePublicGameBattingStatsForeignKey0Input
  team: FakePublicGameBattingStatsForeignKey1Input
  player: FakePublicGameBattingStatsForeignKey2Input
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnGameBattingStatForFakePublicGameBattingStatsForeignKey2NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameBattingStat` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameBattingStat` being updated.
  """
  patch: GameBattingStatPatch!
}

"""
Represents an update to a `GameBattingStat`. Fields that are set will be updated.
"""
input GameBattingStatPatch {
  gameId: UUID
  teamId: UUID
  playerId: UUID
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  game: FakePublicGameBattingStatsForeignKey0Input
  team: FakePublicGameBattingStatsForeignKey1Input
  player: FakePublicGameBattingStatsForeignKey2Input
}

"""The `gameBattingStat` to be created by this mutation."""
input FakePublicGameBattingStatsForeignKey2GameBattingStatsCreateInput {
  gameId: UUID
  teamId: UUID
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!
  game: FakePublicGameBattingStatsForeignKey0Input
  team: FakePublicGameBattingStatsForeignKey1Input
  player: FakePublicGameBattingStatsForeignKey2Input
}

"""
Input for the nested mutation of `seasonBattingStat` in the `PlayerInput` mutation.
"""
input FakePublicSeasonBattingStatsForeignKey1InverseInput {
  """
  Flag indicating whether all other `seasonBattingStat` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `seasonBattingStat` for the far side of the relationship.
  """
  connectByGroupIdAndPlayerId: [SeasonBattingStatFakePublicSeasonBattingStatsPrimaryKeyConnect!]

  """
  The primary key(s) for `seasonBattingStat` for the far side of the relationship.
  """
  connectByNodeId: [SeasonBattingStatNodeIdConnect!]

  """
  The primary key(s) for `seasonBattingStat` for the far side of the relationship.
  """
  deleteByGroupIdAndPlayerId: [SeasonBattingStatFakePublicSeasonBattingStatsPrimaryKeyDelete!]

  """
  The primary key(s) for `seasonBattingStat` for the far side of the relationship.
  """
  deleteByNodeId: [SeasonBattingStatNodeIdDelete!]

  """
  The primary key(s) and patch data for `seasonBattingStat` for the far side of the relationship.
  """
  updateByGroupIdAndPlayerId: [SeasonBattingStatOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1UsingFakePublicSeasonBattingStatsPrimaryKeyUpdate!]

  """
  The primary key(s) and patch data for `seasonBattingStat` for the far side of the relationship.
  """
  updateByNodeId: [PlayerOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1NodeIdUpdate!]

  """
  A `SeasonBattingStatInput` object that will be created and connected to this object.
  """
  create: [FakePublicSeasonBattingStatsForeignKey1SeasonBattingStatsCreateInput!]
}

"""The fields on `seasonBattingStat` to look up the row to connect."""
input SeasonBattingStatFakePublicSeasonBattingStatsPrimaryKeyConnect {
  groupId: UUID!
  playerId: UUID!
}

"""The globally unique `ID` look up for the row to connect."""
input SeasonBattingStatNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `seasonBattingStat` to be connected.
  """
  nodeId: ID!
}

"""The fields on `seasonBattingStat` to look up the row to delete."""
input SeasonBattingStatFakePublicSeasonBattingStatsPrimaryKeyDelete {
  groupId: UUID!
  playerId: UUID!
}

"""The globally unique `ID` look up for the row to delete."""
input SeasonBattingStatNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `seasonBattingStat` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `seasonBattingStat` to look up the row to update."""
input SeasonBattingStatOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1UsingFakePublicSeasonBattingStatsPrimaryKeyUpdate {
  """
  An object where the defined keys will be set on the `seasonBattingStat` being updated.
  """
  patch: updateSeasonBattingStatOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1Patch!
  groupId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `seasonBattingStat` being updated.
"""
input updateSeasonBattingStatOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1Patch {
  groupId: UUID
  season: Int
  games: Int
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  avg: Float
  obp: Float
  slg: Float
  ops: Float
  group: FakePublicSeasonBattingStatsForeignKey0Input
  player: FakePublicSeasonBattingStatsForeignKey1Input
}

"""
Input for the nested mutation of `group` in the `SeasonBattingStatInput` mutation.
"""
input FakePublicSeasonBattingStatsForeignKey0Input {
  """The primary key(s) for `group` for the far side of the relationship."""
  connectById: GroupGroupPkeyConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  connectByName: GroupGroupNameKeyConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  connectByUrlSlug: GroupGroupUrlSlugKeyConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  connectByNodeId: GroupNodeIdConnect

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteById: GroupGroupPkeyDelete

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteByName: GroupGroupNameKeyDelete

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteByUrlSlug: GroupGroupUrlSlugKeyDelete

  """The primary key(s) for `group` for the far side of the relationship."""
  deleteByNodeId: GroupNodeIdDelete

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateById: GroupOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0UsingGroupPkeyUpdate

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateByName: GroupOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0UsingGroupNameKeyUpdate

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateByUrlSlug: GroupOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0UsingGroupUrlSlugKeyUpdate

  """
  The primary key(s) and patch data for `group` for the far side of the relationship.
  """
  updateByNodeId: SeasonBattingStatOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0NodeIdUpdate

  """
  A `GroupInput` object that will be created and connected to this object.
  """
  create: FakePublicSeasonBattingStatsForeignKey0GroupCreateInput
}

"""The fields on `group` to look up the row to update."""
input GroupOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0UsingGroupPkeyUpdate {
  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: updateGroupOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0Patch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `group` being updated.
"""
input updateGroupOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0Patch {
  id: UUID
  name: String
  notes: String
  soloMode: Boolean
  urlSlug: String
  allowSkippingAtBats: Boolean
  allowSteals: Boolean
  games: GameGroupIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipGroupIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey0InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey0InverseInput
}

"""
Input for the nested mutation of `seasonBattingStat` in the `GroupInput` mutation.
"""
input FakePublicSeasonBattingStatsForeignKey0InverseInput {
  """
  Flag indicating whether all other `seasonBattingStat` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `seasonBattingStat` for the far side of the relationship.
  """
  connectByGroupIdAndPlayerId: [SeasonBattingStatFakePublicSeasonBattingStatsPrimaryKeyConnect!]

  """
  The primary key(s) for `seasonBattingStat` for the far side of the relationship.
  """
  connectByNodeId: [SeasonBattingStatNodeIdConnect!]

  """
  The primary key(s) for `seasonBattingStat` for the far side of the relationship.
  """
  deleteByGroupIdAndPlayerId: [SeasonBattingStatFakePublicSeasonBattingStatsPrimaryKeyDelete!]

  """
  The primary key(s) for `seasonBattingStat` for the far side of the relationship.
  """
  deleteByNodeId: [SeasonBattingStatNodeIdDelete!]

  """
  The primary key(s) and patch data for `seasonBattingStat` for the far side of the relationship.
  """
  updateByGroupIdAndPlayerId: [SeasonBattingStatOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0UsingFakePublicSeasonBattingStatsPrimaryKeyUpdate!]

  """
  The primary key(s) and patch data for `seasonBattingStat` for the far side of the relationship.
  """
  updateByNodeId: [GroupOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0NodeIdUpdate!]

  """
  A `SeasonBattingStatInput` object that will be created and connected to this object.
  """
  create: [FakePublicSeasonBattingStatsForeignKey0SeasonBattingStatsCreateInput!]
}

"""The fields on `seasonBattingStat` to look up the row to update."""
input SeasonBattingStatOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0UsingFakePublicSeasonBattingStatsPrimaryKeyUpdate {
  """
  An object where the defined keys will be set on the `seasonBattingStat` being updated.
  """
  patch: updateSeasonBattingStatOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0Patch!
  groupId: UUID!
  playerId: UUID!
}

"""
An object where the defined keys will be set on the `seasonBattingStat` being updated.
"""
input updateSeasonBattingStatOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0Patch {
  playerId: UUID
  season: Int
  games: Int
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  avg: Float
  obp: Float
  slg: Float
  ops: Float
  group: FakePublicSeasonBattingStatsForeignKey0Input
  player: FakePublicSeasonBattingStatsForeignKey1Input
}

"""
Input for the nested mutation of `player` in the `SeasonBattingStatInput` mutation.
"""
input FakePublicSeasonBattingStatsForeignKey1Input {
  """The primary key(s) for `player` for the far side of the relationship."""
  connectById: PlayerPlayerPkeyConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByFirstNameAndLastName: PlayerPlayerNameUniqueConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  connectByNodeId: PlayerNodeIdConnect

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteById: PlayerPlayerPkeyDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByFirstNameAndLastName: PlayerPlayerNameUniqueDelete

  """The primary key(s) for `player` for the far side of the relationship."""
  deleteByNodeId: PlayerNodeIdDelete

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateById: PlayerOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1UsingPlayerPkeyUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByFirstNameAndLastName: PlayerOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1UsingPlayerNameUniqueUpdate

  """
  The primary key(s) and patch data for `player` for the far side of the relationship.
  """
  updateByNodeId: SeasonBattingStatOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1NodeIdUpdate

  """
  A `PlayerInput` object that will be created and connected to this object.
  """
  create: FakePublicSeasonBattingStatsForeignKey1PlayerCreateInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1UsingPlayerPkeyUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1Patch!
  id: UUID!
}

"""
An object where the defined keys will be set on the `player` being updated.
"""
input updatePlayerOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1Patch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1UsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1Patch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input SeasonBattingStatOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""
Represents an update to a `Player`. Fields that are set will be updated.
"""
input PlayerPatch {
  id: UUID
  legacyPlayerId: Int
  firstName: String
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The `player` to be created by this mutation."""
input FakePublicSeasonBattingStatsForeignKey1PlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GroupOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `seasonBattingStat` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `seasonBattingStat` being updated.
  """
  patch: SeasonBattingStatPatch!
}

"""
Represents an update to a `SeasonBattingStat`. Fields that are set will be updated.
"""
input SeasonBattingStatPatch {
  groupId: UUID
  playerId: UUID
  season: Int
  games: Int
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  avg: Float
  obp: Float
  slg: Float
  ops: Float
  group: FakePublicSeasonBattingStatsForeignKey0Input
  player: FakePublicSeasonBattingStatsForeignKey1Input
}

"""The `seasonBattingStat` to be created by this mutation."""
input FakePublicSeasonBattingStatsForeignKey0SeasonBattingStatsCreateInput {
  playerId: UUID
  season: Int
  games: Int
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!
  avg: Float!
  obp: Float!
  slg: Float!
  ops: Float!
  group: FakePublicSeasonBattingStatsForeignKey0Input
  player: FakePublicSeasonBattingStatsForeignKey1Input
}

"""The fields on `group` to look up the row to update."""
input GroupOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0UsingGroupNameKeyUpdate {
  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: updateGroupOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0Patch!
  name: String!
}

"""The fields on `group` to look up the row to update."""
input GroupOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0UsingGroupUrlSlugKeyUpdate {
  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: updateGroupOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0Patch!
  urlSlug: String!
}

"""The globally unique `ID` look up for the row to update."""
input SeasonBattingStatOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey0NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `group` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: GroupPatch!
}

"""
Represents an update to a `Group`. Fields that are set will be updated.
"""
input GroupPatch {
  id: UUID
  name: String
  notes: String
  soloMode: Boolean
  urlSlug: String
  allowSkippingAtBats: Boolean
  allowSteals: Boolean
  games: GameGroupIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipGroupIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey0InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey0InverseInput
}

"""The `group` to be created by this mutation."""
input FakePublicSeasonBattingStatsForeignKey0GroupCreateInput {
  id: UUID
  name: String!
  notes: String
  soloMode: Boolean
  urlSlug: String!
  allowSkippingAtBats: Boolean
  allowSteals: Boolean
  games: GameGroupIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipGroupIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey0InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnSeasonBattingStatForFakePublicSeasonBattingStatsForeignKey1NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `seasonBattingStat` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `seasonBattingStat` being updated.
  """
  patch: SeasonBattingStatPatch!
}

"""The `seasonBattingStat` to be created by this mutation."""
input FakePublicSeasonBattingStatsForeignKey1SeasonBattingStatsCreateInput {
  groupId: UUID
  season: Int
  games: Int
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!
  avg: Float!
  obp: Float!
  slg: Float!
  ops: Float!
  group: FakePublicSeasonBattingStatsForeignKey0Input
  player: FakePublicSeasonBattingStatsForeignKey1Input
}

"""The fields on `player` to look up the row to update."""
input PlayerOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1UsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1Patch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input CareerBattingStatOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input FakePublicCareerBattingStatsForeignKey1PlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GroupOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `careerBattingStat` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `careerBattingStat` being updated.
  """
  patch: CareerBattingStatPatch!
}

"""
Represents an update to a `CareerBattingStat`. Fields that are set will be updated.
"""
input CareerBattingStatPatch {
  groupId: UUID
  playerId: UUID
  seasons: Int
  games: Int
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  avg: Float
  obp: Float
  slg: Float
  ops: Float
  group: FakePublicCareerBattingStatsForeignKey0Input
  player: FakePublicCareerBattingStatsForeignKey1Input
}

"""The `careerBattingStat` to be created by this mutation."""
input FakePublicCareerBattingStatsForeignKey0CareerBattingStatsCreateInput {
  playerId: UUID
  seasons: Int
  games: Int
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!
  avg: Float!
  obp: Float!
  slg: Float!
  ops: Float!
  group: FakePublicCareerBattingStatsForeignKey0Input
  player: FakePublicCareerBattingStatsForeignKey1Input
}

"""The fields on `group` to look up the row to update."""
input GroupOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyUsingGroupNameKeyUpdate {
  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: updateGroupOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyPatch!
  name: String!
}

"""The fields on `group` to look up the row to update."""
input GroupOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyUsingGroupUrlSlugKeyUpdate {
  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: updateGroupOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyPatch!
  urlSlug: String!
}

"""The globally unique `ID` look up for the row to update."""
input PlayerGroupMembershipOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `group` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: GroupPatch!
}

"""The `group` to be created by this mutation."""
input PlayerGroupMembershipGroupIdFkeyGroupCreateInput {
  id: UUID
  name: String!
  notes: String
  soloMode: Boolean
  urlSlug: String!
  allowSkippingAtBats: Boolean
  allowSteals: Boolean
  games: GameGroupIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipGroupIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey0InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GroupOnPlayerGroupMembershipForPlayerGroupMembershipGroupIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `playerGroupMembership` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `playerGroupMembership` being updated.
  """
  patch: PlayerGroupMembershipPatch!
}

"""
Represents an update to a `PlayerGroupMembership`. Fields that are set will be updated.
"""
input PlayerGroupMembershipPatch {
  playerId: UUID
  groupId: UUID
  player: PlayerGroupMembershipPlayerIdFkeyInput
  group: PlayerGroupMembershipGroupIdFkeyInput
}

"""The `playerGroupMembership` to be created by this mutation."""
input PlayerGroupMembershipGroupIdFkeyPlayerGroupMembershipCreateInput {
  playerId: UUID
  player: PlayerGroupMembershipPlayerIdFkeyInput
  group: PlayerGroupMembershipGroupIdFkeyInput
}

"""The fields on `group` to look up the row to update."""
input GroupOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0UsingGroupNameKeyUpdate {
  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: updateGroupOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0Patch!
  name: String!
}

"""The fields on `group` to look up the row to update."""
input GroupOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0UsingGroupUrlSlugKeyUpdate {
  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: updateGroupOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0Patch!
  urlSlug: String!
}

"""The globally unique `ID` look up for the row to update."""
input CareerBattingStatOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey0NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `group` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: GroupPatch!
}

"""The `group` to be created by this mutation."""
input FakePublicCareerBattingStatsForeignKey0GroupCreateInput {
  id: UUID
  name: String!
  notes: String
  soloMode: Boolean
  urlSlug: String!
  allowSkippingAtBats: Boolean
  allowSteals: Boolean
  games: GameGroupIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipGroupIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey0InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnCareerBattingStatForFakePublicCareerBattingStatsForeignKey1NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `careerBattingStat` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `careerBattingStat` being updated.
  """
  patch: CareerBattingStatPatch!
}

"""The `careerBattingStat` to be created by this mutation."""
input FakePublicCareerBattingStatsForeignKey1CareerBattingStatsCreateInput {
  groupId: UUID
  seasons: Int
  games: Int
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!
  avg: Float!
  obp: Float!
  slg: Float!
  ops: Float!
  group: FakePublicCareerBattingStatsForeignKey0Input
  player: FakePublicCareerBattingStatsForeignKey1Input
}

"""The fields on `player` to look up the row to update."""
input PlayerOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input GameAuxMeetupInfoOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input GameAuxMeetupInfoGameIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnGameAuxMeetupInfoForGameAuxMeetupInfoGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameAuxMeetupInfo` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameAuxMeetupInfo` being updated.
  """
  patch: GameAuxMeetupInfoPatch!
}

"""
Represents an update to a `GameAuxMeetupInfo`. Fields that are set will be updated.
"""
input GameAuxMeetupInfoPatch {
  gameId: UUID
  imageGalleryUrl: String
  meetupEventId: String
  advanced: Boolean
  player: GameAuxMeetupInfoGameIdFkeyInput
}

"""The `gameAuxMeetupInfo` to be created by this mutation."""
input GameAuxMeetupInfoGameIdFkeyGameAuxMeetupInfoCreateInput {
  imageGalleryUrl: String
  meetupEventId: String
  advanced: Boolean
  player: GameAuxMeetupInfoGameIdFkeyInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input PlayerAuxMeetupInfoOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input PlayerAuxMeetupInfoPlayerIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnPlayerAuxMeetupInfoForPlayerAuxMeetupInfoPlayerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `playerAuxMeetupInfo` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `playerAuxMeetupInfo` being updated.
  """
  patch: PlayerAuxMeetupInfoPatch!
}

"""
Represents an update to a `PlayerAuxMeetupInfo`. Fields that are set will be updated.
"""
input PlayerAuxMeetupInfoPatch {
  playerId: UUID
  gender: Gender
  bats: Handedness
  throws: Handedness
  preferredPositionFirst: FieldingPosition
  preferredPositionSecond: FieldingPosition
  preferredPositionThird: FieldingPosition
  meetupMemberId: String
  adminNickname: String
  selfNickname: String
  skillLevel: Int
  favoriteTeam: String
  hometown: String
  school: String
  dateDebuted: Date
  player: PlayerAuxMeetupInfoPlayerIdFkeyInput
}

"""The `playerAuxMeetupInfo` to be created by this mutation."""
input PlayerAuxMeetupInfoPlayerIdFkeyPlayerAuxMeetupInfoCreateInput {
  gender: Gender!
  bats: Handedness!
  throws: Handedness!
  preferredPositionFirst: FieldingPosition!
  preferredPositionSecond: FieldingPosition!
  preferredPositionThird: FieldingPosition!
  meetupMemberId: String!
  adminNickname: String
  selfNickname: String
  skillLevel: Int
  favoriteTeam: String
  hometown: String
  school: String
  dateDebuted: Date
  player: PlayerAuxMeetupInfoPlayerIdFkeyInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input ManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input ManualEntryPitchingLinePlayerIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnManualEntryPitchingLineForManualEntryPitchingLinePlayerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `manualEntryPitchingLine` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `manualEntryPitchingLine` being updated.
  """
  patch: ManualEntryPitchingLinePatch!
}

"""
Represents an update to a `ManualEntryPitchingLine`. Fields that are set will be updated.
"""
input ManualEntryPitchingLinePatch {
  gameId: UUID
  teamId: UUID
  playerId: UUID
  inningsPitched: Int
  won: Boolean
  lost: Boolean
  save: Boolean
  completeGame: Boolean
  qualityStart: Boolean
  runsAllowed: Int
  strikeouts: Int
  walks: Int
  game: ManualEntryPitchingLineGameIdFkeyInput
  team: ManualEntryPitchingLineTeamIdFkeyInput
  player: ManualEntryPitchingLinePlayerIdFkeyInput
}

"""The `manualEntryPitchingLine` to be created by this mutation."""
input ManualEntryPitchingLinePlayerIdFkeyManualEntryPitchingLineCreateInput {
  gameId: UUID
  teamId: UUID
  inningsPitched: Int!
  won: Boolean!
  lost: Boolean!
  save: Boolean!
  completeGame: Boolean!
  qualityStart: Boolean!
  runsAllowed: Int!
  strikeouts: Int!
  walks: Int!
  game: ManualEntryPitchingLineGameIdFkeyInput
  team: ManualEntryPitchingLineTeamIdFkeyInput
  player: ManualEntryPitchingLinePlayerIdFkeyInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input ManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input ManualEntryBattingLinePlayerIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnManualEntryBattingLineForManualEntryBattingLinePlayerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `manualEntryBattingLine` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `manualEntryBattingLine` being updated.
  """
  patch: ManualEntryBattingLinePatch!
}

"""
Represents an update to a `ManualEntryBattingLine`. Fields that are set will be updated.
"""
input ManualEntryBattingLinePatch {
  gameId: UUID
  teamId: UUID
  playerId: UUID
  plateAppearances: Int
  atBats: Int
  hits: Int
  singles: Int
  doubles: Int
  triples: Int
  homeruns: Int
  walks: Int
  strikeouts: Int
  sacFlies: Int
  gidp: Int
  runs: Int
  rbi: Int
  stolenBases: Int
  game: ManualEntryBattingLineGameIdFkeyInput
  team: ManualEntryBattingLineTeamIdFkeyInput
  player: ManualEntryBattingLinePlayerIdFkeyInput
}

"""The `manualEntryBattingLine` to be created by this mutation."""
input ManualEntryBattingLinePlayerIdFkeyManualEntryBattingLineCreateInput {
  gameId: UUID
  teamId: UUID
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!
  game: ManualEntryBattingLineGameIdFkeyInput
  team: ManualEntryBattingLineTeamIdFkeyInput
  player: ManualEntryBattingLinePlayerIdFkeyInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnGameBattingStatForFakePublicGameBattingStatsForeignKey2UsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnGameBattingStatForFakePublicGameBattingStatsForeignKey2Patch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input GameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey2NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input FakePublicGameBattingStatsForeignKey2PlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input TeamOnGameBattingStatForFakePublicGameBattingStatsForeignKey1NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameBattingStat` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameBattingStat` being updated.
  """
  patch: GameBattingStatPatch!
}

"""The `gameBattingStat` to be created by this mutation."""
input FakePublicGameBattingStatsForeignKey1GameBattingStatsCreateInput {
  gameId: UUID
  playerId: UUID
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!
  game: FakePublicGameBattingStatsForeignKey0Input
  team: FakePublicGameBattingStatsForeignKey1Input
  player: FakePublicGameBattingStatsForeignKey2Input
}

"""The fields on `team` to look up the row to update."""
input TeamOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyUsingTeamGameIdRoleKeyUpdate {
  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: updateTeamOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyPatch!
  gameId: UUID!
  role: TeamRole!
}

"""The globally unique `ID` look up for the row to update."""
input ManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `team` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: TeamPatch!
}

"""Represents an update to a `Team`. Fields that are set will be updated."""
input TeamPatch {
  id: UUID
  gameId: UUID
  role: TeamRole
  name: String
  captainId: UUID
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""The `team` to be created by this mutation."""
input ManualEntryPitchingLineTeamIdFkeyTeamCreateInput {
  id: UUID
  gameId: UUID
  role: TeamRole!
  name: String
  captainId: UUID
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input TeamOnManualEntryPitchingLineForManualEntryPitchingLineTeamIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `manualEntryPitchingLine` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `manualEntryPitchingLine` being updated.
  """
  patch: ManualEntryPitchingLinePatch!
}

"""The `manualEntryPitchingLine` to be created by this mutation."""
input ManualEntryPitchingLineTeamIdFkeyManualEntryPitchingLineCreateInput {
  gameId: UUID
  playerId: UUID
  inningsPitched: Int!
  won: Boolean!
  lost: Boolean!
  save: Boolean!
  completeGame: Boolean!
  qualityStart: Boolean!
  runsAllowed: Int!
  strikeouts: Int!
  walks: Int!
  game: ManualEntryPitchingLineGameIdFkeyInput
  team: ManualEntryPitchingLineTeamIdFkeyInput
  player: ManualEntryPitchingLinePlayerIdFkeyInput
}

"""The fields on `team` to look up the row to update."""
input TeamOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyUsingTeamGameIdRoleKeyUpdate {
  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: updateTeamOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyPatch!
  gameId: UUID!
  role: TeamRole!
}

"""The globally unique `ID` look up for the row to update."""
input ManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `team` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: TeamPatch!
}

"""The `team` to be created by this mutation."""
input ManualEntryBattingLineTeamIdFkeyTeamCreateInput {
  id: UUID
  gameId: UUID
  role: TeamRole!
  name: String
  captainId: UUID
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input TeamOnManualEntryBattingLineForManualEntryBattingLineTeamIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `manualEntryBattingLine` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `manualEntryBattingLine` being updated.
  """
  patch: ManualEntryBattingLinePatch!
}

"""The `manualEntryBattingLine` to be created by this mutation."""
input ManualEntryBattingLineTeamIdFkeyManualEntryBattingLineCreateInput {
  gameId: UUID
  playerId: UUID
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!
  game: ManualEntryBattingLineGameIdFkeyInput
  team: ManualEntryBattingLineTeamIdFkeyInput
  player: ManualEntryBattingLinePlayerIdFkeyInput
}

"""The fields on `team` to look up the row to update."""
input TeamOnGameBattingStatForFakePublicGameBattingStatsForeignKey1UsingTeamGameIdRoleKeyUpdate {
  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: updateTeamOnGameBattingStatForFakePublicGameBattingStatsForeignKey1Patch!
  gameId: UUID!
  role: TeamRole!
}

"""The globally unique `ID` look up for the row to update."""
input GameBattingStatOnGameBattingStatForFakePublicGameBattingStatsForeignKey1NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `team` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: TeamPatch!
}

"""The `team` to be created by this mutation."""
input FakePublicGameBattingStatsForeignKey1TeamCreateInput {
  id: UUID
  gameId: UUID
  role: TeamRole!
  name: String
  captainId: UUID
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnGameBattingStatForFakePublicGameBattingStatsForeignKey0NodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameBattingStat` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameBattingStat` being updated.
  """
  patch: GameBattingStatPatch!
}

"""The `gameBattingStat` to be created by this mutation."""
input FakePublicGameBattingStatsForeignKey0GameBattingStatsCreateInput {
  teamId: UUID
  playerId: UUID
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!
  game: FakePublicGameBattingStatsForeignKey0Input
  team: FakePublicGameBattingStatsForeignKey1Input
  player: FakePublicGameBattingStatsForeignKey2Input
}

"""The fields on `game` to look up the row to update."""
input GameOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input ManualEntryLineScoreCellOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input ManualEntryLineScoreCellGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnManualEntryLineScoreCellForManualEntryLineScoreCellGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `manualEntryLineScoreCell` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `manualEntryLineScoreCell` being updated.
  """
  patch: ManualEntryLineScoreCellPatch!
}

"""
Represents an update to a `ManualEntryLineScoreCell`. Fields that are set will be updated.
"""
input ManualEntryLineScoreCellPatch {
  gameId: UUID
  inning: Int
  halfInning: HalfInning
  runs: Int
  game: ManualEntryLineScoreCellGameIdFkeyInput
}

"""The `manualEntryLineScoreCell` to be created by this mutation."""
input ManualEntryLineScoreCellGameIdFkeyManualEntryLineScoreCellCreateInput {
  inning: Int!
  halfInning: HalfInning!
  runs: Int!
  game: ManualEntryLineScoreCellGameIdFkeyInput
}

"""The fields on `game` to look up the row to update."""
input GameOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input ManualEntryPitchingLineOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input ManualEntryPitchingLineGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnManualEntryPitchingLineForManualEntryPitchingLineGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `manualEntryPitchingLine` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `manualEntryPitchingLine` being updated.
  """
  patch: ManualEntryPitchingLinePatch!
}

"""The `manualEntryPitchingLine` to be created by this mutation."""
input ManualEntryPitchingLineGameIdFkeyManualEntryPitchingLineCreateInput {
  teamId: UUID
  playerId: UUID
  inningsPitched: Int!
  won: Boolean!
  lost: Boolean!
  save: Boolean!
  completeGame: Boolean!
  qualityStart: Boolean!
  runsAllowed: Int!
  strikeouts: Int!
  walks: Int!
  game: ManualEntryPitchingLineGameIdFkeyInput
  team: ManualEntryPitchingLineTeamIdFkeyInput
  player: ManualEntryPitchingLinePlayerIdFkeyInput
}

"""The fields on `game` to look up the row to update."""
input GameOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input ManualEntryBattingLineOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input ManualEntryBattingLineGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnManualEntryBattingLineForManualEntryBattingLineGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `manualEntryBattingLine` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `manualEntryBattingLine` being updated.
  """
  patch: ManualEntryBattingLinePatch!
}

"""The `manualEntryBattingLine` to be created by this mutation."""
input ManualEntryBattingLineGameIdFkeyManualEntryBattingLineCreateInput {
  teamId: UUID
  playerId: UUID
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!
  game: ManualEntryBattingLineGameIdFkeyInput
  team: ManualEntryBattingLineTeamIdFkeyInput
  player: ManualEntryBattingLinePlayerIdFkeyInput
}

"""The fields on `game` to look up the row to update."""
input GameOnScoredRunnerForScoredRunnerGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnScoredRunnerForScoredRunnerGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input ScoredRunnerOnScoredRunnerForScoredRunnerGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input ScoredRunnerGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameEventRecordOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `scoredRunner` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `scoredRunner` being updated.
  """
  patch: ScoredRunnerPatch!
}

"""
Represents an update to a `ScoredRunner`. Fields that are set will be updated.
"""
input ScoredRunnerPatch {
  gameEventRecordId: UUID
  runnerId: UUID
  battedIn: Boolean
  gameId: UUID
  gameEventRecord: ScoredRunnerGameEventRecordIdFkeyInput
  player: ScoredRunnerRunnerIdFkeyInput
  game: ScoredRunnerGameIdFkeyInput
}

"""The `scoredRunner` to be created by this mutation."""
input ScoredRunnerGameEventRecordIdFkeyScoredRunnerCreateInput {
  runnerId: UUID
  battedIn: Boolean!
  gameId: UUID
  gameEventRecord: ScoredRunnerGameEventRecordIdFkeyInput
  player: ScoredRunnerRunnerIdFkeyInput
  game: ScoredRunnerGameIdFkeyInput
}

"""The fields on `gameEventRecord` to look up the row to update."""
input GameEventRecordOnGameEventRecordForGameEventRecordGameEventIdFkeyUsingGameEventRecordGameIdEventIndexKeyUpdate {
  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: updateGameEventRecordOnGameEventRecordForGameEventRecordGameEventIdFkeyPatch!
  gameId: UUID!
  eventIndex: Int!
}

"""The globally unique `ID` look up for the row to update."""
input GameEventOnGameEventRecordForGameEventRecordGameEventIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameEventRecord` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: GameEventRecordPatch!
}

"""
Represents an update to a `GameEventRecord`. Fields that are set will be updated.
"""
input GameEventRecordPatch {
  id: UUID
  gameId: UUID
  eventIndex: Int
  gameStateBeforeId: UUID
  gameStateAfterId: UUID
  gameEventId: UUID
  notes: String
  game: GameEventRecordGameIdFkeyInput
  gameStateBefore: GameEventRecordGameStateBeforeFkInput
  gameStateAfter: GameEventRecordGameStateAfterFkInput
  gameEvent: GameEventRecordGameEventIdFkeyInput
  scoredRunners: ScoredRunnerGameEventRecordIdFkeyInverseInput
}

"""The `gameEventRecord` to be created by this mutation."""
input GameEventRecordGameEventIdFkeyGameEventRecordCreateInput {
  id: UUID
  gameId: UUID
  eventIndex: Int!
  gameStateBeforeId: UUID
  gameStateAfterId: UUID
  notes: String
  game: GameEventRecordGameIdFkeyInput
  gameStateBefore: GameEventRecordGameStateBeforeFkInput
  gameStateAfter: GameEventRecordGameStateAfterFkInput
  gameEvent: GameEventRecordGameEventIdFkeyInput
  scoredRunners: ScoredRunnerGameEventRecordIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input EarlyGameEndOnGameEventForGameEventEarlyGameEndIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameEvent` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: GameEventPatch!
}

"""
Represents an update to a `GameEvent`. Fields that are set will be updated.
"""
input GameEventPatch {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""The `gameEvent` to be created by this mutation."""
input GameEventEarlyGameEndIdFkeyGameEventCreateInput {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  gameId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnEarlyGameEndForEarlyGameEndGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `earlyGameEnd` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `earlyGameEnd` being updated.
  """
  patch: EarlyGameEndPatch!
}

"""
Represents an update to a `EarlyGameEnd`. Fields that are set will be updated.
"""
input EarlyGameEndPatch {
  id: UUID
  reason: EarlyGameEndReason
  gameId: UUID
  game: EarlyGameEndGameIdFkeyInput
  gameEvents: GameEventEarlyGameEndIdFkeyInverseInput
}

"""The `earlyGameEnd` to be created by this mutation."""
input EarlyGameEndGameIdFkeyEarlyGameEndCreateInput {
  id: UUID
  reason: EarlyGameEndReason!
  game: EarlyGameEndGameIdFkeyInput
  gameEvents: GameEventEarlyGameEndIdFkeyInverseInput
}

"""The fields on `game` to look up the row to update."""
input GameOnEarlyGameEndForEarlyGameEndGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnEarlyGameEndForEarlyGameEndGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input EarlyGameEndOnEarlyGameEndForEarlyGameEndGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input EarlyGameEndGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameEventOnGameEventForGameEventEarlyGameEndIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `earlyGameEnd` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `earlyGameEnd` being updated.
  """
  patch: EarlyGameEndPatch!
}

"""The `earlyGameEnd` to be created by this mutation."""
input GameEventEarlyGameEndIdFkeyEarlyGameEndCreateInput {
  id: UUID
  reason: EarlyGameEndReason!
  gameId: UUID
  game: EarlyGameEndGameIdFkeyInput
  gameEvents: GameEventEarlyGameEndIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input SoloModeOpponentInningOnGameEventForGameEventSoloModeOpponentInningIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameEvent` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: GameEventPatch!
}

"""The `gameEvent` to be created by this mutation."""
input GameEventSoloModeOpponentInningIdFkeyGameEventCreateInput {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  atBatSkipId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `soloModeOpponentInning` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `soloModeOpponentInning` being updated.
  """
  patch: SoloModeOpponentInningPatch!
}

"""
Represents an update to a `SoloModeOpponentInning`. Fields that are set will be updated.
"""
input SoloModeOpponentInningPatch {
  id: UUID
  runsScored: Int
  gameId: UUID
  game: SoloModeOpponentInningGameIdFkeyInput
  gameEvents: GameEventSoloModeOpponentInningIdFkeyInverseInput
}

"""The `soloModeOpponentInning` to be created by this mutation."""
input SoloModeOpponentInningGameIdFkeySoloModeOpponentInningCreateInput {
  id: UUID
  runsScored: Int!
  game: SoloModeOpponentInningGameIdFkeyInput
  gameEvents: GameEventSoloModeOpponentInningIdFkeyInverseInput
}

"""The fields on `game` to look up the row to update."""
input GameOnGameEventForGameEventGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnGameEventForGameEventGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input GameEventOnGameEventForGameEventGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input GameEventGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input AtBatSkipOnGameEventForGameEventAtBatSkipIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameEvent` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: GameEventPatch!
}

"""The `gameEvent` to be created by this mutation."""
input GameEventAtBatSkipIdFkeyGameEventCreateInput {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnAtBatSkipForAtBatSkipBatterIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `atBatSkip` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `atBatSkip` being updated.
  """
  patch: AtBatSkipPatch!
}

"""The `atBatSkip` to be created by this mutation."""
input AtBatSkipBatterIdFkeyAtBatSkipCreateInput {
  id: UUID
  gameId: UUID
  player: AtBatSkipBatterIdFkeyInput
  game: AtBatSkipGameIdFkeyInput
  gameEvents: GameEventAtBatSkipIdFkeyInverseInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input PlayerGroupMembershipOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input PlayerGroupMembershipPlayerIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnPlayerGroupMembershipForPlayerGroupMembershipPlayerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `playerGroupMembership` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `playerGroupMembership` being updated.
  """
  patch: PlayerGroupMembershipPatch!
}

"""The `playerGroupMembership` to be created by this mutation."""
input PlayerGroupMembershipPlayerIdFkeyPlayerGroupMembershipCreateInput {
  groupId: UUID
  player: PlayerGroupMembershipPlayerIdFkeyInput
  group: PlayerGroupMembershipGroupIdFkeyInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnScoredRunnerForScoredRunnerRunnerIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnScoredRunnerForScoredRunnerRunnerIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input ScoredRunnerOnScoredRunnerForScoredRunnerRunnerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input ScoredRunnerRunnerIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnScoredRunnerForScoredRunnerGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `scoredRunner` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `scoredRunner` being updated.
  """
  patch: ScoredRunnerPatch!
}

"""The `scoredRunner` to be created by this mutation."""
input ScoredRunnerGameIdFkeyScoredRunnerCreateInput {
  gameEventRecordId: UUID
  runnerId: UUID
  battedIn: Boolean!
  gameEventRecord: ScoredRunnerGameEventRecordIdFkeyInput
  player: ScoredRunnerRunnerIdFkeyInput
  game: ScoredRunnerGameIdFkeyInput
}

"""The fields on `game` to look up the row to update."""
input GameOnAtBatSkipForAtBatSkipGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnAtBatSkipForAtBatSkipGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input AtBatSkipOnAtBatSkipForAtBatSkipGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input AtBatSkipGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameEventOnGameEventForGameEventAtBatSkipIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `atBatSkip` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `atBatSkip` being updated.
  """
  patch: AtBatSkipPatch!
}

"""The `atBatSkip` to be created by this mutation."""
input GameEventAtBatSkipIdFkeyAtBatSkipCreateInput {
  id: UUID
  batterId: UUID
  gameId: UUID
  player: AtBatSkipBatterIdFkeyInput
  game: AtBatSkipGameIdFkeyInput
  gameEvents: GameEventAtBatSkipIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameEventRecordOnGameEventRecordForGameEventRecordGameEventIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameEvent` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: GameEventPatch!
}

"""The `gameEvent` to be created by this mutation."""
input GameEventRecordGameEventIdFkeyGameEventCreateInput {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""The fields on `gameEventRecord` to look up the row to update."""
input GameEventRecordOnGameEventRecordForGameEventRecordGameStateAfterFkUsingGameEventRecordGameIdEventIndexKeyUpdate {
  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: updateGameEventRecordOnGameEventRecordForGameEventRecordGameStateAfterFkPatch!
  gameId: UUID!
  eventIndex: Int!
}

"""The globally unique `ID` look up for the row to update."""
input GameStateOnGameEventRecordForGameEventRecordGameStateAfterFkNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameEventRecord` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: GameEventRecordPatch!
}

"""The `gameEventRecord` to be created by this mutation."""
input GameEventRecordGameStateAfterFkGameEventRecordCreateInput {
  id: UUID
  gameId: UUID
  eventIndex: Int!
  gameStateBeforeId: UUID
  gameEventId: UUID
  notes: String
  game: GameEventRecordGameIdFkeyInput
  gameStateBefore: GameEventRecordGameStateBeforeFkInput
  gameStateAfter: GameEventRecordGameStateAfterFkInput
  gameEvent: GameEventRecordGameEventIdFkeyInput
  scoredRunners: ScoredRunnerGameEventRecordIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameEventRecordOnGameEventRecordForGameEventRecordGameStateAfterFkNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameState` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameState` being updated.
  """
  patch: GameStatePatch!
}

"""
Represents an update to a `GameState`. Fields that are set will be updated.
"""
input GameStatePatch {
  id: UUID
  gameId: UUID
  gameStateIndex: Int
  playerAtBat: UUID
  inning: Int
  halfInning: HalfInning
  outs: Int
  score: [Int]
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""The `gameState` to be created by this mutation."""
input GameEventRecordGameStateAfterFkGameStateCreateInput {
  id: UUID
  gameId: UUID
  gameStateIndex: Int!
  playerAtBat: UUID
  inning: Int!
  halfInning: HalfInning!
  outs: Int!
  score: [Int]!
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""The fields on `gameEventRecord` to look up the row to update."""
input GameEventRecordOnGameEventRecordForGameEventRecordGameStateBeforeFkUsingGameEventRecordGameIdEventIndexKeyUpdate {
  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: updateGameEventRecordOnGameEventRecordForGameEventRecordGameStateBeforeFkPatch!
  gameId: UUID!
  eventIndex: Int!
}

"""The globally unique `ID` look up for the row to update."""
input GameStateOnGameEventRecordForGameEventRecordGameStateBeforeFkNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameEventRecord` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: GameEventRecordPatch!
}

"""The `gameEventRecord` to be created by this mutation."""
input GameEventRecordGameStateBeforeFkGameEventRecordCreateInput {
  id: UUID
  gameId: UUID
  eventIndex: Int!
  gameStateAfterId: UUID
  gameEventId: UUID
  notes: String
  game: GameEventRecordGameIdFkeyInput
  gameStateBefore: GameEventRecordGameStateBeforeFkInput
  gameStateAfter: GameEventRecordGameStateAfterFkInput
  gameEvent: GameEventRecordGameEventIdFkeyInput
  scoredRunners: ScoredRunnerGameEventRecordIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameEventRecordOnGameEventRecordForGameEventRecordGameStateBeforeFkNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameState` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameState` being updated.
  """
  patch: GameStatePatch!
}

"""The `gameState` to be created by this mutation."""
input GameEventRecordGameStateBeforeFkGameStateCreateInput {
  id: UUID
  gameId: UUID
  gameStateIndex: Int!
  playerAtBat: UUID
  inning: Int!
  halfInning: HalfInning!
  outs: Int!
  score: [Int]!
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""The fields on `gameEventRecord` to look up the row to update."""
input GameEventRecordOnGameEventRecordForGameEventRecordGameIdFkeyUsingGameEventRecordGameIdEventIndexKeyUpdate {
  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: updateGameEventRecordOnGameEventRecordForGameEventRecordGameIdFkeyPatch!
  gameId: UUID!
  eventIndex: Int!
}

"""The globally unique `ID` look up for the row to update."""
input GameOnGameEventRecordForGameEventRecordGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameEventRecord` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: GameEventRecordPatch!
}

"""The `gameEventRecord` to be created by this mutation."""
input GameEventRecordGameIdFkeyGameEventRecordCreateInput {
  id: UUID
  eventIndex: Int!
  gameStateBeforeId: UUID
  gameStateAfterId: UUID
  gameEventId: UUID
  notes: String
  game: GameEventRecordGameIdFkeyInput
  gameStateBefore: GameEventRecordGameStateBeforeFkInput
  gameStateAfter: GameEventRecordGameStateAfterFkInput
  gameEvent: GameEventRecordGameEventIdFkeyInput
  scoredRunners: ScoredRunnerGameEventRecordIdFkeyInverseInput
}

"""The fields on `game` to look up the row to update."""
input GameOnLineupForGameStateForLineupForGameStateGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnLineupForGameStateForLineupForGameStateGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input LineupForGameStateOnLineupForGameStateForLineupForGameStateGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input LineupForGameStateGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input LineupOnLineupForGameStateForLineupForGameStateLineupIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineupForGameState` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineupForGameState` being updated.
  """
  patch: LineupForGameStatePatch!
}

"""
Represents an update to a `LineupForGameState`. Fields that are set will be updated.
"""
input LineupForGameStatePatch {
  gameStateId: UUID
  lineupId: UUID
  gameId: UUID
  gameState: LineupForGameStateGameStateIdFkeyInput
  lineup: LineupForGameStateLineupIdFkeyInput
  game: LineupForGameStateGameIdFkeyInput
}

"""The `lineupForGameState` to be created by this mutation."""
input LineupForGameStateLineupIdFkeyLineupForGameStateCreateInput {
  gameStateId: UUID
  gameId: UUID
  gameState: LineupForGameStateGameStateIdFkeyInput
  lineup: LineupForGameStateLineupIdFkeyInput
  game: LineupForGameStateGameIdFkeyInput
}

"""The globally unique `ID` look up for the row to update."""
input LineupForGameStateOnLineupForGameStateForLineupForGameStateLineupIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineup` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineup` being updated.
  """
  patch: LineupPatch!
}

"""
Represents an update to a `Lineup`. Fields that are set will be updated.
"""
input LineupPatch {
  id: UUID
  teamId: UUID
  gameId: UUID
  team: LineupTeamIdFkeyInput
  game: LineupGameIdFkeyInput
  lineupSpots: LineupSpotLineupIdFkeyInverseInput
  lineupChangesToLineupBeforeIdUsingId: LineupChangeLineupBeforeIdFkeyInverseInput
  lineupChangesToLineupAfterIdUsingId: LineupChangeLineupAfterIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateLineupIdFkeyInverseInput
}

"""The `lineup` to be created by this mutation."""
input LineupForGameStateLineupIdFkeyLineupCreateInput {
  id: UUID
  teamId: UUID
  gameId: UUID
  team: LineupTeamIdFkeyInput
  game: LineupGameIdFkeyInput
  lineupSpots: LineupSpotLineupIdFkeyInverseInput
  lineupChangesToLineupBeforeIdUsingId: LineupChangeLineupBeforeIdFkeyInverseInput
  lineupChangesToLineupAfterIdUsingId: LineupChangeLineupAfterIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateLineupIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameStateOnLineupForGameStateForLineupForGameStateGameStateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineupForGameState` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineupForGameState` being updated.
  """
  patch: LineupForGameStatePatch!
}

"""The `lineupForGameState` to be created by this mutation."""
input LineupForGameStateGameStateIdFkeyLineupForGameStateCreateInput {
  lineupId: UUID
  gameId: UUID
  gameState: LineupForGameStateGameStateIdFkeyInput
  lineup: LineupForGameStateLineupIdFkeyInput
  game: LineupForGameStateGameIdFkeyInput
}

"""The globally unique `ID` look up for the row to update."""
input LineupForGameStateOnLineupForGameStateForLineupForGameStateGameStateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameState` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameState` being updated.
  """
  patch: GameStatePatch!
}

"""The `gameState` to be created by this mutation."""
input LineupForGameStateGameStateIdFkeyGameStateCreateInput {
  id: UUID
  gameId: UUID
  gameStateIndex: Int!
  playerAtBat: UUID
  inning: Int!
  halfInning: HalfInning!
  outs: Int!
  score: [Int]!
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnLineupForGameStateForLineupForGameStateGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineupForGameState` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineupForGameState` being updated.
  """
  patch: LineupForGameStatePatch!
}

"""The `lineupForGameState` to be created by this mutation."""
input LineupForGameStateGameIdFkeyLineupForGameStateCreateInput {
  gameStateId: UUID
  lineupId: UUID
  gameState: LineupForGameStateGameStateIdFkeyInput
  lineup: LineupForGameStateLineupIdFkeyInput
  game: LineupForGameStateGameIdFkeyInput
}

"""The fields on `game` to look up the row to update."""
input GameOnBaseRunnerForBaseRunnerGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnBaseRunnerForBaseRunnerGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input BaseRunnerOnBaseRunnerForBaseRunnerGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input BaseRunnerGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnBaseRunnerForBaseRunnerGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `baseRunner` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `baseRunner` being updated.
  """
  patch: BaseRunnerPatch!
}

"""
Represents an update to a `BaseRunner`. Fields that are set will be updated.
"""
input BaseRunnerPatch {
  gameStateId: UUID
  runnerId: UUID
  base: BaseType
  gameId: UUID
  gameState: BaseRunnerGameStateIdFkeyInput
  player: BaseRunnerRunnerIdFkeyInput
  game: BaseRunnerGameIdFkeyInput
}

"""The `baseRunner` to be created by this mutation."""
input BaseRunnerGameIdFkeyBaseRunnerCreateInput {
  gameStateId: UUID
  runnerId: UUID
  base: BaseType!
  gameState: BaseRunnerGameStateIdFkeyInput
  player: BaseRunnerRunnerIdFkeyInput
  game: BaseRunnerGameIdFkeyInput
}

"""The fields on `game` to look up the row to update."""
input GameOnGameEventRecordForGameEventRecordGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnGameEventRecordForGameEventRecordGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input GameEventRecordOnGameEventRecordForGameEventRecordGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input GameEventRecordGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The fields on `gameEventRecord` to look up the row to update."""
input GameEventRecordOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyUsingGameEventRecordGameIdEventIndexKeyUpdate {
  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: updateGameEventRecordOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyPatch!
  gameId: UUID!
  eventIndex: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ScoredRunnerOnScoredRunnerForScoredRunnerGameEventRecordIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameEventRecord` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameEventRecord` being updated.
  """
  patch: GameEventRecordPatch!
}

"""The `gameEventRecord` to be created by this mutation."""
input ScoredRunnerGameEventRecordIdFkeyGameEventRecordCreateInput {
  id: UUID
  gameId: UUID
  eventIndex: Int!
  gameStateBeforeId: UUID
  gameStateAfterId: UUID
  gameEventId: UUID
  notes: String
  game: GameEventRecordGameIdFkeyInput
  gameStateBefore: GameEventRecordGameStateBeforeFkInput
  gameStateAfter: GameEventRecordGameStateAfterFkInput
  gameEvent: GameEventRecordGameEventIdFkeyInput
  scoredRunners: ScoredRunnerGameEventRecordIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnScoredRunnerForScoredRunnerRunnerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `scoredRunner` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `scoredRunner` being updated.
  """
  patch: ScoredRunnerPatch!
}

"""The `scoredRunner` to be created by this mutation."""
input ScoredRunnerRunnerIdFkeyScoredRunnerCreateInput {
  gameEventRecordId: UUID
  battedIn: Boolean!
  gameId: UUID
  gameEventRecord: ScoredRunnerGameEventRecordIdFkeyInput
  player: ScoredRunnerRunnerIdFkeyInput
  game: ScoredRunnerGameIdFkeyInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnBaseRunnerForBaseRunnerRunnerIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnBaseRunnerForBaseRunnerRunnerIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input BaseRunnerOnBaseRunnerForBaseRunnerRunnerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input BaseRunnerRunnerIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameStateOnBaseRunnerForBaseRunnerGameStateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `baseRunner` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `baseRunner` being updated.
  """
  patch: BaseRunnerPatch!
}

"""The `baseRunner` to be created by this mutation."""
input BaseRunnerGameStateIdFkeyBaseRunnerCreateInput {
  runnerId: UUID
  base: BaseType!
  gameId: UUID
  gameState: BaseRunnerGameStateIdFkeyInput
  player: BaseRunnerRunnerIdFkeyInput
  game: BaseRunnerGameIdFkeyInput
}

"""The globally unique `ID` look up for the row to update."""
input BaseRunnerOnBaseRunnerForBaseRunnerGameStateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameState` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameState` being updated.
  """
  patch: GameStatePatch!
}

"""The `gameState` to be created by this mutation."""
input BaseRunnerGameStateIdFkeyGameStateCreateInput {
  id: UUID
  gameId: UUID
  gameStateIndex: Int!
  playerAtBat: UUID
  inning: Int!
  halfInning: HalfInning!
  outs: Int!
  score: [Int]!
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnBaseRunnerForBaseRunnerRunnerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `baseRunner` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `baseRunner` being updated.
  """
  patch: BaseRunnerPatch!
}

"""The `baseRunner` to be created by this mutation."""
input BaseRunnerRunnerIdFkeyBaseRunnerCreateInput {
  gameStateId: UUID
  base: BaseType!
  gameId: UUID
  gameState: BaseRunnerGameStateIdFkeyInput
  player: BaseRunnerRunnerIdFkeyInput
  game: BaseRunnerGameIdFkeyInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnGameStateForGameStatePlayerAtBatFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnGameStateForGameStatePlayerAtBatFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input GameStateOnGameStateForGameStatePlayerAtBatFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input GameStatePlayerAtBatFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnGameStateForGameStateGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameState` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameState` being updated.
  """
  patch: GameStatePatch!
}

"""The `gameState` to be created by this mutation."""
input GameStateGameIdFkeyGameStateCreateInput {
  id: UUID
  gameStateIndex: Int!
  playerAtBat: UUID
  inning: Int!
  halfInning: HalfInning!
  outs: Int!
  score: [Int]!
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""The fields on `game` to look up the row to update."""
input GameOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input SoloModeOpponentInningOnSoloModeOpponentInningForSoloModeOpponentInningGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input SoloModeOpponentInningGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameEventOnGameEventForGameEventSoloModeOpponentInningIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `soloModeOpponentInning` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `soloModeOpponentInning` being updated.
  """
  patch: SoloModeOpponentInningPatch!
}

"""The `soloModeOpponentInning` to be created by this mutation."""
input GameEventSoloModeOpponentInningIdFkeySoloModeOpponentInningCreateInput {
  id: UUID
  runsScored: Int!
  gameId: UUID
  game: SoloModeOpponentInningGameIdFkeyInput
  gameEvents: GameEventSoloModeOpponentInningIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input LineupChangeOnGameEventForGameEventLineupChangeIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameEvent` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: GameEventPatch!
}

"""The `gameEvent` to be created by this mutation."""
input GameEventLineupChangeIdFkeyGameEventCreateInput {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameEventOnGameEventForGameEventLineupChangeIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineupChange` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineupChange` being updated.
  """
  patch: LineupChangePatch!
}

"""The `lineupChange` to be created by this mutation."""
input GameEventLineupChangeIdFkeyLineupChangeCreateInput {
  id: UUID
  lineupBeforeId: UUID
  lineupAfterId: UUID
  gameId: UUID
  lineup: LineupChangeLineupAfterIdFkeyInput
  game: LineupChangeGameIdFkeyInput
  gameEvents: GameEventLineupChangeIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input StolenBaseAttemptOnGameEventForGameEventStolenBaseAttemptIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameEvent` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: GameEventPatch!
}

"""The `gameEvent` to be created by this mutation."""
input GameEventStolenBaseAttemptIdFkeyGameEventCreateInput {
  id: UUID
  plateAppearanceId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameEventOnGameEventForGameEventStolenBaseAttemptIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `stolenBaseAttempt` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `stolenBaseAttempt` being updated.
  """
  patch: StolenBaseAttemptPatch!
}

"""
Represents an update to a `StolenBaseAttempt`. Fields that are set will be updated.
"""
input StolenBaseAttemptPatch {
  id: UUID
  runnerId: UUID
  success: Boolean
  gameId: UUID
  player: StolenBaseAttemptRunnerIdFkeyInput
  game: StolenBaseAttemptGameIdFkeyInput
  gameEvents: GameEventStolenBaseAttemptIdFkeyInverseInput
}

"""The `stolenBaseAttempt` to be created by this mutation."""
input GameEventStolenBaseAttemptIdFkeyStolenBaseAttemptCreateInput {
  id: UUID
  runnerId: UUID
  success: Boolean!
  gameId: UUID
  player: StolenBaseAttemptRunnerIdFkeyInput
  game: StolenBaseAttemptGameIdFkeyInput
  gameEvents: GameEventStolenBaseAttemptIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlateAppearanceOnGameEventForGameEventPlateAppearanceIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameEvent` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: GameEventPatch!
}

"""The `gameEvent` to be created by this mutation."""
input GameEventPlateAppearanceIdFkeyGameEventCreateInput {
  id: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameEventOnGameEventForGameEventPlateAppearanceIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `plateAppearance` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `plateAppearance` being updated.
  """
  patch: PlateAppearancePatch!
}

"""
Represents an update to a `PlateAppearance`. Fields that are set will be updated.
"""
input PlateAppearancePatch {
  id: UUID
  type: PlateAppearanceType
  contact: ContactQuality
  fieldedBy: FieldingPosition
  runsScoredOnSacFly: Int
  routinePlay: Boolean
  gameId: UUID
  batterId: UUID
  game: PlateAppearanceGameIdFkeyInput
  player: PlateAppearanceBatterIdFkeyInput
  basepathMovements: BasepathMovementPlateAppearanceIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerPlateAppearanceIdFkeyInverseInput
  gameEvents: GameEventPlateAppearanceIdFkeyInverseInput
}

"""The `plateAppearance` to be created by this mutation."""
input GameEventPlateAppearanceIdFkeyPlateAppearanceCreateInput {
  id: UUID
  type: PlateAppearanceType!
  contact: ContactQuality
  fieldedBy: FieldingPosition
  runsScoredOnSacFly: Int
  routinePlay: Boolean
  gameId: UUID
  batterId: UUID
  game: PlateAppearanceGameIdFkeyInput
  player: PlateAppearanceBatterIdFkeyInput
  basepathMovements: BasepathMovementPlateAppearanceIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerPlateAppearanceIdFkeyInverseInput
  gameEvents: GameEventPlateAppearanceIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnGameEventForGameEventGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameEvent` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameEvent` being updated.
  """
  patch: GameEventPatch!
}

"""The `gameEvent` to be created by this mutation."""
input GameEventGameIdFkeyGameEventCreateInput {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""The fields on `game` to look up the row to update."""
input GameOnLineupChangeForLineupChangeGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnLineupChangeForLineupChangeGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input LineupChangeOnLineupChangeForLineupChangeGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input LineupChangeGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input LineupOnLineupChangeForLineupChangeLineupBeforeIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineupChange` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineupChange` being updated.
  """
  patch: LineupChangePatch!
}

"""The `lineupChange` to be created by this mutation."""
input LineupChangeLineupBeforeIdFkeyLineupChangeCreateInput {
  id: UUID
  lineupAfterId: UUID
  gameId: UUID
  lineup: LineupChangeLineupAfterIdFkeyInput
  game: LineupChangeGameIdFkeyInput
  gameEvents: GameEventLineupChangeIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input LineupChangeOnLineupChangeForLineupChangeLineupAfterIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineup` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineup` being updated.
  """
  patch: LineupPatch!
}

"""The `lineup` to be created by this mutation."""
input LineupChangeLineupAfterIdFkeyLineupCreateInput {
  id: UUID
  teamId: UUID
  gameId: UUID
  team: LineupTeamIdFkeyInput
  game: LineupGameIdFkeyInput
  lineupSpots: LineupSpotLineupIdFkeyInverseInput
  lineupChangesToLineupBeforeIdUsingId: LineupChangeLineupBeforeIdFkeyInverseInput
  lineupChangesToLineupAfterIdUsingId: LineupChangeLineupAfterIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateLineupIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnLineupChangeForLineupChangeGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineupChange` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineupChange` being updated.
  """
  patch: LineupChangePatch!
}

"""The `lineupChange` to be created by this mutation."""
input LineupChangeGameIdFkeyLineupChangeCreateInput {
  id: UUID
  lineupBeforeId: UUID
  lineupAfterId: UUID
  lineup: LineupChangeLineupAfterIdFkeyInput
  game: LineupChangeGameIdFkeyInput
  gameEvents: GameEventLineupChangeIdFkeyInverseInput
}

"""The fields on `game` to look up the row to update."""
input GameOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input StolenBaseAttemptOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input StolenBaseAttemptGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnStolenBaseAttemptForStolenBaseAttemptGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `stolenBaseAttempt` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `stolenBaseAttempt` being updated.
  """
  patch: StolenBaseAttemptPatch!
}

"""The `stolenBaseAttempt` to be created by this mutation."""
input StolenBaseAttemptGameIdFkeyStolenBaseAttemptCreateInput {
  id: UUID
  runnerId: UUID
  success: Boolean!
  player: StolenBaseAttemptRunnerIdFkeyInput
  game: StolenBaseAttemptGameIdFkeyInput
  gameEvents: GameEventStolenBaseAttemptIdFkeyInverseInput
}

"""The fields on `game` to look up the row to update."""
input GameOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input OutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input OutOnPlayRunnerGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnOutOnPlayRunnerForOutOnPlayRunnerGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `outOnPlayRunner` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `outOnPlayRunner` being updated.
  """
  patch: OutOnPlayRunnerPatch!
}

"""
Represents an update to a `OutOnPlayRunner`. Fields that are set will be updated.
"""
input OutOnPlayRunnerPatch {
  plateAppearanceId: UUID
  runnerId: UUID
  gameId: UUID
  plateAppearance: OutOnPlayRunnerPlateAppearanceIdFkeyInput
  player: OutOnPlayRunnerRunnerIdFkeyInput
  game: OutOnPlayRunnerGameIdFkeyInput
}

"""The `outOnPlayRunner` to be created by this mutation."""
input OutOnPlayRunnerGameIdFkeyOutOnPlayRunnerCreateInput {
  plateAppearanceId: UUID
  runnerId: UUID
  plateAppearance: OutOnPlayRunnerPlateAppearanceIdFkeyInput
  player: OutOnPlayRunnerRunnerIdFkeyInput
  game: OutOnPlayRunnerGameIdFkeyInput
}

"""The fields on `game` to look up the row to update."""
input GameOnBasepathMovementForBasepathMovementGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnBasepathMovementForBasepathMovementGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input BasepathMovementOnBasepathMovementForBasepathMovementGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input BasepathMovementGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnBasepathMovementForBasepathMovementGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `basepathMovement` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `basepathMovement` being updated.
  """
  patch: BasepathMovementPatch!
}

"""
Represents an update to a `BasepathMovement`. Fields that are set will be updated.
"""
input BasepathMovementPatch {
  plateAppearanceId: UUID
  runnerId: UUID
  endBase: BaseType
  wasSafe: Boolean
  gameId: UUID
  plateAppearance: BasepathMovementPlateAppearanceIdFkeyInput
  player: BasepathMovementRunnerIdFkeyInput
  game: BasepathMovementGameIdFkeyInput
}

"""The `basepathMovement` to be created by this mutation."""
input BasepathMovementGameIdFkeyBasepathMovementCreateInput {
  plateAppearanceId: UUID
  runnerId: UUID
  endBase: BaseType
  wasSafe: Boolean!
  plateAppearance: BasepathMovementPlateAppearanceIdFkeyInput
  player: BasepathMovementRunnerIdFkeyInput
  game: BasepathMovementGameIdFkeyInput
}

"""The fields on `game` to look up the row to update."""
input GameOnGameStateForGameStateGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnGameStateForGameStateGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input GameStateOnGameStateForGameStateGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input GameStateGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnGameStateForGameStatePlayerAtBatFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `gameState` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `gameState` being updated.
  """
  patch: GameStatePatch!
}

"""The `gameState` to be created by this mutation."""
input GameStatePlayerAtBatFkeyGameStateCreateInput {
  id: UUID
  gameId: UUID
  gameStateIndex: Int!
  inning: Int!
  halfInning: HalfInning!
  outs: Int!
  score: [Int]!
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input StolenBaseAttemptOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input StolenBaseAttemptRunnerIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnStolenBaseAttemptForStolenBaseAttemptRunnerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `stolenBaseAttempt` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `stolenBaseAttempt` being updated.
  """
  patch: StolenBaseAttemptPatch!
}

"""The `stolenBaseAttempt` to be created by this mutation."""
input StolenBaseAttemptRunnerIdFkeyStolenBaseAttemptCreateInput {
  id: UUID
  success: Boolean!
  gameId: UUID
  player: StolenBaseAttemptRunnerIdFkeyInput
  game: StolenBaseAttemptGameIdFkeyInput
  gameEvents: GameEventStolenBaseAttemptIdFkeyInverseInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input OutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input OutOnPlayRunnerRunnerIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlateAppearanceOnOutOnPlayRunnerForOutOnPlayRunnerPlateAppearanceIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `outOnPlayRunner` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `outOnPlayRunner` being updated.
  """
  patch: OutOnPlayRunnerPatch!
}

"""The `outOnPlayRunner` to be created by this mutation."""
input OutOnPlayRunnerPlateAppearanceIdFkeyOutOnPlayRunnerCreateInput {
  runnerId: UUID
  gameId: UUID
  plateAppearance: OutOnPlayRunnerPlateAppearanceIdFkeyInput
  player: OutOnPlayRunnerRunnerIdFkeyInput
  game: OutOnPlayRunnerGameIdFkeyInput
}

"""The globally unique `ID` look up for the row to update."""
input OutOnPlayRunnerOnOutOnPlayRunnerForOutOnPlayRunnerPlateAppearanceIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `plateAppearance` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `plateAppearance` being updated.
  """
  patch: PlateAppearancePatch!
}

"""The `plateAppearance` to be created by this mutation."""
input OutOnPlayRunnerPlateAppearanceIdFkeyPlateAppearanceCreateInput {
  id: UUID
  type: PlateAppearanceType!
  contact: ContactQuality
  fieldedBy: FieldingPosition
  runsScoredOnSacFly: Int
  routinePlay: Boolean
  gameId: UUID
  batterId: UUID
  game: PlateAppearanceGameIdFkeyInput
  player: PlateAppearanceBatterIdFkeyInput
  basepathMovements: BasepathMovementPlateAppearanceIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerPlateAppearanceIdFkeyInverseInput
  gameEvents: GameEventPlateAppearanceIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnOutOnPlayRunnerForOutOnPlayRunnerRunnerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `outOnPlayRunner` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `outOnPlayRunner` being updated.
  """
  patch: OutOnPlayRunnerPatch!
}

"""The `outOnPlayRunner` to be created by this mutation."""
input OutOnPlayRunnerRunnerIdFkeyOutOnPlayRunnerCreateInput {
  plateAppearanceId: UUID
  gameId: UUID
  plateAppearance: OutOnPlayRunnerPlateAppearanceIdFkeyInput
  player: OutOnPlayRunnerRunnerIdFkeyInput
  game: OutOnPlayRunnerGameIdFkeyInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnBasepathMovementForBasepathMovementRunnerIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnBasepathMovementForBasepathMovementRunnerIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input BasepathMovementOnBasepathMovementForBasepathMovementRunnerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input BasepathMovementRunnerIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlateAppearanceOnBasepathMovementForBasepathMovementPlateAppearanceIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `basepathMovement` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `basepathMovement` being updated.
  """
  patch: BasepathMovementPatch!
}

"""The `basepathMovement` to be created by this mutation."""
input BasepathMovementPlateAppearanceIdFkeyBasepathMovementCreateInput {
  runnerId: UUID
  endBase: BaseType
  wasSafe: Boolean!
  gameId: UUID
  plateAppearance: BasepathMovementPlateAppearanceIdFkeyInput
  player: BasepathMovementRunnerIdFkeyInput
  game: BasepathMovementGameIdFkeyInput
}

"""The globally unique `ID` look up for the row to update."""
input BasepathMovementOnBasepathMovementForBasepathMovementPlateAppearanceIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `plateAppearance` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `plateAppearance` being updated.
  """
  patch: PlateAppearancePatch!
}

"""The `plateAppearance` to be created by this mutation."""
input BasepathMovementPlateAppearanceIdFkeyPlateAppearanceCreateInput {
  id: UUID
  type: PlateAppearanceType!
  contact: ContactQuality
  fieldedBy: FieldingPosition
  runsScoredOnSacFly: Int
  routinePlay: Boolean
  gameId: UUID
  batterId: UUID
  game: PlateAppearanceGameIdFkeyInput
  player: PlateAppearanceBatterIdFkeyInput
  basepathMovements: BasepathMovementPlateAppearanceIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerPlateAppearanceIdFkeyInverseInput
  gameEvents: GameEventPlateAppearanceIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnBasepathMovementForBasepathMovementRunnerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `basepathMovement` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `basepathMovement` being updated.
  """
  patch: BasepathMovementPatch!
}

"""The `basepathMovement` to be created by this mutation."""
input BasepathMovementRunnerIdFkeyBasepathMovementCreateInput {
  plateAppearanceId: UUID
  endBase: BaseType
  wasSafe: Boolean!
  gameId: UUID
  plateAppearance: BasepathMovementPlateAppearanceIdFkeyInput
  player: BasepathMovementRunnerIdFkeyInput
  game: BasepathMovementGameIdFkeyInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnPlateAppearanceForPlateAppearanceBatterIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnPlateAppearanceForPlateAppearanceBatterIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input PlateAppearanceOnPlateAppearanceForPlateAppearanceBatterIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input PlateAppearanceBatterIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnPlateAppearanceForPlateAppearanceGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `plateAppearance` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `plateAppearance` being updated.
  """
  patch: PlateAppearancePatch!
}

"""The `plateAppearance` to be created by this mutation."""
input PlateAppearanceGameIdFkeyPlateAppearanceCreateInput {
  id: UUID
  type: PlateAppearanceType!
  contact: ContactQuality
  fieldedBy: FieldingPosition
  runsScoredOnSacFly: Int
  routinePlay: Boolean
  batterId: UUID
  game: PlateAppearanceGameIdFkeyInput
  player: PlateAppearanceBatterIdFkeyInput
  basepathMovements: BasepathMovementPlateAppearanceIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerPlateAppearanceIdFkeyInverseInput
  gameEvents: GameEventPlateAppearanceIdFkeyInverseInput
}

"""The fields on `game` to look up the row to update."""
input GameOnLineupSpotForLineupSpotGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnLineupSpotForLineupSpotGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input LineupSpotOnLineupSpotForLineupSpotGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input LineupSpotGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The fields on `lineupSpot` to look up the row to update."""
input LineupSpotOnLineupSpotForLineupSpotGameIdFkeyUsingLineupSpotLineupIdBattingOrderKeyUpdate {
  """
  An object where the defined keys will be set on the `lineupSpot` being updated.
  """
  patch: updateLineupSpotOnLineupSpotForLineupSpotGameIdFkeyPatch!
  lineupId: UUID!
  battingOrder: Int!
}

"""The fields on `lineupSpot` to look up the row to update."""
input LineupSpotOnLineupSpotForLineupSpotGameIdFkeyUsingLineupSpotLineupIdPositionKeyUpdate {
  """
  An object where the defined keys will be set on the `lineupSpot` being updated.
  """
  patch: updateLineupSpotOnLineupSpotForLineupSpotGameIdFkeyPatch!
  lineupId: UUID!
  position: FieldingPosition!
}

"""The globally unique `ID` look up for the row to update."""
input GameOnLineupSpotForLineupSpotGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineupSpot` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineupSpot` being updated.
  """
  patch: LineupSpotPatch!
}

"""
Represents an update to a `LineupSpot`. Fields that are set will be updated.
"""
input LineupSpotPatch {
  lineupId: UUID
  playerId: UUID
  battingOrder: Int
  position: FieldingPosition
  gameId: UUID
  lineup: LineupSpotLineupIdFkeyInput
  player: LineupSpotPlayerIdFkeyInput
  game: LineupSpotGameIdFkeyInput
}

"""The `lineupSpot` to be created by this mutation."""
input LineupSpotGameIdFkeyLineupSpotCreateInput {
  lineupId: UUID
  playerId: UUID
  battingOrder: Int!
  position: FieldingPosition
  lineup: LineupSpotLineupIdFkeyInput
  player: LineupSpotPlayerIdFkeyInput
  game: LineupSpotGameIdFkeyInput
}

"""The fields on `game` to look up the row to update."""
input GameOnPlateAppearanceForPlateAppearanceGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnPlateAppearanceForPlateAppearanceGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input PlateAppearanceOnPlateAppearanceForPlateAppearanceGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input PlateAppearanceGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnPlateAppearanceForPlateAppearanceBatterIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `plateAppearance` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `plateAppearance` being updated.
  """
  patch: PlateAppearancePatch!
}

"""The `plateAppearance` to be created by this mutation."""
input PlateAppearanceBatterIdFkeyPlateAppearanceCreateInput {
  id: UUID
  type: PlateAppearanceType!
  contact: ContactQuality
  fieldedBy: FieldingPosition
  runsScoredOnSacFly: Int
  routinePlay: Boolean
  gameId: UUID
  game: PlateAppearanceGameIdFkeyInput
  player: PlateAppearanceBatterIdFkeyInput
  basepathMovements: BasepathMovementPlateAppearanceIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerPlateAppearanceIdFkeyInverseInput
  gameEvents: GameEventPlateAppearanceIdFkeyInverseInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnLineupSpotForLineupSpotPlayerIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnLineupSpotForLineupSpotPlayerIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input LineupSpotOnLineupSpotForLineupSpotPlayerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input LineupSpotPlayerIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The fields on `lineupSpot` to look up the row to update."""
input LineupSpotOnLineupSpotForLineupSpotLineupIdFkeyUsingLineupSpotLineupIdBattingOrderKeyUpdate {
  """
  An object where the defined keys will be set on the `lineupSpot` being updated.
  """
  patch: updateLineupSpotOnLineupSpotForLineupSpotLineupIdFkeyPatch!
  lineupId: UUID!
  battingOrder: Int!
}

"""The fields on `lineupSpot` to look up the row to update."""
input LineupSpotOnLineupSpotForLineupSpotLineupIdFkeyUsingLineupSpotLineupIdPositionKeyUpdate {
  """
  An object where the defined keys will be set on the `lineupSpot` being updated.
  """
  patch: updateLineupSpotOnLineupSpotForLineupSpotLineupIdFkeyPatch!
  lineupId: UUID!
  position: FieldingPosition!
}

"""The globally unique `ID` look up for the row to update."""
input LineupOnLineupSpotForLineupSpotLineupIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineupSpot` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineupSpot` being updated.
  """
  patch: LineupSpotPatch!
}

"""The `lineupSpot` to be created by this mutation."""
input LineupSpotLineupIdFkeyLineupSpotCreateInput {
  playerId: UUID
  battingOrder: Int!
  position: FieldingPosition
  gameId: UUID
  lineup: LineupSpotLineupIdFkeyInput
  player: LineupSpotPlayerIdFkeyInput
  game: LineupSpotGameIdFkeyInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnLineupForLineupGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineup` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineup` being updated.
  """
  patch: LineupPatch!
}

"""The `lineup` to be created by this mutation."""
input LineupGameIdFkeyLineupCreateInput {
  id: UUID
  teamId: UUID
  team: LineupTeamIdFkeyInput
  game: LineupGameIdFkeyInput
  lineupSpots: LineupSpotLineupIdFkeyInverseInput
  lineupChangesToLineupBeforeIdUsingId: LineupChangeLineupBeforeIdFkeyInverseInput
  lineupChangesToLineupAfterIdUsingId: LineupChangeLineupAfterIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateLineupIdFkeyInverseInput
}

"""The fields on `game` to look up the row to update."""
input GameOnLineupForLineupGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnLineupForLineupGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input LineupOnLineupForLineupGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input LineupGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input TeamOnLineupForLineupTeamIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineup` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineup` being updated.
  """
  patch: LineupPatch!
}

"""The `lineup` to be created by this mutation."""
input LineupTeamIdFkeyLineupCreateInput {
  id: UUID
  gameId: UUID
  team: LineupTeamIdFkeyInput
  game: LineupGameIdFkeyInput
  lineupSpots: LineupSpotLineupIdFkeyInverseInput
  lineupChangesToLineupBeforeIdUsingId: LineupChangeLineupBeforeIdFkeyInverseInput
  lineupChangesToLineupAfterIdUsingId: LineupChangeLineupAfterIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateLineupIdFkeyInverseInput
}

"""The fields on `team` to look up the row to update."""
input TeamOnLineupForLineupTeamIdFkeyUsingTeamGameIdRoleKeyUpdate {
  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: updateTeamOnLineupForLineupTeamIdFkeyPatch!
  gameId: UUID!
  role: TeamRole!
}

"""The globally unique `ID` look up for the row to update."""
input LineupOnLineupForLineupTeamIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `team` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: TeamPatch!
}

"""The `team` to be created by this mutation."""
input LineupTeamIdFkeyTeamCreateInput {
  id: UUID
  gameId: UUID
  role: TeamRole!
  name: String
  captainId: UUID
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input LineupSpotOnLineupSpotForLineupSpotLineupIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineup` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineup` being updated.
  """
  patch: LineupPatch!
}

"""The `lineup` to be created by this mutation."""
input LineupSpotLineupIdFkeyLineupCreateInput {
  id: UUID
  teamId: UUID
  gameId: UUID
  team: LineupTeamIdFkeyInput
  game: LineupGameIdFkeyInput
  lineupSpots: LineupSpotLineupIdFkeyInverseInput
  lineupChangesToLineupBeforeIdUsingId: LineupChangeLineupBeforeIdFkeyInverseInput
  lineupChangesToLineupAfterIdUsingId: LineupChangeLineupAfterIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateLineupIdFkeyInverseInput
}

"""The fields on `lineupSpot` to look up the row to update."""
input LineupSpotOnLineupSpotForLineupSpotPlayerIdFkeyUsingLineupSpotLineupIdBattingOrderKeyUpdate {
  """
  An object where the defined keys will be set on the `lineupSpot` being updated.
  """
  patch: updateLineupSpotOnLineupSpotForLineupSpotPlayerIdFkeyPatch!
  lineupId: UUID!
  battingOrder: Int!
}

"""The fields on `lineupSpot` to look up the row to update."""
input LineupSpotOnLineupSpotForLineupSpotPlayerIdFkeyUsingLineupSpotLineupIdPositionKeyUpdate {
  """
  An object where the defined keys will be set on the `lineupSpot` being updated.
  """
  patch: updateLineupSpotOnLineupSpotForLineupSpotPlayerIdFkeyPatch!
  lineupId: UUID!
  position: FieldingPosition!
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnLineupSpotForLineupSpotPlayerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `lineupSpot` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `lineupSpot` being updated.
  """
  patch: LineupSpotPatch!
}

"""The `lineupSpot` to be created by this mutation."""
input LineupSpotPlayerIdFkeyLineupSpotCreateInput {
  lineupId: UUID
  battingOrder: Int!
  position: FieldingPosition
  gameId: UUID
  lineup: LineupSpotLineupIdFkeyInput
  player: LineupSpotPlayerIdFkeyInput
  game: LineupSpotGameIdFkeyInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnTeamForTeamCaptainIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnTeamForTeamCaptainIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input TeamOnTeamForTeamCaptainIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input TeamCaptainIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The fields on `team` to look up the row to update."""
input TeamOnTeamForTeamGameIdFkeyUsingTeamGameIdRoleKeyUpdate {
  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: updateTeamOnTeamForTeamGameIdFkeyPatch!
  gameId: UUID!
  role: TeamRole!
}

"""The globally unique `ID` look up for the row to update."""
input GameOnTeamForTeamGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `team` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: TeamPatch!
}

"""The `team` to be created by this mutation."""
input TeamGameIdFkeyTeamCreateInput {
  id: UUID
  role: TeamRole!
  name: String
  captainId: UUID
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""The fields on `game` to look up the row to update."""
input GameOnGameForGameFieldIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnGameForGameFieldIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input FieldOnGameForGameFieldIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input GameFieldIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The globally unique `ID` look up for the row to update."""
input GameOnGameForGameFieldIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `field` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `field` being updated.
  """
  patch: FieldPatch!
}

"""
Represents an update to a `Field`. Fields that are set will be updated.
"""
input FieldPatch {
  id: UUID
  name: String
  notes: String
  address: String
  games: GameFieldIdFkeyInverseInput
}

"""The `field` to be created by this mutation."""
input GameFieldIdFkeyFieldCreateInput {
  id: UUID
  name: String!
  notes: String
  address: String!
  games: GameFieldIdFkeyInverseInput
}

"""The fields on `game` to look up the row to update."""
input GameOnGameForGameGroupIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnGameForGameGroupIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input GroupOnGameForGameGroupIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input GameGroupIdFkeyGameCreateInput {
  id: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The fields on `group` to look up the row to update."""
input GroupOnGameForGameGroupIdFkeyUsingGroupNameKeyUpdate {
  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: updateGroupOnGameForGameGroupIdFkeyPatch!
  name: String!
}

"""The fields on `group` to look up the row to update."""
input GroupOnGameForGameGroupIdFkeyUsingGroupUrlSlugKeyUpdate {
  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: updateGroupOnGameForGameGroupIdFkeyPatch!
  urlSlug: String!
}

"""The globally unique `ID` look up for the row to update."""
input GameOnGameForGameGroupIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `group` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `group` being updated.
  """
  patch: GroupPatch!
}

"""The `group` to be created by this mutation."""
input GameGroupIdFkeyGroupCreateInput {
  id: UUID
  name: String!
  notes: String
  soloMode: Boolean
  urlSlug: String!
  allowSkippingAtBats: Boolean
  allowSteals: Boolean
  games: GameGroupIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipGroupIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey0InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey0InverseInput
}

"""The fields on `game` to look up the row to update."""
input GameOnTeamForTeamGameIdFkeyUsingGameNameUniqPerGroupUpdate {
  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: updateGameOnTeamForTeamGameIdFkeyPatch!
  groupId: UUID!
  name: String!
}

"""The globally unique `ID` look up for the row to update."""
input TeamOnTeamForTeamGameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `game` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `game` being updated.
  """
  patch: GamePatch!
}

"""The `game` to be created by this mutation."""
input TeamGameIdFkeyGameCreateInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The fields on `team` to look up the row to update."""
input TeamOnTeamForTeamCaptainIdFkeyUsingTeamGameIdRoleKeyUpdate {
  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: updateTeamOnTeamForTeamCaptainIdFkeyPatch!
  gameId: UUID!
  role: TeamRole!
}

"""The globally unique `ID` look up for the row to update."""
input PlayerOnTeamForTeamCaptainIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `team` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `team` being updated.
  """
  patch: TeamPatch!
}

"""The `team` to be created by this mutation."""
input TeamCaptainIdFkeyTeamCreateInput {
  id: UUID
  gameId: UUID
  role: TeamRole!
  name: String
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""The fields on `player` to look up the row to update."""
input PlayerOnAtBatSkipForAtBatSkipBatterIdFkeyUsingPlayerNameUniqueUpdate {
  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: updatePlayerOnAtBatSkipForAtBatSkipBatterIdFkeyPatch!
  firstName: String!
  lastName: String!
}

"""The globally unique `ID` look up for the row to update."""
input AtBatSkipOnAtBatSkipForAtBatSkipBatterIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `player` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `player` being updated.
  """
  patch: PlayerPatch!
}

"""The `player` to be created by this mutation."""
input AtBatSkipBatterIdFkeyPlayerCreateInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The output of our create `BaseRunner` mutation."""
type CreateBaseRunnerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BaseRunner` that was created by this mutation."""
  baseRunner: BaseRunner

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GameState` that is related to this `BaseRunner`."""
  gameState: GameState

  """Reads a single `Player` that is related to this `BaseRunner`."""
  runner: Player

  """Reads a single `Game` that is related to this `BaseRunner`."""
  game: Game
}

"""All input for the create `BaseRunner` mutation."""
input CreateBaseRunnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BaseRunner` to be created by this mutation."""
  baseRunner: BaseRunnerInput!
}

"""An input for mutations affecting `BaseRunner`"""
input BaseRunnerInput {
  gameStateId: UUID
  runnerId: UUID
  base: BaseType!
  gameId: UUID
  gameState: BaseRunnerGameStateIdFkeyInput
  player: BaseRunnerRunnerIdFkeyInput
  game: BaseRunnerGameIdFkeyInput
}

"""The output of our create `BasepathMovement` mutation."""
type CreateBasepathMovementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BasepathMovement` that was created by this mutation."""
  basepathMovement: BasepathMovement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `PlateAppearance` that is related to this `BasepathMovement`.
  """
  plateAppearance: PlateAppearance

  """Reads a single `Player` that is related to this `BasepathMovement`."""
  runner: Player

  """Reads a single `Game` that is related to this `BasepathMovement`."""
  game: Game
}

"""All input for the create `BasepathMovement` mutation."""
input CreateBasepathMovementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BasepathMovement` to be created by this mutation."""
  basepathMovement: BasepathMovementInput!
}

"""An input for mutations affecting `BasepathMovement`"""
input BasepathMovementInput {
  plateAppearanceId: UUID
  runnerId: UUID
  endBase: BaseType
  wasSafe: Boolean!
  gameId: UUID
  plateAppearance: BasepathMovementPlateAppearanceIdFkeyInput
  player: BasepathMovementRunnerIdFkeyInput
  game: BasepathMovementGameIdFkeyInput
}

"""The output of our create `EarlyGameEnd` mutation."""
type CreateEarlyGameEndPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EarlyGameEnd` that was created by this mutation."""
  earlyGameEnd: EarlyGameEnd

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `EarlyGameEnd`."""
  game: Game
}

"""All input for the create `EarlyGameEnd` mutation."""
input CreateEarlyGameEndInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EarlyGameEnd` to be created by this mutation."""
  earlyGameEnd: EarlyGameEndInput!
}

"""An input for mutations affecting `EarlyGameEnd`"""
input EarlyGameEndInput {
  id: UUID
  reason: EarlyGameEndReason!
  gameId: UUID
  game: EarlyGameEndGameIdFkeyInput
  gameEvents: GameEventEarlyGameEndIdFkeyInverseInput
}

"""The output of our create `Field` mutation."""
type CreateFieldPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Field` that was created by this mutation."""
  field: Field

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Field` mutation."""
input CreateFieldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Field` to be created by this mutation."""
  field: FieldInput!
}

"""An input for mutations affecting `Field`"""
input FieldInput {
  id: UUID
  name: String!
  notes: String
  address: String!
  games: GameFieldIdFkeyInverseInput
}

"""The output of our create `Game` mutation."""
type CreateGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Game` that was created by this mutation."""
  game: Game

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `Game`."""
  group: Group

  """Reads a single `Field` that is related to this `Game`."""
  field: Field
}

"""All input for the create `Game` mutation."""
input CreateGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Game` to be created by this mutation."""
  game: GameInput!
}

"""An input for mutations affecting `Game`"""
input GameInput {
  id: UUID
  groupId: UUID
  name: String
  fieldId: UUID
  score: [Int]!
  gameLength: Int
  timeStarted: Datetime!
  timeEnded: Datetime!
  timeSaved: Datetime
  soloMode: Boolean!
  manualEntry: Boolean
  legacyMeetup: Boolean
  group: GameGroupIdFkeyInput
  field: GameFieldIdFkeyInput
  teams: TeamGameIdFkeyInverseInput
  lineups: LineupGameIdFkeyInverseInput
  lineupSpots: LineupSpotGameIdFkeyInverseInput
  plateAppearances: PlateAppearanceGameIdFkeyInverseInput
  basepathMovements: BasepathMovementGameIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerGameIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptGameIdFkeyInverseInput
  lineupChanges: LineupChangeGameIdFkeyInverseInput
  gameEvents: GameEventGameIdFkeyInverseInput
  gameStates: GameStateGameIdFkeyInverseInput
  baseRunners: BaseRunnerGameIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameIdFkeyInverseInput
  gameEventRecords: GameEventRecordGameIdFkeyInverseInput
  scoredRunners: ScoredRunnerGameIdFkeyInverseInput
  soloModeOpponentInnings: SoloModeOpponentInningGameIdFkeyInverseInput
  atBatSkips: AtBatSkipGameIdFkeyInverseInput
  earlyGameEnds: EarlyGameEndGameIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineGameIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineGameIdFkeyInverseInput
  manualEntryLineScoreCells: ManualEntryLineScoreCellGameIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey0InverseInput
}

"""The output of our create `GameAuxMeetupInfo` mutation."""
type CreateGameAuxMeetupInfoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameAuxMeetupInfo` that was created by this mutation."""
  gameAuxMeetupInfo: GameAuxMeetupInfo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `GameAuxMeetupInfo`."""
  game: Player
}

"""All input for the create `GameAuxMeetupInfo` mutation."""
input CreateGameAuxMeetupInfoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GameAuxMeetupInfo` to be created by this mutation."""
  gameAuxMeetupInfo: GameAuxMeetupInfoInput!
}

"""An input for mutations affecting `GameAuxMeetupInfo`"""
input GameAuxMeetupInfoInput {
  gameId: UUID
  imageGalleryUrl: String
  meetupEventId: String
  advanced: Boolean
  player: GameAuxMeetupInfoGameIdFkeyInput
}

"""The output of our create `GameEvent` mutation."""
type CreateGameEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameEvent` that was created by this mutation."""
  gameEvent: GameEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `PlateAppearance` that is related to this `GameEvent`."""
  plateAppearance: PlateAppearance

  """
  Reads a single `StolenBaseAttempt` that is related to this `GameEvent`.
  """
  stolenBaseAttempt: StolenBaseAttempt

  """Reads a single `LineupChange` that is related to this `GameEvent`."""
  lineupChange: LineupChange

  """
  Reads a single `SoloModeOpponentInning` that is related to this `GameEvent`.
  """
  soloModeOpponentInning: SoloModeOpponentInning

  """Reads a single `AtBatSkip` that is related to this `GameEvent`."""
  atBatSkip: AtBatSkip

  """Reads a single `Game` that is related to this `GameEvent`."""
  game: Game

  """Reads a single `EarlyGameEnd` that is related to this `GameEvent`."""
  earlyGameEnd: EarlyGameEnd
}

"""All input for the create `GameEvent` mutation."""
input CreateGameEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GameEvent` to be created by this mutation."""
  gameEvent: GameEventInput!
}

"""An input for mutations affecting `GameEvent`"""
input GameEventInput {
  id: UUID
  plateAppearanceId: UUID
  stolenBaseAttemptId: UUID
  lineupChangeId: UUID
  soloModeOpponentInningId: UUID
  atBatSkipId: UUID
  gameId: UUID
  earlyGameEndId: UUID
  plateAppearance: GameEventPlateAppearanceIdFkeyInput
  stolenBaseAttempt: GameEventStolenBaseAttemptIdFkeyInput
  lineupChange: GameEventLineupChangeIdFkeyInput
  soloModeOpponentInning: GameEventSoloModeOpponentInningIdFkeyInput
  atBatSkip: GameEventAtBatSkipIdFkeyInput
  game: GameEventGameIdFkeyInput
  earlyGameEnd: GameEventEarlyGameEndIdFkeyInput
  gameEventRecords: GameEventRecordGameEventIdFkeyInverseInput
}

"""The output of our create `GameEventRecord` mutation."""
type CreateGameEventRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameEventRecord` that was created by this mutation."""
  gameEventRecord: GameEventRecord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `GameEventRecord`."""
  game: Game

  """Reads a single `GameState` that is related to this `GameEventRecord`."""
  gameStateBefore: GameState

  """Reads a single `GameState` that is related to this `GameEventRecord`."""
  gameStateAfter: GameState

  """Reads a single `GameEvent` that is related to this `GameEventRecord`."""
  gameEvent: GameEvent
}

"""All input for the create `GameEventRecord` mutation."""
input CreateGameEventRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GameEventRecord` to be created by this mutation."""
  gameEventRecord: GameEventRecordInput!
}

"""An input for mutations affecting `GameEventRecord`"""
input GameEventRecordInput {
  id: UUID
  gameId: UUID
  eventIndex: Int!
  gameStateBeforeId: UUID
  gameStateAfterId: UUID
  gameEventId: UUID
  notes: String
  game: GameEventRecordGameIdFkeyInput
  gameStateBefore: GameEventRecordGameStateBeforeFkInput
  gameStateAfter: GameEventRecordGameStateAfterFkInput
  gameEvent: GameEventRecordGameEventIdFkeyInput
  scoredRunners: ScoredRunnerGameEventRecordIdFkeyInverseInput
}

"""The output of our create `GameState` mutation."""
type CreateGameStatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameState` that was created by this mutation."""
  gameState: GameState

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `GameState`."""
  game: Game

  """Reads a single `Player` that is related to this `GameState`."""
  playerByPlayerAtBat: Player
}

"""All input for the create `GameState` mutation."""
input CreateGameStateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GameState` to be created by this mutation."""
  gameState: GameStateInput!
}

"""An input for mutations affecting `GameState`"""
input GameStateInput {
  id: UUID
  gameId: UUID
  gameStateIndex: Int!
  playerAtBat: UUID
  inning: Int!
  halfInning: HalfInning!
  outs: Int!
  score: [Int]!
  game: GameStateGameIdFkeyInput
  player: GameStatePlayerAtBatFkeyInput
  baseRunners: BaseRunnerGameStateIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateGameStateIdFkeyInverseInput
  gameEventRecordsToGameStateBeforeIdUsingId: GameEventRecordGameStateBeforeFkInverseInput
  gameEventRecordsToGameStateAfterIdUsingId: GameEventRecordGameStateAfterFkInverseInput
}

"""The output of our create `Group` mutation."""
type CreateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was created by this mutation."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Group` mutation."""
input CreateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Group` to be created by this mutation."""
  group: GroupInput!
}

"""An input for mutations affecting `Group`"""
input GroupInput {
  id: UUID
  name: String!
  notes: String
  soloMode: Boolean
  urlSlug: String!
  allowSkippingAtBats: Boolean
  allowSteals: Boolean
  games: GameGroupIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipGroupIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey0InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey0InverseInput
}

"""The output of our create `Lineup` mutation."""
type CreateLineupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Lineup` that was created by this mutation."""
  lineup: Lineup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Team` that is related to this `Lineup`."""
  team: Team

  """Reads a single `Game` that is related to this `Lineup`."""
  game: Game
}

"""All input for the create `Lineup` mutation."""
input CreateLineupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Lineup` to be created by this mutation."""
  lineup: LineupInput!
}

"""An input for mutations affecting `Lineup`"""
input LineupInput {
  id: UUID
  teamId: UUID
  gameId: UUID
  team: LineupTeamIdFkeyInput
  game: LineupGameIdFkeyInput
  lineupSpots: LineupSpotLineupIdFkeyInverseInput
  lineupChangesToLineupBeforeIdUsingId: LineupChangeLineupBeforeIdFkeyInverseInput
  lineupChangesToLineupAfterIdUsingId: LineupChangeLineupAfterIdFkeyInverseInput
  lineupForGameStates: LineupForGameStateLineupIdFkeyInverseInput
}

"""The output of our create `LineupChange` mutation."""
type CreateLineupChangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LineupChange` that was created by this mutation."""
  lineupChange: LineupChange

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Lineup` that is related to this `LineupChange`."""
  lineupBefore: Lineup

  """Reads a single `Lineup` that is related to this `LineupChange`."""
  lineupAfter: Lineup

  """Reads a single `Game` that is related to this `LineupChange`."""
  game: Game
}

"""All input for the create `LineupChange` mutation."""
input CreateLineupChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LineupChange` to be created by this mutation."""
  lineupChange: LineupChangeInput!
}

"""An input for mutations affecting `LineupChange`"""
input LineupChangeInput {
  id: UUID
  lineupBeforeId: UUID
  lineupAfterId: UUID
  gameId: UUID
  lineup: LineupChangeLineupAfterIdFkeyInput
  game: LineupChangeGameIdFkeyInput
  gameEvents: GameEventLineupChangeIdFkeyInverseInput
}

"""The output of our create `LineupForGameState` mutation."""
type CreateLineupForGameStatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LineupForGameState` that was created by this mutation."""
  lineupForGameState: LineupForGameState

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `GameState` that is related to this `LineupForGameState`.
  """
  gameState: GameState

  """Reads a single `Lineup` that is related to this `LineupForGameState`."""
  lineup: Lineup

  """Reads a single `Game` that is related to this `LineupForGameState`."""
  game: Game
}

"""All input for the create `LineupForGameState` mutation."""
input CreateLineupForGameStateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LineupForGameState` to be created by this mutation."""
  lineupForGameState: LineupForGameStateInput!
}

"""An input for mutations affecting `LineupForGameState`"""
input LineupForGameStateInput {
  gameStateId: UUID
  lineupId: UUID
  gameId: UUID
  gameState: LineupForGameStateGameStateIdFkeyInput
  lineup: LineupForGameStateLineupIdFkeyInput
  game: LineupForGameStateGameIdFkeyInput
}

"""The output of our create `LineupSpot` mutation."""
type CreateLineupSpotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LineupSpot` that was created by this mutation."""
  lineupSpot: LineupSpot

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Lineup` that is related to this `LineupSpot`."""
  lineup: Lineup

  """Reads a single `Player` that is related to this `LineupSpot`."""
  player: Player

  """Reads a single `Game` that is related to this `LineupSpot`."""
  game: Game
}

"""All input for the create `LineupSpot` mutation."""
input CreateLineupSpotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LineupSpot` to be created by this mutation."""
  lineupSpot: LineupSpotInput!
}

"""An input for mutations affecting `LineupSpot`"""
input LineupSpotInput {
  lineupId: UUID
  playerId: UUID
  battingOrder: Int!
  position: FieldingPosition
  gameId: UUID
  lineup: LineupSpotLineupIdFkeyInput
  player: LineupSpotPlayerIdFkeyInput
  game: LineupSpotGameIdFkeyInput
}

"""The output of our create `ManualEntryBattingLine` mutation."""
type CreateManualEntryBattingLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ManualEntryBattingLine` that was created by this mutation."""
  manualEntryBattingLine: ManualEntryBattingLine

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Game` that is related to this `ManualEntryBattingLine`.
  """
  game: Game

  """
  Reads a single `Team` that is related to this `ManualEntryBattingLine`.
  """
  team: Team

  """
  Reads a single `Player` that is related to this `ManualEntryBattingLine`.
  """
  player: Player
}

"""All input for the create `ManualEntryBattingLine` mutation."""
input CreateManualEntryBattingLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ManualEntryBattingLine` to be created by this mutation."""
  manualEntryBattingLine: ManualEntryBattingLineInput!
}

"""An input for mutations affecting `ManualEntryBattingLine`"""
input ManualEntryBattingLineInput {
  gameId: UUID
  teamId: UUID
  playerId: UUID
  plateAppearances: Int!
  atBats: Int!
  hits: Int!
  singles: Int!
  doubles: Int!
  triples: Int!
  homeruns: Int!
  walks: Int!
  strikeouts: Int!
  sacFlies: Int!
  gidp: Int!
  runs: Int!
  rbi: Int!
  stolenBases: Int!
  game: ManualEntryBattingLineGameIdFkeyInput
  team: ManualEntryBattingLineTeamIdFkeyInput
  player: ManualEntryBattingLinePlayerIdFkeyInput
}

"""The output of our create `ManualEntryLineScoreCell` mutation."""
type CreateManualEntryLineScoreCellPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ManualEntryLineScoreCell` that was created by this mutation."""
  manualEntryLineScoreCell: ManualEntryLineScoreCell

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Game` that is related to this `ManualEntryLineScoreCell`.
  """
  game: Game
}

"""All input for the create `ManualEntryLineScoreCell` mutation."""
input CreateManualEntryLineScoreCellInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ManualEntryLineScoreCell` to be created by this mutation."""
  manualEntryLineScoreCell: ManualEntryLineScoreCellInput!
}

"""An input for mutations affecting `ManualEntryLineScoreCell`"""
input ManualEntryLineScoreCellInput {
  gameId: UUID
  inning: Int!
  halfInning: HalfInning!
  runs: Int!
  game: ManualEntryLineScoreCellGameIdFkeyInput
}

"""The output of our create `ManualEntryPitchingLine` mutation."""
type CreateManualEntryPitchingLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ManualEntryPitchingLine` that was created by this mutation."""
  manualEntryPitchingLine: ManualEntryPitchingLine

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Game` that is related to this `ManualEntryPitchingLine`.
  """
  game: Game

  """
  Reads a single `Team` that is related to this `ManualEntryPitchingLine`.
  """
  team: Team

  """
  Reads a single `Player` that is related to this `ManualEntryPitchingLine`.
  """
  player: Player
}

"""All input for the create `ManualEntryPitchingLine` mutation."""
input CreateManualEntryPitchingLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ManualEntryPitchingLine` to be created by this mutation."""
  manualEntryPitchingLine: ManualEntryPitchingLineInput!
}

"""An input for mutations affecting `ManualEntryPitchingLine`"""
input ManualEntryPitchingLineInput {
  gameId: UUID
  teamId: UUID
  playerId: UUID
  inningsPitched: Int!
  won: Boolean!
  lost: Boolean!
  save: Boolean!
  completeGame: Boolean!
  qualityStart: Boolean!
  runsAllowed: Int!
  strikeouts: Int!
  walks: Int!
  game: ManualEntryPitchingLineGameIdFkeyInput
  team: ManualEntryPitchingLineTeamIdFkeyInput
  player: ManualEntryPitchingLinePlayerIdFkeyInput
}

"""The output of our create `OutOnPlayRunner` mutation."""
type CreateOutOnPlayRunnerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OutOnPlayRunner` that was created by this mutation."""
  outOnPlayRunner: OutOnPlayRunner

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `PlateAppearance` that is related to this `OutOnPlayRunner`.
  """
  plateAppearance: PlateAppearance

  """Reads a single `Player` that is related to this `OutOnPlayRunner`."""
  runner: Player

  """Reads a single `Game` that is related to this `OutOnPlayRunner`."""
  game: Game
}

"""All input for the create `OutOnPlayRunner` mutation."""
input CreateOutOnPlayRunnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OutOnPlayRunner` to be created by this mutation."""
  outOnPlayRunner: OutOnPlayRunnerInput!
}

"""An input for mutations affecting `OutOnPlayRunner`"""
input OutOnPlayRunnerInput {
  plateAppearanceId: UUID
  runnerId: UUID
  gameId: UUID
  plateAppearance: OutOnPlayRunnerPlateAppearanceIdFkeyInput
  player: OutOnPlayRunnerRunnerIdFkeyInput
  game: OutOnPlayRunnerGameIdFkeyInput
}

"""The output of our create `PlateAppearance` mutation."""
type CreatePlateAppearancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlateAppearance` that was created by this mutation."""
  plateAppearance: PlateAppearance

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `PlateAppearance`."""
  game: Game

  """Reads a single `Player` that is related to this `PlateAppearance`."""
  batter: Player
}

"""All input for the create `PlateAppearance` mutation."""
input CreatePlateAppearanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PlateAppearance` to be created by this mutation."""
  plateAppearance: PlateAppearanceInput!
}

"""An input for mutations affecting `PlateAppearance`"""
input PlateAppearanceInput {
  id: UUID
  type: PlateAppearanceType!
  contact: ContactQuality
  fieldedBy: FieldingPosition
  runsScoredOnSacFly: Int
  routinePlay: Boolean
  gameId: UUID
  batterId: UUID
  game: PlateAppearanceGameIdFkeyInput
  player: PlateAppearanceBatterIdFkeyInput
  basepathMovements: BasepathMovementPlateAppearanceIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerPlateAppearanceIdFkeyInverseInput
  gameEvents: GameEventPlateAppearanceIdFkeyInverseInput
}

"""The output of our create `Player` mutation."""
type CreatePlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Player` that was created by this mutation."""
  player: Player

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Player` mutation."""
input CreatePlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Player` to be created by this mutation."""
  player: PlayerInput!
}

"""An input for mutations affecting `Player`"""
input PlayerInput {
  id: UUID
  legacyPlayerId: Int
  firstName: String!
  lastName: String
  nickname: String
  imageUrl: String
  timeCreated: Datetime
  claimed: Boolean
  timeUpdated: Datetime
  timeClaimed: Datetime
  active: Boolean
  teams: TeamCaptainIdFkeyInverseInput
  lineupSpots: LineupSpotPlayerIdFkeyInverseInput
  plateAppearances: PlateAppearanceBatterIdFkeyInverseInput
  basepathMovements: BasepathMovementRunnerIdFkeyInverseInput
  outOnPlayRunners: OutOnPlayRunnerRunnerIdFkeyInverseInput
  stolenBaseAttempts: StolenBaseAttemptRunnerIdFkeyInverseInput
  gameStates: GameStatePlayerAtBatFkeyInverseInput
  baseRunners: BaseRunnerRunnerIdFkeyInverseInput
  scoredRunners: ScoredRunnerRunnerIdFkeyInverseInput
  playerGroupMemberships: PlayerGroupMembershipPlayerIdFkeyInverseInput
  atBatSkips: AtBatSkipBatterIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLinePlayerIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLinePlayerIdFkeyInverseInput
  playerAuxMeetupInfo: PlayerAuxMeetupInfoPlayerIdFkeyInverseInput
  gameAuxMeetupInfo: GameAuxMeetupInfoGameIdFkeyInverseInput
  careerBattingStats: FakePublicCareerBattingStatsForeignKey1InverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey2InverseInput
  seasonBattingStats: FakePublicSeasonBattingStatsForeignKey1InverseInput
}

"""The output of our create `PlayerAuxMeetupInfo` mutation."""
type CreatePlayerAuxMeetupInfoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlayerAuxMeetupInfo` that was created by this mutation."""
  playerAuxMeetupInfo: PlayerAuxMeetupInfo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `PlayerAuxMeetupInfo`."""
  player: Player
}

"""All input for the create `PlayerAuxMeetupInfo` mutation."""
input CreatePlayerAuxMeetupInfoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PlayerAuxMeetupInfo` to be created by this mutation."""
  playerAuxMeetupInfo: PlayerAuxMeetupInfoInput!
}

"""An input for mutations affecting `PlayerAuxMeetupInfo`"""
input PlayerAuxMeetupInfoInput {
  playerId: UUID
  gender: Gender!
  bats: Handedness!
  throws: Handedness!
  preferredPositionFirst: FieldingPosition!
  preferredPositionSecond: FieldingPosition!
  preferredPositionThird: FieldingPosition!
  meetupMemberId: String!
  adminNickname: String
  selfNickname: String
  skillLevel: Int
  favoriteTeam: String
  hometown: String
  school: String
  dateDebuted: Date
  player: PlayerAuxMeetupInfoPlayerIdFkeyInput
}

"""The output of our create `PlayerGroupMembership` mutation."""
type CreatePlayerGroupMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlayerGroupMembership` that was created by this mutation."""
  playerGroupMembership: PlayerGroupMembership

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Player` that is related to this `PlayerGroupMembership`.
  """
  player: Player

  """
  Reads a single `Group` that is related to this `PlayerGroupMembership`.
  """
  group: Group
}

"""All input for the create `PlayerGroupMembership` mutation."""
input CreatePlayerGroupMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PlayerGroupMembership` to be created by this mutation."""
  playerGroupMembership: PlayerGroupMembershipInput!
}

"""An input for mutations affecting `PlayerGroupMembership`"""
input PlayerGroupMembershipInput {
  playerId: UUID
  groupId: UUID
  player: PlayerGroupMembershipPlayerIdFkeyInput
  group: PlayerGroupMembershipGroupIdFkeyInput
}

"""The output of our create `ReduxDump` mutation."""
type CreateReduxDumpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReduxDump` that was created by this mutation."""
  reduxDump: ReduxDump

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ReduxDump` mutation."""
input CreateReduxDumpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReduxDump` to be created by this mutation."""
  reduxDump: ReduxDumpInput!
}

"""An input for mutations affecting `ReduxDump`"""
input ReduxDumpInput {
  id: UUID
  storeData: JSON!
  timeCreated: Datetime
}

"""The output of our create `ScoredRunner` mutation."""
type CreateScoredRunnerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ScoredRunner` that was created by this mutation."""
  scoredRunner: ScoredRunner

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `GameEventRecord` that is related to this `ScoredRunner`.
  """
  gameEventRecord: GameEventRecord

  """Reads a single `Player` that is related to this `ScoredRunner`."""
  runner: Player

  """Reads a single `Game` that is related to this `ScoredRunner`."""
  game: Game
}

"""All input for the create `ScoredRunner` mutation."""
input CreateScoredRunnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ScoredRunner` to be created by this mutation."""
  scoredRunner: ScoredRunnerInput!
}

"""An input for mutations affecting `ScoredRunner`"""
input ScoredRunnerInput {
  gameEventRecordId: UUID
  runnerId: UUID
  battedIn: Boolean!
  gameId: UUID
  gameEventRecord: ScoredRunnerGameEventRecordIdFkeyInput
  player: ScoredRunnerRunnerIdFkeyInput
  game: ScoredRunnerGameIdFkeyInput
}

"""The output of our create `SoloModeOpponentInning` mutation."""
type CreateSoloModeOpponentInningPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SoloModeOpponentInning` that was created by this mutation."""
  soloModeOpponentInning: SoloModeOpponentInning

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Game` that is related to this `SoloModeOpponentInning`.
  """
  game: Game
}

"""All input for the create `SoloModeOpponentInning` mutation."""
input CreateSoloModeOpponentInningInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SoloModeOpponentInning` to be created by this mutation."""
  soloModeOpponentInning: SoloModeOpponentInningInput!
}

"""An input for mutations affecting `SoloModeOpponentInning`"""
input SoloModeOpponentInningInput {
  id: UUID
  runsScored: Int!
  gameId: UUID
  game: SoloModeOpponentInningGameIdFkeyInput
  gameEvents: GameEventSoloModeOpponentInningIdFkeyInverseInput
}

"""The output of our create `StolenBaseAttempt` mutation."""
type CreateStolenBaseAttemptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StolenBaseAttempt` that was created by this mutation."""
  stolenBaseAttempt: StolenBaseAttempt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `StolenBaseAttempt`."""
  runner: Player

  """Reads a single `Game` that is related to this `StolenBaseAttempt`."""
  game: Game
}

"""All input for the create `StolenBaseAttempt` mutation."""
input CreateStolenBaseAttemptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `StolenBaseAttempt` to be created by this mutation."""
  stolenBaseAttempt: StolenBaseAttemptInput!
}

"""An input for mutations affecting `StolenBaseAttempt`"""
input StolenBaseAttemptInput {
  id: UUID
  runnerId: UUID
  success: Boolean!
  gameId: UUID
  player: StolenBaseAttemptRunnerIdFkeyInput
  game: StolenBaseAttemptGameIdFkeyInput
  gameEvents: GameEventStolenBaseAttemptIdFkeyInverseInput
}

"""The output of our create `Team` mutation."""
type CreateTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was created by this mutation."""
  team: Team

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `Team`."""
  game: Game

  """Reads a single `Player` that is related to this `Team`."""
  captain: Player
}

"""All input for the create `Team` mutation."""
input CreateTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Team` to be created by this mutation."""
  team: TeamInput!
}

"""An input for mutations affecting `Team`"""
input TeamInput {
  id: UUID
  gameId: UUID
  role: TeamRole!
  name: String
  captainId: UUID
  winner: Boolean
  soloModeOpponent: Boolean
  game: TeamGameIdFkeyInput
  player: TeamCaptainIdFkeyInput
  lineups: LineupTeamIdFkeyInverseInput
  manualEntryBattingLines: ManualEntryBattingLineTeamIdFkeyInverseInput
  manualEntryPitchingLines: ManualEntryPitchingLineTeamIdFkeyInverseInput
  gameBattingStats: FakePublicGameBattingStatsForeignKey1InverseInput
}

"""The output of our update `AtBatSkip` mutation."""
type UpdateAtBatSkipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AtBatSkip` that was updated by this mutation."""
  atBatSkip: AtBatSkip

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `AtBatSkip`."""
  batter: Player

  """Reads a single `Game` that is related to this `AtBatSkip`."""
  game: Game
}

"""All input for the `updateAtBatSkipByNodeId` mutation."""
input UpdateAtBatSkipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AtBatSkip` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AtBatSkip` being updated.
  """
  patch: AtBatSkipPatch!
}

"""All input for the `updateAtBatSkip` mutation."""
input UpdateAtBatSkipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AtBatSkip` being updated.
  """
  patch: AtBatSkipPatch!
  id: UUID!
}

"""The output of our update `BaseRunner` mutation."""
type UpdateBaseRunnerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BaseRunner` that was updated by this mutation."""
  baseRunner: BaseRunner

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GameState` that is related to this `BaseRunner`."""
  gameState: GameState

  """Reads a single `Player` that is related to this `BaseRunner`."""
  runner: Player

  """Reads a single `Game` that is related to this `BaseRunner`."""
  game: Game
}

"""All input for the `updateBaseRunnerByNodeId` mutation."""
input UpdateBaseRunnerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BaseRunner` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BaseRunner` being updated.
  """
  patch: BaseRunnerPatch!
}

"""All input for the `updateBaseRunner` mutation."""
input UpdateBaseRunnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BaseRunner` being updated.
  """
  patch: BaseRunnerPatch!
  gameStateId: UUID!
  runnerId: UUID!
}

"""The output of our update `BasepathMovement` mutation."""
type UpdateBasepathMovementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BasepathMovement` that was updated by this mutation."""
  basepathMovement: BasepathMovement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `PlateAppearance` that is related to this `BasepathMovement`.
  """
  plateAppearance: PlateAppearance

  """Reads a single `Player` that is related to this `BasepathMovement`."""
  runner: Player

  """Reads a single `Game` that is related to this `BasepathMovement`."""
  game: Game
}

"""All input for the `updateBasepathMovementByNodeId` mutation."""
input UpdateBasepathMovementByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BasepathMovement` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BasepathMovement` being updated.
  """
  patch: BasepathMovementPatch!
}

"""All input for the `updateBasepathMovement` mutation."""
input UpdateBasepathMovementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BasepathMovement` being updated.
  """
  patch: BasepathMovementPatch!
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""The output of our update `EarlyGameEnd` mutation."""
type UpdateEarlyGameEndPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EarlyGameEnd` that was updated by this mutation."""
  earlyGameEnd: EarlyGameEnd

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `EarlyGameEnd`."""
  game: Game
}

"""All input for the `updateEarlyGameEndByNodeId` mutation."""
input UpdateEarlyGameEndByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EarlyGameEnd` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EarlyGameEnd` being updated.
  """
  patch: EarlyGameEndPatch!
}

"""All input for the `updateEarlyGameEnd` mutation."""
input UpdateEarlyGameEndInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EarlyGameEnd` being updated.
  """
  patch: EarlyGameEndPatch!
  id: UUID!
}

"""The output of our update `Field` mutation."""
type UpdateFieldPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Field` that was updated by this mutation."""
  field: Field

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFieldByNodeId` mutation."""
input UpdateFieldByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Field` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Field` being updated.
  """
  patch: FieldPatch!
}

"""All input for the `updateField` mutation."""
input UpdateFieldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Field` being updated.
  """
  patch: FieldPatch!
  id: UUID!
}

"""The output of our update `Game` mutation."""
type UpdateGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Game` that was updated by this mutation."""
  game: Game

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `Game`."""
  group: Group

  """Reads a single `Field` that is related to this `Game`."""
  field: Field
}

"""All input for the `updateGameByNodeId` mutation."""
input UpdateGameByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Game` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Game` being updated.
  """
  patch: GamePatch!
}

"""All input for the `updateGame` mutation."""
input UpdateGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Game` being updated.
  """
  patch: GamePatch!
  id: UUID!
}

"""All input for the `updateGameByGroupIdAndName` mutation."""
input UpdateGameByGroupIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Game` being updated.
  """
  patch: GamePatch!
  groupId: UUID!
  name: String!
}

"""The output of our update `GameAuxMeetupInfo` mutation."""
type UpdateGameAuxMeetupInfoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameAuxMeetupInfo` that was updated by this mutation."""
  gameAuxMeetupInfo: GameAuxMeetupInfo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `GameAuxMeetupInfo`."""
  game: Player
}

"""All input for the `updateGameAuxMeetupInfoByNodeId` mutation."""
input UpdateGameAuxMeetupInfoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GameAuxMeetupInfo` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GameAuxMeetupInfo` being updated.
  """
  patch: GameAuxMeetupInfoPatch!
}

"""All input for the `updateGameAuxMeetupInfo` mutation."""
input UpdateGameAuxMeetupInfoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GameAuxMeetupInfo` being updated.
  """
  patch: GameAuxMeetupInfoPatch!
  gameId: UUID!
}

"""The output of our update `GameEvent` mutation."""
type UpdateGameEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameEvent` that was updated by this mutation."""
  gameEvent: GameEvent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `PlateAppearance` that is related to this `GameEvent`."""
  plateAppearance: PlateAppearance

  """
  Reads a single `StolenBaseAttempt` that is related to this `GameEvent`.
  """
  stolenBaseAttempt: StolenBaseAttempt

  """Reads a single `LineupChange` that is related to this `GameEvent`."""
  lineupChange: LineupChange

  """
  Reads a single `SoloModeOpponentInning` that is related to this `GameEvent`.
  """
  soloModeOpponentInning: SoloModeOpponentInning

  """Reads a single `AtBatSkip` that is related to this `GameEvent`."""
  atBatSkip: AtBatSkip

  """Reads a single `Game` that is related to this `GameEvent`."""
  game: Game

  """Reads a single `EarlyGameEnd` that is related to this `GameEvent`."""
  earlyGameEnd: EarlyGameEnd
}

"""All input for the `updateGameEventByNodeId` mutation."""
input UpdateGameEventByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GameEvent` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GameEvent` being updated.
  """
  patch: GameEventPatch!
}

"""All input for the `updateGameEvent` mutation."""
input UpdateGameEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GameEvent` being updated.
  """
  patch: GameEventPatch!
  id: UUID!
}

"""The output of our update `GameEventRecord` mutation."""
type UpdateGameEventRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameEventRecord` that was updated by this mutation."""
  gameEventRecord: GameEventRecord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `GameEventRecord`."""
  game: Game

  """Reads a single `GameState` that is related to this `GameEventRecord`."""
  gameStateBefore: GameState

  """Reads a single `GameState` that is related to this `GameEventRecord`."""
  gameStateAfter: GameState

  """Reads a single `GameEvent` that is related to this `GameEventRecord`."""
  gameEvent: GameEvent
}

"""All input for the `updateGameEventRecordByNodeId` mutation."""
input UpdateGameEventRecordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GameEventRecord` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GameEventRecord` being updated.
  """
  patch: GameEventRecordPatch!
}

"""All input for the `updateGameEventRecord` mutation."""
input UpdateGameEventRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GameEventRecord` being updated.
  """
  patch: GameEventRecordPatch!
  id: UUID!
}

"""
All input for the `updateGameEventRecordByGameIdAndEventIndex` mutation.
"""
input UpdateGameEventRecordByGameIdAndEventIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GameEventRecord` being updated.
  """
  patch: GameEventRecordPatch!
  gameId: UUID!
  eventIndex: Int!
}

"""The output of our update `GameState` mutation."""
type UpdateGameStatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameState` that was updated by this mutation."""
  gameState: GameState

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `GameState`."""
  game: Game

  """Reads a single `Player` that is related to this `GameState`."""
  playerByPlayerAtBat: Player
}

"""All input for the `updateGameStateByNodeId` mutation."""
input UpdateGameStateByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GameState` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GameState` being updated.
  """
  patch: GameStatePatch!
}

"""All input for the `updateGameState` mutation."""
input UpdateGameStateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GameState` being updated.
  """
  patch: GameStatePatch!
  id: UUID!
}

"""The output of our update `Group` mutation."""
type UpdateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was updated by this mutation."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGroupByNodeId` mutation."""
input UpdateGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
}

"""All input for the `updateGroup` mutation."""
input UpdateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
  id: UUID!
}

"""All input for the `updateGroupByName` mutation."""
input UpdateGroupByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
  name: String!
}

"""All input for the `updateGroupByUrlSlug` mutation."""
input UpdateGroupByUrlSlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
  urlSlug: String!
}

"""The output of our update `Lineup` mutation."""
type UpdateLineupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Lineup` that was updated by this mutation."""
  lineup: Lineup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Team` that is related to this `Lineup`."""
  team: Team

  """Reads a single `Game` that is related to this `Lineup`."""
  game: Game
}

"""All input for the `updateLineupByNodeId` mutation."""
input UpdateLineupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Lineup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Lineup` being updated.
  """
  patch: LineupPatch!
}

"""All input for the `updateLineup` mutation."""
input UpdateLineupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Lineup` being updated.
  """
  patch: LineupPatch!
  id: UUID!
}

"""The output of our update `LineupChange` mutation."""
type UpdateLineupChangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LineupChange` that was updated by this mutation."""
  lineupChange: LineupChange

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Lineup` that is related to this `LineupChange`."""
  lineupBefore: Lineup

  """Reads a single `Lineup` that is related to this `LineupChange`."""
  lineupAfter: Lineup

  """Reads a single `Game` that is related to this `LineupChange`."""
  game: Game
}

"""All input for the `updateLineupChangeByNodeId` mutation."""
input UpdateLineupChangeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LineupChange` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LineupChange` being updated.
  """
  patch: LineupChangePatch!
}

"""All input for the `updateLineupChange` mutation."""
input UpdateLineupChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LineupChange` being updated.
  """
  patch: LineupChangePatch!
  id: UUID!
}

"""The output of our update `LineupForGameState` mutation."""
type UpdateLineupForGameStatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LineupForGameState` that was updated by this mutation."""
  lineupForGameState: LineupForGameState

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `GameState` that is related to this `LineupForGameState`.
  """
  gameState: GameState

  """Reads a single `Lineup` that is related to this `LineupForGameState`."""
  lineup: Lineup

  """Reads a single `Game` that is related to this `LineupForGameState`."""
  game: Game
}

"""All input for the `updateLineupForGameStateByNodeId` mutation."""
input UpdateLineupForGameStateByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LineupForGameState` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LineupForGameState` being updated.
  """
  patch: LineupForGameStatePatch!
}

"""All input for the `updateLineupForGameState` mutation."""
input UpdateLineupForGameStateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LineupForGameState` being updated.
  """
  patch: LineupForGameStatePatch!
  gameStateId: UUID!
  lineupId: UUID!
}

"""The output of our update `LineupSpot` mutation."""
type UpdateLineupSpotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LineupSpot` that was updated by this mutation."""
  lineupSpot: LineupSpot

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Lineup` that is related to this `LineupSpot`."""
  lineup: Lineup

  """Reads a single `Player` that is related to this `LineupSpot`."""
  player: Player

  """Reads a single `Game` that is related to this `LineupSpot`."""
  game: Game
}

"""All input for the `updateLineupSpotByNodeId` mutation."""
input UpdateLineupSpotByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LineupSpot` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LineupSpot` being updated.
  """
  patch: LineupSpotPatch!
}

"""All input for the `updateLineupSpot` mutation."""
input UpdateLineupSpotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LineupSpot` being updated.
  """
  patch: LineupSpotPatch!
  lineupId: UUID!
  playerId: UUID!
}

"""
All input for the `updateLineupSpotByLineupIdAndBattingOrder` mutation.
"""
input UpdateLineupSpotByLineupIdAndBattingOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LineupSpot` being updated.
  """
  patch: LineupSpotPatch!
  lineupId: UUID!
  battingOrder: Int!
}

"""All input for the `updateLineupSpotByLineupIdAndPosition` mutation."""
input UpdateLineupSpotByLineupIdAndPositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LineupSpot` being updated.
  """
  patch: LineupSpotPatch!
  lineupId: UUID!
  position: FieldingPosition!
}

"""The output of our update `ManualEntryBattingLine` mutation."""
type UpdateManualEntryBattingLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ManualEntryBattingLine` that was updated by this mutation."""
  manualEntryBattingLine: ManualEntryBattingLine

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Game` that is related to this `ManualEntryBattingLine`.
  """
  game: Game

  """
  Reads a single `Team` that is related to this `ManualEntryBattingLine`.
  """
  team: Team

  """
  Reads a single `Player` that is related to this `ManualEntryBattingLine`.
  """
  player: Player
}

"""All input for the `updateManualEntryBattingLineByNodeId` mutation."""
input UpdateManualEntryBattingLineByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ManualEntryBattingLine` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ManualEntryBattingLine` being updated.
  """
  patch: ManualEntryBattingLinePatch!
}

"""All input for the `updateManualEntryBattingLine` mutation."""
input UpdateManualEntryBattingLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ManualEntryBattingLine` being updated.
  """
  patch: ManualEntryBattingLinePatch!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""The output of our update `ManualEntryLineScoreCell` mutation."""
type UpdateManualEntryLineScoreCellPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ManualEntryLineScoreCell` that was updated by this mutation."""
  manualEntryLineScoreCell: ManualEntryLineScoreCell

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Game` that is related to this `ManualEntryLineScoreCell`.
  """
  game: Game
}

"""All input for the `updateManualEntryLineScoreCellByNodeId` mutation."""
input UpdateManualEntryLineScoreCellByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ManualEntryLineScoreCell` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ManualEntryLineScoreCell` being updated.
  """
  patch: ManualEntryLineScoreCellPatch!
}

"""All input for the `updateManualEntryLineScoreCell` mutation."""
input UpdateManualEntryLineScoreCellInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ManualEntryLineScoreCell` being updated.
  """
  patch: ManualEntryLineScoreCellPatch!
  gameId: UUID!
  inning: Int!
  halfInning: HalfInning!
}

"""The output of our update `ManualEntryPitchingLine` mutation."""
type UpdateManualEntryPitchingLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ManualEntryPitchingLine` that was updated by this mutation."""
  manualEntryPitchingLine: ManualEntryPitchingLine

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Game` that is related to this `ManualEntryPitchingLine`.
  """
  game: Game

  """
  Reads a single `Team` that is related to this `ManualEntryPitchingLine`.
  """
  team: Team

  """
  Reads a single `Player` that is related to this `ManualEntryPitchingLine`.
  """
  player: Player
}

"""All input for the `updateManualEntryPitchingLineByNodeId` mutation."""
input UpdateManualEntryPitchingLineByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ManualEntryPitchingLine` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ManualEntryPitchingLine` being updated.
  """
  patch: ManualEntryPitchingLinePatch!
}

"""All input for the `updateManualEntryPitchingLine` mutation."""
input UpdateManualEntryPitchingLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ManualEntryPitchingLine` being updated.
  """
  patch: ManualEntryPitchingLinePatch!
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""The output of our update `OutOnPlayRunner` mutation."""
type UpdateOutOnPlayRunnerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OutOnPlayRunner` that was updated by this mutation."""
  outOnPlayRunner: OutOnPlayRunner

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `PlateAppearance` that is related to this `OutOnPlayRunner`.
  """
  plateAppearance: PlateAppearance

  """Reads a single `Player` that is related to this `OutOnPlayRunner`."""
  runner: Player

  """Reads a single `Game` that is related to this `OutOnPlayRunner`."""
  game: Game
}

"""All input for the `updateOutOnPlayRunnerByNodeId` mutation."""
input UpdateOutOnPlayRunnerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OutOnPlayRunner` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OutOnPlayRunner` being updated.
  """
  patch: OutOnPlayRunnerPatch!
}

"""All input for the `updateOutOnPlayRunner` mutation."""
input UpdateOutOnPlayRunnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OutOnPlayRunner` being updated.
  """
  patch: OutOnPlayRunnerPatch!
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""The output of our update `PlateAppearance` mutation."""
type UpdatePlateAppearancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlateAppearance` that was updated by this mutation."""
  plateAppearance: PlateAppearance

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `PlateAppearance`."""
  game: Game

  """Reads a single `Player` that is related to this `PlateAppearance`."""
  batter: Player
}

"""All input for the `updatePlateAppearanceByNodeId` mutation."""
input UpdatePlateAppearanceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlateAppearance` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PlateAppearance` being updated.
  """
  patch: PlateAppearancePatch!
}

"""All input for the `updatePlateAppearance` mutation."""
input UpdatePlateAppearanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PlateAppearance` being updated.
  """
  patch: PlateAppearancePatch!
  id: UUID!
}

"""The output of our update `Player` mutation."""
type UpdatePlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Player` that was updated by this mutation."""
  player: Player

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePlayerByNodeId` mutation."""
input UpdatePlayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Player` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Player` being updated.
  """
  patch: PlayerPatch!
}

"""All input for the `updatePlayer` mutation."""
input UpdatePlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Player` being updated.
  """
  patch: PlayerPatch!
  id: UUID!
}

"""All input for the `updatePlayerByFirstNameAndLastName` mutation."""
input UpdatePlayerByFirstNameAndLastNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Player` being updated.
  """
  patch: PlayerPatch!
  firstName: String!
  lastName: String!
}

"""The output of our update `PlayerAuxMeetupInfo` mutation."""
type UpdatePlayerAuxMeetupInfoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlayerAuxMeetupInfo` that was updated by this mutation."""
  playerAuxMeetupInfo: PlayerAuxMeetupInfo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `PlayerAuxMeetupInfo`."""
  player: Player
}

"""All input for the `updatePlayerAuxMeetupInfoByNodeId` mutation."""
input UpdatePlayerAuxMeetupInfoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlayerAuxMeetupInfo` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PlayerAuxMeetupInfo` being updated.
  """
  patch: PlayerAuxMeetupInfoPatch!
}

"""All input for the `updatePlayerAuxMeetupInfo` mutation."""
input UpdatePlayerAuxMeetupInfoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PlayerAuxMeetupInfo` being updated.
  """
  patch: PlayerAuxMeetupInfoPatch!
  playerId: UUID!
}

"""The output of our update `PlayerGroupMembership` mutation."""
type UpdatePlayerGroupMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlayerGroupMembership` that was updated by this mutation."""
  playerGroupMembership: PlayerGroupMembership

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Player` that is related to this `PlayerGroupMembership`.
  """
  player: Player

  """
  Reads a single `Group` that is related to this `PlayerGroupMembership`.
  """
  group: Group
}

"""All input for the `updatePlayerGroupMembershipByNodeId` mutation."""
input UpdatePlayerGroupMembershipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlayerGroupMembership` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PlayerGroupMembership` being updated.
  """
  patch: PlayerGroupMembershipPatch!
}

"""All input for the `updatePlayerGroupMembership` mutation."""
input UpdatePlayerGroupMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PlayerGroupMembership` being updated.
  """
  patch: PlayerGroupMembershipPatch!
  playerId: UUID!
  groupId: UUID!
}

"""The output of our update `ReduxDump` mutation."""
type UpdateReduxDumpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReduxDump` that was updated by this mutation."""
  reduxDump: ReduxDump

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateReduxDumpByNodeId` mutation."""
input UpdateReduxDumpByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReduxDump` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ReduxDump` being updated.
  """
  patch: ReduxDumpPatch!
}

"""
Represents an update to a `ReduxDump`. Fields that are set will be updated.
"""
input ReduxDumpPatch {
  id: UUID
  storeData: JSON
  timeCreated: Datetime
}

"""All input for the `updateReduxDump` mutation."""
input UpdateReduxDumpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReduxDump` being updated.
  """
  patch: ReduxDumpPatch!
  id: UUID!
}

"""The output of our update `ScoredRunner` mutation."""
type UpdateScoredRunnerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ScoredRunner` that was updated by this mutation."""
  scoredRunner: ScoredRunner

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `GameEventRecord` that is related to this `ScoredRunner`.
  """
  gameEventRecord: GameEventRecord

  """Reads a single `Player` that is related to this `ScoredRunner`."""
  runner: Player

  """Reads a single `Game` that is related to this `ScoredRunner`."""
  game: Game
}

"""All input for the `updateScoredRunnerByNodeId` mutation."""
input UpdateScoredRunnerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ScoredRunner` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ScoredRunner` being updated.
  """
  patch: ScoredRunnerPatch!
}

"""All input for the `updateScoredRunner` mutation."""
input UpdateScoredRunnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ScoredRunner` being updated.
  """
  patch: ScoredRunnerPatch!
  gameEventRecordId: UUID!
  runnerId: UUID!
}

"""The output of our update `SoloModeOpponentInning` mutation."""
type UpdateSoloModeOpponentInningPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SoloModeOpponentInning` that was updated by this mutation."""
  soloModeOpponentInning: SoloModeOpponentInning

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Game` that is related to this `SoloModeOpponentInning`.
  """
  game: Game
}

"""All input for the `updateSoloModeOpponentInningByNodeId` mutation."""
input UpdateSoloModeOpponentInningByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SoloModeOpponentInning` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SoloModeOpponentInning` being updated.
  """
  patch: SoloModeOpponentInningPatch!
}

"""All input for the `updateSoloModeOpponentInning` mutation."""
input UpdateSoloModeOpponentInningInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SoloModeOpponentInning` being updated.
  """
  patch: SoloModeOpponentInningPatch!
  id: UUID!
}

"""The output of our update `StolenBaseAttempt` mutation."""
type UpdateStolenBaseAttemptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StolenBaseAttempt` that was updated by this mutation."""
  stolenBaseAttempt: StolenBaseAttempt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `StolenBaseAttempt`."""
  runner: Player

  """Reads a single `Game` that is related to this `StolenBaseAttempt`."""
  game: Game
}

"""All input for the `updateStolenBaseAttemptByNodeId` mutation."""
input UpdateStolenBaseAttemptByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StolenBaseAttempt` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `StolenBaseAttempt` being updated.
  """
  patch: StolenBaseAttemptPatch!
}

"""All input for the `updateStolenBaseAttempt` mutation."""
input UpdateStolenBaseAttemptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `StolenBaseAttempt` being updated.
  """
  patch: StolenBaseAttemptPatch!
  id: UUID!
}

"""The output of our update `Team` mutation."""
type UpdateTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was updated by this mutation."""
  team: Team

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `Team`."""
  game: Game

  """Reads a single `Player` that is related to this `Team`."""
  captain: Player
}

"""All input for the `updateTeamByNodeId` mutation."""
input UpdateTeamByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Team` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Team` being updated.
  """
  patch: TeamPatch!
}

"""All input for the `updateTeam` mutation."""
input UpdateTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Team` being updated.
  """
  patch: TeamPatch!
  id: UUID!
}

"""All input for the `updateTeamByGameIdAndRole` mutation."""
input UpdateTeamByGameIdAndRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Team` being updated.
  """
  patch: TeamPatch!
  gameId: UUID!
  role: TeamRole!
}

"""The output of our delete `AtBatSkip` mutation."""
type DeleteAtBatSkipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AtBatSkip` that was deleted by this mutation."""
  atBatSkip: AtBatSkip
  deletedAtBatSkipNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `AtBatSkip`."""
  batter: Player

  """Reads a single `Game` that is related to this `AtBatSkip`."""
  game: Game
}

"""All input for the `deleteAtBatSkipByNodeId` mutation."""
input DeleteAtBatSkipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AtBatSkip` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAtBatSkip` mutation."""
input DeleteAtBatSkipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `BaseRunner` mutation."""
type DeleteBaseRunnerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BaseRunner` that was deleted by this mutation."""
  baseRunner: BaseRunner
  deletedBaseRunnerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GameState` that is related to this `BaseRunner`."""
  gameState: GameState

  """Reads a single `Player` that is related to this `BaseRunner`."""
  runner: Player

  """Reads a single `Game` that is related to this `BaseRunner`."""
  game: Game
}

"""All input for the `deleteBaseRunnerByNodeId` mutation."""
input DeleteBaseRunnerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BaseRunner` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBaseRunner` mutation."""
input DeleteBaseRunnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gameStateId: UUID!
  runnerId: UUID!
}

"""The output of our delete `BasepathMovement` mutation."""
type DeleteBasepathMovementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BasepathMovement` that was deleted by this mutation."""
  basepathMovement: BasepathMovement
  deletedBasepathMovementNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `PlateAppearance` that is related to this `BasepathMovement`.
  """
  plateAppearance: PlateAppearance

  """Reads a single `Player` that is related to this `BasepathMovement`."""
  runner: Player

  """Reads a single `Game` that is related to this `BasepathMovement`."""
  game: Game
}

"""All input for the `deleteBasepathMovementByNodeId` mutation."""
input DeleteBasepathMovementByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BasepathMovement` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBasepathMovement` mutation."""
input DeleteBasepathMovementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""The output of our delete `EarlyGameEnd` mutation."""
type DeleteEarlyGameEndPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EarlyGameEnd` that was deleted by this mutation."""
  earlyGameEnd: EarlyGameEnd
  deletedEarlyGameEndNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `EarlyGameEnd`."""
  game: Game
}

"""All input for the `deleteEarlyGameEndByNodeId` mutation."""
input DeleteEarlyGameEndByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EarlyGameEnd` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteEarlyGameEnd` mutation."""
input DeleteEarlyGameEndInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Field` mutation."""
type DeleteFieldPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Field` that was deleted by this mutation."""
  field: Field
  deletedFieldNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFieldByNodeId` mutation."""
input DeleteFieldByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Field` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteField` mutation."""
input DeleteFieldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Game` mutation."""
type DeleteGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Game` that was deleted by this mutation."""
  game: Game
  deletedGameNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `Game`."""
  group: Group

  """Reads a single `Field` that is related to this `Game`."""
  field: Field
}

"""All input for the `deleteGameByNodeId` mutation."""
input DeleteGameByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Game` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGame` mutation."""
input DeleteGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteGameByGroupIdAndName` mutation."""
input DeleteGameByGroupIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: UUID!
  name: String!
}

"""The output of our delete `GameAuxMeetupInfo` mutation."""
type DeleteGameAuxMeetupInfoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameAuxMeetupInfo` that was deleted by this mutation."""
  gameAuxMeetupInfo: GameAuxMeetupInfo
  deletedGameAuxMeetupInfoNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `GameAuxMeetupInfo`."""
  game: Player
}

"""All input for the `deleteGameAuxMeetupInfoByNodeId` mutation."""
input DeleteGameAuxMeetupInfoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GameAuxMeetupInfo` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGameAuxMeetupInfo` mutation."""
input DeleteGameAuxMeetupInfoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gameId: UUID!
}

"""The output of our delete `GameEvent` mutation."""
type DeleteGameEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameEvent` that was deleted by this mutation."""
  gameEvent: GameEvent
  deletedGameEventNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `PlateAppearance` that is related to this `GameEvent`."""
  plateAppearance: PlateAppearance

  """
  Reads a single `StolenBaseAttempt` that is related to this `GameEvent`.
  """
  stolenBaseAttempt: StolenBaseAttempt

  """Reads a single `LineupChange` that is related to this `GameEvent`."""
  lineupChange: LineupChange

  """
  Reads a single `SoloModeOpponentInning` that is related to this `GameEvent`.
  """
  soloModeOpponentInning: SoloModeOpponentInning

  """Reads a single `AtBatSkip` that is related to this `GameEvent`."""
  atBatSkip: AtBatSkip

  """Reads a single `Game` that is related to this `GameEvent`."""
  game: Game

  """Reads a single `EarlyGameEnd` that is related to this `GameEvent`."""
  earlyGameEnd: EarlyGameEnd
}

"""All input for the `deleteGameEventByNodeId` mutation."""
input DeleteGameEventByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GameEvent` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGameEvent` mutation."""
input DeleteGameEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `GameEventRecord` mutation."""
type DeleteGameEventRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameEventRecord` that was deleted by this mutation."""
  gameEventRecord: GameEventRecord
  deletedGameEventRecordNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `GameEventRecord`."""
  game: Game

  """Reads a single `GameState` that is related to this `GameEventRecord`."""
  gameStateBefore: GameState

  """Reads a single `GameState` that is related to this `GameEventRecord`."""
  gameStateAfter: GameState

  """Reads a single `GameEvent` that is related to this `GameEventRecord`."""
  gameEvent: GameEvent
}

"""All input for the `deleteGameEventRecordByNodeId` mutation."""
input DeleteGameEventRecordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GameEventRecord` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGameEventRecord` mutation."""
input DeleteGameEventRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteGameEventRecordByGameIdAndEventIndex` mutation.
"""
input DeleteGameEventRecordByGameIdAndEventIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gameId: UUID!
  eventIndex: Int!
}

"""The output of our delete `GameState` mutation."""
type DeleteGameStatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameState` that was deleted by this mutation."""
  gameState: GameState
  deletedGameStateNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `GameState`."""
  game: Game

  """Reads a single `Player` that is related to this `GameState`."""
  playerByPlayerAtBat: Player
}

"""All input for the `deleteGameStateByNodeId` mutation."""
input DeleteGameStateByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GameState` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGameState` mutation."""
input DeleteGameStateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Group` mutation."""
type DeleteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was deleted by this mutation."""
  group: Group
  deletedGroupNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGroupByNodeId` mutation."""
input DeleteGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroup` mutation."""
input DeleteGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteGroupByName` mutation."""
input DeleteGroupByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteGroupByUrlSlug` mutation."""
input DeleteGroupByUrlSlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  urlSlug: String!
}

"""The output of our delete `Lineup` mutation."""
type DeleteLineupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Lineup` that was deleted by this mutation."""
  lineup: Lineup
  deletedLineupNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Team` that is related to this `Lineup`."""
  team: Team

  """Reads a single `Game` that is related to this `Lineup`."""
  game: Game
}

"""All input for the `deleteLineupByNodeId` mutation."""
input DeleteLineupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Lineup` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLineup` mutation."""
input DeleteLineupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `LineupChange` mutation."""
type DeleteLineupChangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LineupChange` that was deleted by this mutation."""
  lineupChange: LineupChange
  deletedLineupChangeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Lineup` that is related to this `LineupChange`."""
  lineupBefore: Lineup

  """Reads a single `Lineup` that is related to this `LineupChange`."""
  lineupAfter: Lineup

  """Reads a single `Game` that is related to this `LineupChange`."""
  game: Game
}

"""All input for the `deleteLineupChangeByNodeId` mutation."""
input DeleteLineupChangeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LineupChange` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLineupChange` mutation."""
input DeleteLineupChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `LineupForGameState` mutation."""
type DeleteLineupForGameStatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LineupForGameState` that was deleted by this mutation."""
  lineupForGameState: LineupForGameState
  deletedLineupForGameStateNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `GameState` that is related to this `LineupForGameState`.
  """
  gameState: GameState

  """Reads a single `Lineup` that is related to this `LineupForGameState`."""
  lineup: Lineup

  """Reads a single `Game` that is related to this `LineupForGameState`."""
  game: Game
}

"""All input for the `deleteLineupForGameStateByNodeId` mutation."""
input DeleteLineupForGameStateByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LineupForGameState` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLineupForGameState` mutation."""
input DeleteLineupForGameStateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gameStateId: UUID!
  lineupId: UUID!
}

"""The output of our delete `LineupSpot` mutation."""
type DeleteLineupSpotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LineupSpot` that was deleted by this mutation."""
  lineupSpot: LineupSpot
  deletedLineupSpotNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Lineup` that is related to this `LineupSpot`."""
  lineup: Lineup

  """Reads a single `Player` that is related to this `LineupSpot`."""
  player: Player

  """Reads a single `Game` that is related to this `LineupSpot`."""
  game: Game
}

"""All input for the `deleteLineupSpotByNodeId` mutation."""
input DeleteLineupSpotByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LineupSpot` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLineupSpot` mutation."""
input DeleteLineupSpotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lineupId: UUID!
  playerId: UUID!
}

"""
All input for the `deleteLineupSpotByLineupIdAndBattingOrder` mutation.
"""
input DeleteLineupSpotByLineupIdAndBattingOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lineupId: UUID!
  battingOrder: Int!
}

"""All input for the `deleteLineupSpotByLineupIdAndPosition` mutation."""
input DeleteLineupSpotByLineupIdAndPositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lineupId: UUID!
  position: FieldingPosition!
}

"""The output of our delete `ManualEntryBattingLine` mutation."""
type DeleteManualEntryBattingLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ManualEntryBattingLine` that was deleted by this mutation."""
  manualEntryBattingLine: ManualEntryBattingLine
  deletedManualEntryBattingLineNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Game` that is related to this `ManualEntryBattingLine`.
  """
  game: Game

  """
  Reads a single `Team` that is related to this `ManualEntryBattingLine`.
  """
  team: Team

  """
  Reads a single `Player` that is related to this `ManualEntryBattingLine`.
  """
  player: Player
}

"""All input for the `deleteManualEntryBattingLineByNodeId` mutation."""
input DeleteManualEntryBattingLineByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ManualEntryBattingLine` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteManualEntryBattingLine` mutation."""
input DeleteManualEntryBattingLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""The output of our delete `ManualEntryLineScoreCell` mutation."""
type DeleteManualEntryLineScoreCellPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ManualEntryLineScoreCell` that was deleted by this mutation."""
  manualEntryLineScoreCell: ManualEntryLineScoreCell
  deletedManualEntryLineScoreCellNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Game` that is related to this `ManualEntryLineScoreCell`.
  """
  game: Game
}

"""All input for the `deleteManualEntryLineScoreCellByNodeId` mutation."""
input DeleteManualEntryLineScoreCellByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ManualEntryLineScoreCell` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteManualEntryLineScoreCell` mutation."""
input DeleteManualEntryLineScoreCellInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gameId: UUID!
  inning: Int!
  halfInning: HalfInning!
}

"""The output of our delete `ManualEntryPitchingLine` mutation."""
type DeleteManualEntryPitchingLinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ManualEntryPitchingLine` that was deleted by this mutation."""
  manualEntryPitchingLine: ManualEntryPitchingLine
  deletedManualEntryPitchingLineNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Game` that is related to this `ManualEntryPitchingLine`.
  """
  game: Game

  """
  Reads a single `Team` that is related to this `ManualEntryPitchingLine`.
  """
  team: Team

  """
  Reads a single `Player` that is related to this `ManualEntryPitchingLine`.
  """
  player: Player
}

"""All input for the `deleteManualEntryPitchingLineByNodeId` mutation."""
input DeleteManualEntryPitchingLineByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ManualEntryPitchingLine` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteManualEntryPitchingLine` mutation."""
input DeleteManualEntryPitchingLineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gameId: UUID!
  teamId: UUID!
  playerId: UUID!
}

"""The output of our delete `OutOnPlayRunner` mutation."""
type DeleteOutOnPlayRunnerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OutOnPlayRunner` that was deleted by this mutation."""
  outOnPlayRunner: OutOnPlayRunner
  deletedOutOnPlayRunnerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `PlateAppearance` that is related to this `OutOnPlayRunner`.
  """
  plateAppearance: PlateAppearance

  """Reads a single `Player` that is related to this `OutOnPlayRunner`."""
  runner: Player

  """Reads a single `Game` that is related to this `OutOnPlayRunner`."""
  game: Game
}

"""All input for the `deleteOutOnPlayRunnerByNodeId` mutation."""
input DeleteOutOnPlayRunnerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OutOnPlayRunner` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOutOnPlayRunner` mutation."""
input DeleteOutOnPlayRunnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  plateAppearanceId: UUID!
  runnerId: UUID!
}

"""The output of our delete `PlateAppearance` mutation."""
type DeletePlateAppearancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlateAppearance` that was deleted by this mutation."""
  plateAppearance: PlateAppearance
  deletedPlateAppearanceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `PlateAppearance`."""
  game: Game

  """Reads a single `Player` that is related to this `PlateAppearance`."""
  batter: Player
}

"""All input for the `deletePlateAppearanceByNodeId` mutation."""
input DeletePlateAppearanceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlateAppearance` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlateAppearance` mutation."""
input DeletePlateAppearanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Player` mutation."""
type DeletePlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Player` that was deleted by this mutation."""
  player: Player
  deletedPlayerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePlayerByNodeId` mutation."""
input DeletePlayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Player` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlayer` mutation."""
input DeletePlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deletePlayerByFirstNameAndLastName` mutation."""
input DeletePlayerByFirstNameAndLastNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  firstName: String!
  lastName: String!
}

"""The output of our delete `PlayerAuxMeetupInfo` mutation."""
type DeletePlayerAuxMeetupInfoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlayerAuxMeetupInfo` that was deleted by this mutation."""
  playerAuxMeetupInfo: PlayerAuxMeetupInfo
  deletedPlayerAuxMeetupInfoNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `PlayerAuxMeetupInfo`."""
  player: Player
}

"""All input for the `deletePlayerAuxMeetupInfoByNodeId` mutation."""
input DeletePlayerAuxMeetupInfoByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlayerAuxMeetupInfo` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlayerAuxMeetupInfo` mutation."""
input DeletePlayerAuxMeetupInfoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: UUID!
}

"""The output of our delete `PlayerGroupMembership` mutation."""
type DeletePlayerGroupMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PlayerGroupMembership` that was deleted by this mutation."""
  playerGroupMembership: PlayerGroupMembership
  deletedPlayerGroupMembershipNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Player` that is related to this `PlayerGroupMembership`.
  """
  player: Player

  """
  Reads a single `Group` that is related to this `PlayerGroupMembership`.
  """
  group: Group
}

"""All input for the `deletePlayerGroupMembershipByNodeId` mutation."""
input DeletePlayerGroupMembershipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlayerGroupMembership` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlayerGroupMembership` mutation."""
input DeletePlayerGroupMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: UUID!
  groupId: UUID!
}

"""The output of our delete `ReduxDump` mutation."""
type DeleteReduxDumpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReduxDump` that was deleted by this mutation."""
  reduxDump: ReduxDump
  deletedReduxDumpNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteReduxDumpByNodeId` mutation."""
input DeleteReduxDumpByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReduxDump` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteReduxDump` mutation."""
input DeleteReduxDumpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `ScoredRunner` mutation."""
type DeleteScoredRunnerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ScoredRunner` that was deleted by this mutation."""
  scoredRunner: ScoredRunner
  deletedScoredRunnerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `GameEventRecord` that is related to this `ScoredRunner`.
  """
  gameEventRecord: GameEventRecord

  """Reads a single `Player` that is related to this `ScoredRunner`."""
  runner: Player

  """Reads a single `Game` that is related to this `ScoredRunner`."""
  game: Game
}

"""All input for the `deleteScoredRunnerByNodeId` mutation."""
input DeleteScoredRunnerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ScoredRunner` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteScoredRunner` mutation."""
input DeleteScoredRunnerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gameEventRecordId: UUID!
  runnerId: UUID!
}

"""The output of our delete `SoloModeOpponentInning` mutation."""
type DeleteSoloModeOpponentInningPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SoloModeOpponentInning` that was deleted by this mutation."""
  soloModeOpponentInning: SoloModeOpponentInning
  deletedSoloModeOpponentInningNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Game` that is related to this `SoloModeOpponentInning`.
  """
  game: Game
}

"""All input for the `deleteSoloModeOpponentInningByNodeId` mutation."""
input DeleteSoloModeOpponentInningByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SoloModeOpponentInning` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSoloModeOpponentInning` mutation."""
input DeleteSoloModeOpponentInningInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `StolenBaseAttempt` mutation."""
type DeleteStolenBaseAttemptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StolenBaseAttempt` that was deleted by this mutation."""
  stolenBaseAttempt: StolenBaseAttempt
  deletedStolenBaseAttemptNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Player` that is related to this `StolenBaseAttempt`."""
  runner: Player

  """Reads a single `Game` that is related to this `StolenBaseAttempt`."""
  game: Game
}

"""All input for the `deleteStolenBaseAttemptByNodeId` mutation."""
input DeleteStolenBaseAttemptByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StolenBaseAttempt` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteStolenBaseAttempt` mutation."""
input DeleteStolenBaseAttemptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Team` mutation."""
type DeleteTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was deleted by this mutation."""
  team: Team
  deletedTeamNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Game` that is related to this `Team`."""
  game: Game

  """Reads a single `Player` that is related to this `Team`."""
  captain: Player
}

"""All input for the `deleteTeamByNodeId` mutation."""
input DeleteTeamByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Team` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTeam` mutation."""
input DeleteTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteTeamByGameIdAndRole` mutation."""
input DeleteTeamByGameIdAndRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gameId: UUID!
  role: TeamRole!
}

"""The output of our `initiatePasswordReset` mutation."""
type InitiatePasswordResetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `initiatePasswordReset` mutation."""
input InitiatePasswordResetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `initiatePlayerClaim` mutation."""
type InitiatePlayerClaimPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `initiatePlayerClaim` mutation."""
input InitiatePlayerClaimInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: UUID!
  email: String!
}

"""The output of our `login` mutation."""
type LoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwt: Jwt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar Jwt

"""All input for the `login` mutation."""
input LoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: UUID!
  resetToken: String!
  newPassword: String!
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  boolean: Boolean

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  code: String!
}
